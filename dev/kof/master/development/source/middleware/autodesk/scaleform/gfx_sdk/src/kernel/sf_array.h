#pragma once

struct Scaleform::ArrayDefaultPolicy
{
	ArrayDefaultPolicy(const Scaleform::ArrayDefaultPolicy &);
	ArrayDefaultPolicy();
	unsigned long long GetMinCapacity();
	unsigned long long GetGranularity();
	bool NeverShrinking();
	unsigned long long GetCapacity();
	void SetCapacity(unsigned long long);
private:
	unsigned long long Capacity; // 0x0
};
Scaleform::ArrayDataBase<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy>(); // 0x1403E3710
Scaleform::ArrayDataBase<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy>(); // 0x140348920
Scaleform::ArrayDataBase<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy>(); // 0x1402EEA80
Scaleform::ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>(); // 0x1402DD5A0
Scaleform::ArrayDataBase<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy>(); // 0x1402DD610
Scaleform::ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>(); // 0x1402DD6A0
Scaleform::ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy>(); // 0x1403DF8A0
Scaleform::ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy>(); // 0x1403DF920
Scaleform::ArrayDataBase<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy>(); // 0x14036DE00
Scaleform::ArrayDataBase<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy>(); // 0x140301780
Scaleform::ArrayDataBase<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy>(); // 0x1402F9850
Scaleform::ArrayDataBase<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >::~ArrayDataBase<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >(); // 0x140318210
Scaleform::ArrayDataBase<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >::~ArrayDataBase<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >(); // 0x1403182A0
Scaleform::ArrayDataBase<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >::~ArrayDataBase<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >(); // 0x140318320
Scaleform::ArrayDataBase<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy>(); // 0x140397940
Scaleform::ArrayDataBase<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy>(); // 0x1403979B0
Scaleform::ArrayDataBase<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy>(); // 0x1403979B0
Scaleform::ArrayDataBase<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy>(); // 0x1403EC520
Scaleform::ArrayDataBase<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy>(); // 0x1403FDFD0
Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy>(); // 0x140574190
Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy>(); // 0x140556090
Scaleform::ArrayDataBase<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy>(); // 0x140348920
Scaleform::ArrayDataBase<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy>(); // 0x1404CD380
Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy>(); // 0x1404534D0
Scaleform::ArrayDataBase<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(); // 0x140598F30
Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy>(); // 0x140598FA0
Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const * __ptr64,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const * __ptr64,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const * __ptr64,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const * __ptr64,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(); // 0x1404EB8A0
Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>(); // 0x1404534D0
Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>(); // 0x1404EB910
Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy>(); // 0x1404533E0
Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy>(); // 0x140453460
Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>(); // 0x1404534D0
Scaleform::ArrayDataBase<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy>::~ArrayDataBase<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy>(); // 0x140453550
void Scaleform::ArrayDataBase<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy>::ClearAndRelease(); // 0x1403FE720
void Scaleform::ArrayDataBase<Scaleform::RangeData<void * __ptr64>,Scaleform::AllocatorLH<Scaleform::RangeData<void * __ptr64>,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14042C000
void Scaleform::ArrayDataBase<Scaleform::Render::Text::Style * __ptr64,Scaleform::AllocatorGH<Scaleform::Render::Text::Style * __ptr64,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1406FAD40
void Scaleform::ArrayDataBase<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140370D00
void Scaleform::ArrayDataBase<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403E4160
void Scaleform::ArrayDataBase<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403652E0
void Scaleform::ArrayDataBase<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14036E730
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403652E0
void Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14035B230
void Scaleform::ArrayDataBase<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14038BD50
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1406FAD40
void Scaleform::ArrayDataBase<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403DA7B0
void Scaleform::ArrayDataBase<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403DA860
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403DA910
void Scaleform::ArrayDataBase<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403652E0
void Scaleform::ArrayDataBase<Scaleform::GFx::ExecuteTag * __ptr64,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag * __ptr64,2>,Scaleform::ArrayConstPolicy<32,16,0> >::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140347970
void Scaleform::ArrayDataBase<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1406FAD40
void Scaleform::ArrayDataBase<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403DA7B0
void Scaleform::ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140390890
void Scaleform::ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403FCA90
void Scaleform::ArrayDataBase<Scaleform::GFx::FontResource * __ptr64,Scaleform::AllocatorGH<Scaleform::GFx::FontResource * __ptr64,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1406FAD40
void Scaleform::ArrayDataBase<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14036E730
void Scaleform::ArrayDataBase<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140342810
void Scaleform::ArrayDataBase<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403428C0
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140342970
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140342A20
void Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140392700
void Scaleform::ArrayDataBase<Scaleform::GFx::DisplayObject * __ptr64,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject * __ptr64,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1405A23E0
void Scaleform::ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14036E730
void Scaleform::ArrayDataBase<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140399D10
void Scaleform::ArrayDataBase<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1402E8A40
void Scaleform::ArrayDataBase<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1402E8AF0
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1402E8C50
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1402E8BA0
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1406FAD40
void Scaleform::ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403E3000
void Scaleform::ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403E30B0
void Scaleform::ArrayDataBase<Scaleform::GFx::TimelineSnapshot::SnapshotElement * __ptr64,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement * __ptr64,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1405A23E0
void Scaleform::ArrayDataBase<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403DD810
void Scaleform::ArrayDataBase<Scaleform::GFx::StaticTextRecord * __ptr64,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord * __ptr64,258>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403F04B0
void Scaleform::ArrayDataBase<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14036E730
void Scaleform::ArrayDataBase<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140392700
void Scaleform::ArrayDataBase<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14036E730
void Scaleform::ArrayDataBase<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14038BD50
void Scaleform::ArrayDataBase<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14036E7E0
void Scaleform::ArrayDataBase<Scaleform::GFx::Task * __ptr64,Scaleform::AllocatorGH<Scaleform::GFx::Task * __ptr64,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1406FAD40
void Scaleform::ArrayDataBase<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403F6970
void Scaleform::ArrayDataBase<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140390890
void Scaleform::ArrayDataBase<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140370D00
void Scaleform::ArrayDataBase<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> >::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140393040
void Scaleform::ArrayDataBase<Scaleform::Render::ImageFileHandler * __ptr64,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler * __ptr64,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1406FAD40
void Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14040A580
void Scaleform::ArrayDataBase<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403428C0
void Scaleform::ArrayDataBase<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14038BD50
void Scaleform::ArrayDataBase<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14038BE00
void Scaleform::ArrayDataBase<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14038A8A0
void Scaleform::ArrayDataBase<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140400760
void Scaleform::ArrayDataBase<Scaleform::Render::Text::LineBuffer::Line * __ptr64,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line * __ptr64,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403652E0
void Scaleform::ArrayDataBase<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14042C000
void Scaleform::ArrayDataBase<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403652E0
void Scaleform::ArrayDataBase<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14040A580
void Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140370C60
void Scaleform::ArrayDataBase<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140399D10
void Scaleform::ArrayDataBase<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140370D00
void Scaleform::ArrayDataBase<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1406FAD40
void Scaleform::ArrayDataBase<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140370DB0
void Scaleform::ArrayDataBase<Scaleform::Render::BundleEntry * __ptr64,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry * __ptr64,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403652E0
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403652E0
void Scaleform::ArrayDataBase<Scaleform::Render::TreeRoot * __ptr64,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot * __ptr64,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403652E0
void Scaleform::ArrayDataBase<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1406FAD40
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1406FAD40
void Scaleform::ArrayDataBase<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403506A0
void Scaleform::ArrayDataBase<Scaleform::Render::UserDataState::Data const * __ptr64,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const * __ptr64,2>,Scaleform::ArrayConstPolicy<0,8,1> >::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14031BA40
void Scaleform::ArrayDataBase<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14031BAF0
void Scaleform::ArrayDataBase<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14031BBA0
void Scaleform::ArrayDataBase<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14031BC50
void Scaleform::ArrayDataBase<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14031BD00
void Scaleform::ArrayDataBase<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14031BDB0
void Scaleform::ArrayDataBase<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> >::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140326AF0
void Scaleform::ArrayDataBase<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403428C0
void Scaleform::ArrayDataBase<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14036E730
void Scaleform::ArrayDataBase<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140399D10
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403652E0
void Scaleform::ArrayDataBase<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14036E730
void Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14040A580
void Scaleform::ArrayDataBase<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403506A0
void Scaleform::ArrayDataBase<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140350750
void Scaleform::ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140350800
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> >::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140396910
void Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14037FDD0
void Scaleform::ArrayDataBase<Scaleform::Render::TextNotifier * __ptr64,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier * __ptr64,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1405A23E0
void Scaleform::ArrayDataBase<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1404006B0
void Scaleform::ArrayDataBase<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140400760
void Scaleform::ArrayDataBase<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14058DA10
void Scaleform::ArrayDataBase<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14058DAC0
void Scaleform::ArrayDataBase<unsigned char const * __ptr64,Scaleform::AllocatorLH_POD<unsigned char const * __ptr64,339>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14058DB70
void Scaleform::ArrayDataBase<Scaleform::Pair<unsigned __int64,unsigned char const * __ptr64>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const * __ptr64>,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1405A2490
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14058DC20
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14058DCD0
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14058DD80
void Scaleform::ArrayDataBase<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140510680
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140579C50
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140350800
void Scaleform::ArrayDataBase<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1405A23E0
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1405A23E0
void Scaleform::ArrayDataBase<long const * __ptr64,Scaleform::AllocatorDH<long const * __ptr64,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1405A23E0
void Scaleform::ArrayDataBase<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1405A2490
void Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1405105E0
void Scaleform::ArrayDataBase<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140510680
void Scaleform::ArrayDataBase<Scaleform::Pair<Scaleform::GFx::AS3::Value const * __ptr64,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const * __ptr64,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1405A2490
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const * __ptr64,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const * __ptr64,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140342810
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1405A23E0
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403652E0
void Scaleform::ArrayDataBase<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1404A28C0
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * __ptr64,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * __ptr64,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403652E0
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::TR::Def * __ptr64,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def * __ptr64,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1405A23E0
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::VMAbcFile * __ptr64,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile * __ptr64,329>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1404A2970
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1404A2FA0
void Scaleform::ArrayDataBase<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x14036E730
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1404A2A20
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1404A2AD0
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1404A2B80
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1404A2C30
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1404A2CE0
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1404A2D90
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1404A2E40
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1406FAD40
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1404A2EF0
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403F6970
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x140399D10
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1404A3050
void Scaleform::ArrayDataBase<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1404A3100
void Scaleform::ArrayDataBase<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1404A32A0
void Scaleform::ArrayDataBase<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1404A3350
void Scaleform::ArrayDataBase<Scaleform::Render::GL::MeshBuffer * __ptr64,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer * __ptr64,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403652E0
void Scaleform::ArrayDataBase<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> >::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1405ED880
void Scaleform::ArrayDataBase<Scaleform::Render::TextureFormat * __ptr64,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat * __ptr64,2>,Scaleform::ArrayDefaultPolicy>::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1403652E0
void Scaleform::ArrayDataBase<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> >::Reserve(const void * pheapAddr, unsigned long long newCapacity); // 0x1405F7200
void Scaleform::ArrayDataBase<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1403E4210
void Scaleform::ArrayDataBase<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1403D0440
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x14034A200
void Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x14035B2E0
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x14030AF90
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1403DABA0
void Scaleform::ArrayDataBase<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1403653B0
void Scaleform::ArrayDataBase<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1402EF4E0
void Scaleform::ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1403FCB40
void Scaleform::ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1403FCC00
void Scaleform::ArrayDataBase<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x140342B60
void Scaleform::ArrayDataBase<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x140342C00
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x14030AF90
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x140342CA0
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x140342D50
void Scaleform::ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1402E9140
void Scaleform::ArrayDataBase<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1402E9200
void Scaleform::ArrayDataBase<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1402E92D0
void Scaleform::ArrayDataBase<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1402E9370
void Scaleform::ArrayDataBase<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1402E9430
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1402E94F0
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1402E95A0
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1402E9650
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1402E9700
void Scaleform::ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1403E31D0
void Scaleform::ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1403E3290
void Scaleform::ArrayDataBase<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1403D0440
void Scaleform::ArrayDataBase<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x14036E930
void Scaleform::ArrayDataBase<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x14036E9D0
void Scaleform::ArrayDataBase<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x14036EA90
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x14031FD40
void Scaleform::ArrayDataBase<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1403F6B20
void Scaleform::ArrayDataBase<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1403093D0
void Scaleform::ArrayDataBase<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x14038A950
void Scaleform::ArrayDataBase<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x14038AA20
void Scaleform::ArrayDataBase<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1402FFCA0
void Scaleform::ArrayDataBase<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1402FFD40
void Scaleform::ArrayDataBase<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x140370FE0
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x14034A200
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x14031FD40
void Scaleform::ArrayDataBase<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x14031C130
void Scaleform::ArrayDataBase<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x14031C210
void Scaleform::ArrayDataBase<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x14031C2E0
void Scaleform::ArrayDataBase<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x14031C3A0
void Scaleform::ArrayDataBase<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x140399E60
void Scaleform::ArrayDataBase<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x140399F20
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x140399FC0
void Scaleform::ArrayDataBase<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x14039A070
void Scaleform::ArrayDataBase<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x140399F20
void Scaleform::ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1403508B0
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> >::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1403969D0
void Scaleform::ArrayDataBase<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x140400810
void Scaleform::ArrayDataBase<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1404008D0
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x140579E40
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x14055E770
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x14058B2F0
void Scaleform::ArrayDataBase<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1405A2890
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const * __ptr64,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const * __ptr64,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1405109A0
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x140510A60
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x140510B30
void Scaleform::ArrayDataBase<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1403D0440
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1404A3800
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1404A38D0
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1404A39A0
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1404A3A40
void Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1404A3AF0
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1404A3BA0
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x140510B30
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1404A3C70
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x140510A60
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1404A3D40
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1404A3E10
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1404A3EE0
void Scaleform::ArrayDataBase<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1403653B0
void Scaleform::ArrayDataBase<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1404A3FB0
void Scaleform::ArrayDataBase<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1404A4060
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1404A4110
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1404A41D0
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1404A4270
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1404A4310
void Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1404A43B0
void Scaleform::ArrayDataBase<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy>::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1404A4450
void Scaleform::ArrayDataBase<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> >::ResizeNoConstruct(const void * pheapAddr, unsigned long long newSize); // 0x1405F7350
struct Scaleform::ArrayDataBase<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> >(const Scaleform::ArrayDataBase<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > &);
	ArrayDataBase<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> >(const Scaleform::ArrayConstPolicy<0,16,1> &);
	ArrayDataBase<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> >();
	~ArrayDataBase<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> >();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Waitable::HandlerStruct * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayConstPolicy<0,16,1> Policy; // 0x10
};
struct Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	unsigned char * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	char * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> >
{
	typedef const Scaleform::Render::UserDataState::Data ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayDataBase<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > &);
	ArrayDataBase<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayConstPolicy<0,8,1> &);
	ArrayDataBase<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
	~ArrayDataBase<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	const Scaleform::Render::UserDataState::Data * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayConstPolicy<0,8,1> Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayDataBase<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > &);
	ArrayDataBase<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayConstPolicy<0,8,1> &);
	ArrayDataBase<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
	~ArrayDataBase<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::HAL::RenderTargetEntry * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayConstPolicy<0,8,1> Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayDataBase<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > &);
	ArrayDataBase<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayConstPolicy<0,8,1> &);
	ArrayDataBase<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
	~ArrayDataBase<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::Matrix3x4<float> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayConstPolicy<0,8,1> Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayDataBase<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > &);
	ArrayDataBase<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayConstPolicy<0,8,1> &);
	ArrayDataBase<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
	~ArrayDataBase<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::HAL::BlendModeStackEntry * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayConstPolicy<0,8,1> Policy; // 0x10
};
struct Scaleform::ArrayDataBase<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> >
{
	typedef unsigned long long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> >(const Scaleform::ArrayDataBase<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > &);
	ArrayDataBase<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> >(const Scaleform::ArrayConstPolicy<4,4,0> &);
	ArrayDataBase<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> >();
	~ArrayDataBase<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> >();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	unsigned long long * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayConstPolicy<4,4,0> Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::Render::TextureFormat ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::TextureFormat * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::MemberValue * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	char * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef wchar_t ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	wchar_t * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::ExternalFontWinAPI::GlyphType * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::Font::NativeHintingType * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayDataBase<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > &);
	ArrayDataBase<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayConstPolicy<0,8,1> &);
	ArrayDataBase<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
	~ArrayDataBase<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::HAL::MaskStackEntry * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayConstPolicy<0,8,1> Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::TextKeyMap::KeyMapEntry * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::Render::Image> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	unsigned char * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayDataBase<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > &);
	ArrayDataBase<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayConstPolicy<0,8,1> &);
	ArrayDataBase<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
	~ArrayDataBase<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::HAL::FilterStackEntry * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayConstPolicy<0,8,1> Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::StrokeStyleType * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef float ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	float * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::Render::TreeRoot ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::TreeRoot * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::Render::BundleEntry ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::BundleEntry * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayDataBase<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > &);
	ArrayDataBase<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayConstPolicy<0,8,1> &);
	ArrayDataBase<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
	~ArrayDataBase<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::Matrix4x4<float> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayConstPolicy<0,8,1> Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::Render::Filter> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	unsigned char * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::ComplexMesh::FillRecord * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::Render::Text::LineBuffer::Line ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::Text::LineBuffer::Line * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	unsigned long * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::Text::HighlightDesc * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::Text::DocView::ImageSubstitutor::Element * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::Text::StyledText::ParagraphPtrWrapper * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::MatrixPoolImpl::HMatrix * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> >(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> >(const Scaleform::ArrayConstPolicy<128,64,1> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> >();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> >();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::Render::Fence> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayConstPolicy<128,64,1> Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::Matrix2x4<float> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	unsigned char * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	unsigned char * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::ShapeMeshProvider::DrawLayerType * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::Primitive::MeshEntry * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::Render::ImageFileHandler ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::ImageFileHandler * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::FillStyleType * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayDataBase<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > &);
	ArrayDataBase<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayConstPolicy<0,8,1> &);
	ArrayDataBase<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> >();
	~ArrayDataBase<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> >();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayConstPolicy<0,8,1> Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> >(const Scaleform::ArrayDataBase<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > &);
	ArrayDataBase<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> >(const Scaleform::ArrayConstPolicy<8,8,0> &);
	ArrayDataBase<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> >();
	~ArrayDataBase<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> >();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayConstPolicy<8,8,0> Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::Render::GL::MeshBuffer ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::GL::MeshBuffer * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::FontData::AdvanceEntry * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	unsigned long * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::TimelineDef::Frame * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::ImportData::Symbol * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::TextureGlyph * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::RangeData<void *> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::Render::Text::Style ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::Text::Style * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::Text::CSSToken<wchar_t> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	unsigned char * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::MovieImpl::IndirectTransPair * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDataDef> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::StaticTextRecord::GlyphEntry * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::MovieImpl::MDKillListEntry * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::TimelineDef::Frame * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::StaticTextRecord ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::StaticTextRecord * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::MovieImpl::FontDesc * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::DisplayList::DepthToIndexMapElem * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::Point<float> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::MovieImpl::LevelInfo * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::DisplayList::DisplayEntry * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> >
{
	typedef Scaleform::GFx::ExecuteTag ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> >(const Scaleform::ArrayDataBase<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > &);
	ArrayDataBase<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> >(const Scaleform::ArrayConstPolicy<32,16,0> &);
	ArrayDataBase<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> >();
	~ArrayDataBase<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> >();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::ExecuteTag * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayConstPolicy<32,16,0> Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::ButtonRecord * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::Button::CharToRec * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::FontGlyphPacker::GlyphInfo * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::FontResource ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::FontResource * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::MsgFormat::fmt_record * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef void *ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	void * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	long * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::`anonymous-namespace'::Range * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::String * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::StrokeStyleType * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::FillStyleType * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::MovieDataDef::SceneInfo * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::ImagePackerImpl::InputImage * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::Resource> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::FillStyleType * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::StrokeStyleType * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::StaticTextSnapshotData::CharRef * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::TextureGlyph * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::Task> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::TaskThreadInPool ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::TaskThreadInPool * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::Task ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::Task * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::Text::HighlightDesc * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	tagKERNINGPAIR * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::Point<long> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::MemItem> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::Value * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::AS3::VMAbcFile ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::VMAbcFile * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::Multiname * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::Slots::Pair * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy>
{
	typedef long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	long * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::VMExceptionTypeInfo * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned long long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	unsigned long long * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::Abc::NamespaceSetInfo * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy>
{
	typedef long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	long * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::Abc::NamespaceInfo * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::VMExceptionInfo * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy>
{
	typedef const unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	const unsigned char * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	unsigned long * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::AS3::Instances::fl::GlobalObject ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::Instances::fl::GlobalObject * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::Abc::Multiname * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::Abc::StringView * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::VMMethodBodyInfo * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::Value * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	unsigned char * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::Value * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::Value * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> >
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> >(const Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > &);
	ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> >(const Scaleform::ArrayConstPolicy<0,4,1> &);
	ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> >();
	~ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> >();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	unsigned char * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayConstPolicy<0,4,1> Policy; // 0x10
};
Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>(long size); // 0x14044D4C0
void Scaleform::ArrayData<Scaleform::RangeData<void * __ptr64>,Scaleform::AllocatorLH<Scaleform::RangeData<void * __ptr64>,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x14042C1E0
void Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x1406FADF0
void Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x1403D03B0
void Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x1403DAB20
void Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x14030F190
void Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x140342AD0
void Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x1402E90C0
void Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x1403DD8C0
void Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x1403F0560
void Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x14036E890
void Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x1403F6AA0
void Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x140390940
void Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> >::Resize(unsigned long long newSize); // 0x140393130
void Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x14040A620
void Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x14038BEB0
void Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line * __ptr64,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line * __ptr64,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x1403ED910
void Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x14040A620
void Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x1402E90C0
void Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x140370E60
void Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x140370EE0
void Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x140370F60
void Scaleform::ArrayData<Scaleform::Render::BundleEntry * __ptr64,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry * __ptr64,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x1403ED910
void Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x14040A620
void Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x140378AD0
void Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const * __ptr64,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const * __ptr64,2>,Scaleform::ArrayConstPolicy<0,8,1> >::Resize(unsigned long long newSize); // 0x14031BE60
void Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >::Resize(unsigned long long newSize); // 0x14031BEE0
void Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >::Resize(unsigned long long newSize); // 0x14031BF50
void Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >::Resize(unsigned long long newSize); // 0x14031BFC0
void Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >::Resize(unsigned long long newSize); // 0x14031C070
void Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x140399DC0
void Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x14037FE70
void Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x140510800
void Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x1404A3690
void Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> >::Resize(unsigned long long newSize); // 0x1405F72C0
void Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy>::PushBack(const Scaleform::GFx::FontGlyphPacker::GlyphInfo & val); // 0x1403E5390
void Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>::PushBack(const unsigned char & val); // 0x1402E7780
void Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>::PushBack(const Scaleform::Render::Text::HighlightDesc & val); // 0x14038BAC0
void Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >::PushBack(const Scaleform::Render::Matrix3x4<float> & val); // 0x14031AC80
void Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >::PushBack(const Scaleform::Render::Matrix4x4<float> & val); // 0x14031AD10
void Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>::PushBack(const Scaleform::GFx::AS3::Value & val); // 0x14049D570
void Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>::PushBack(const Scaleform::GFx::AS3::Value & val); // 0x14049D630
void Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy>::PushBack(const Scaleform::GFx::AS3::Value & val); // 0x14049D6F0
void Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>::Append(const unsigned char * other, unsigned long long count); // 0x1402EEBF0
void Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> >::Append(const Scaleform::Waitable::HandlerStruct * other, unsigned long long count); // 0x140392C30
void Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy>::Append(const Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > * other, unsigned long long count); // 0x1402F9DC0
void Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy>::Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> * other, unsigned long long count); // 0x1404FC620
struct Scaleform::ArrayDataBase<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::Render::TextNotifier ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::TextNotifier * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::TextMeshLayer * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::TextMeshEntry * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::MovieDataDef::FrameLabelInfo * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	unsigned char * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::TimelineSnapshot::SnapshotElement ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::TimelineSnapshot::SnapshotElement * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::Text::StyledText::HTMLImageTagInfo * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::DisplayObject ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::DisplayObject * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::Sprite> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::Value * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy>
{
	enum ValueType
	{
		kNone = 0,
		kElement = 1,
		kText = 2,
		kComment = 3,
		kDecl = 4,
		kCData = 5,
		kDocType = 6,
		kProcInstr = 7,
	};
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::XMLParser::Kind * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Pair<unsigned __int64,unsigned char const *> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	unsigned long * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ASStringNode> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef double ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	double * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	long * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Pair<double,unsigned long> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef const long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	const long * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef const unsigned long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	const unsigned long * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef const double ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	const double * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef const Scaleform::Ptr<Scaleform::GFx::ASStringNode> ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef const Scaleform::GFx::AS3::Value ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	const Scaleform::GFx::AS3::Value * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2();
	~ArrayDataBase<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned long long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	unsigned long long * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::ReadArgs::AlignedStruct * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::AS3::TR::Def ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::TR::Def * * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::AS3::AbsoluteIndex * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy>
{
	typedef long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	long * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
void Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement * __ptr64,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement * __ptr64,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x1404A3720
void Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x1404A3720
void Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x140510880
void Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x140510880
void Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def * __ptr64,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def * __ptr64,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x1404A3720
void Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy>::Resize(unsigned long long newSize); // 0x1404A3790
void Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>::PushBack(const Scaleform::GFx::AS3::Value & val); // 0x14049D7B0
void Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy>::Append(const Scaleform::GFx::MovieDataDef::FrameLabelInfo * other, unsigned long long count); // 0x14033E7F0
struct Scaleform::ArrayDataBase<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::ASString * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
struct Scaleform::ArrayDataBase<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct SelfType;
	ArrayDataBase<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataBase<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataBase<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDefaultPolicy &);
	ArrayDataBase<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy>();
	~ArrayDataBase<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy>();
	unsigned long long GetCapacity();
	void ClearAndRelease();
	void Reserve(const void *, unsigned long long);
	void ResizeNoConstruct(const void *, unsigned long long);
	Scaleform::GFx::ASString * Data; // 0x0
	unsigned long long Size; // 0x8
	Scaleform::ArrayDefaultPolicy Policy; // 0x10
};
void Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >::Clear(); // 0x1404652F0
void Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement * __ptr64,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement * __ptr64,2>,Scaleform::ArrayDefaultPolicy> >::Clear(); // 0x1404652F0
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task * __ptr64,Scaleform::AllocatorGH<Scaleform::GFx::Task * __ptr64,2>,Scaleform::ArrayDefaultPolicy> >::Clear(); // 0x1404652F0
void Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> >::Clear(); // 0x1404652F0
void Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> >::Clear(); // 0x1404FDCF0
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * __ptr64,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * __ptr64,2>,Scaleform::ArrayDefaultPolicy> >::Clear(); // 0x1404652F0
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> >::Resize(unsigned long long newSize); // 0x1403E3160
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >::Resize(unsigned long long newSize); // 0x140510730
void Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::Resize(unsigned long long newSize); // 0x140510790
void Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def * __ptr64,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def * __ptr64,2>,Scaleform::ArrayDefaultPolicy> >::PushBack(Scaleform::GFx::AS3::TR::Def * & val); // 0x14049D500
Scaleform::Render::HAL::FilterStackEntry Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Pop(); // 0x14031A170
Scaleform::GFx::AS3::Value Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::Pop(); // 0x1405A16A0
const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> > & Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >::operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> > & a); // 0x1404EC310
const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> > & Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> > & a); // 0x1404EC3F0
const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> > & Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> >::operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> > & a); // 0x1404567F0
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> >::RemoveMultipleAt(unsigned long long index, unsigned long long num); // 0x140399BB0
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> >::RemoveMultipleAt(unsigned long long index, unsigned long long num); // 0x140399C50
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> >::RemoveMultipleAt(unsigned long long index, unsigned long long num); // 0x140399BB0
void Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> >::RemoveMultipleAt(unsigned long long index, unsigned long long num); // 0x1405A2320
void Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::RemoveMultipleAt(unsigned long long index, unsigned long long num); // 0x14050FDE0
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> >::RemoveAt(unsigned long long index); // 0x1403CFB80
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> >::RemoveAt(unsigned long long index); // 0x1402E8660
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> >::RemoveAt(unsigned long long index); // 0x1402E8700
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> >::RemoveAt(unsigned long long index); // 0x1402E87B0
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> >::RemoveAt(unsigned long long index); // 0x1403F67B0
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> >::RemoveAt(unsigned long long index); // 0x1402FF760
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::RemoveAt(unsigned long long index); // 0x1402FF810
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> >::RemoveAt(unsigned long long index); // 0x1403947A0
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> >::RemoveAt(unsigned long long index); // 0x14055E4F0
void Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> >::RemoveAt(unsigned long long index); // 0x1405A21A0
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >::RemoveAt(unsigned long long index); // 0x14050FBC0
void Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::RemoveAt(unsigned long long index); // 0x14050FC50
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> >::RemoveAt(unsigned long long index); // 0x1404A18A0
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void * __ptr64>,Scaleform::AllocatorLH<Scaleform::RangeData<void * __ptr64>,2>,Scaleform::ArrayDefaultPolicy> >::InsertAt(unsigned long long index, const Scaleform::RangeData<void *> & val); // 0x14042A820
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> >::InsertAt(unsigned long long index, const Scaleform::GFx::DisplayList::DisplayEntry & val); // 0x1403CF250
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> >::InsertAt(unsigned long long index, const Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> & val); // 0x1403F4BB0
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> >::InsertAt(unsigned long long index, const Scaleform::Render::Text::DocView::ImageSubstitutor::Element & val); // 0x1403089A0
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >::InsertAt(unsigned long long index, const Scaleform::Render::Text::HighlightDesc & val); // 0x14038B980
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> >::InsertAt(unsigned long long index, const Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > & val); // 0x1402FE020
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::InsertAt(unsigned long long index, const Scaleform::Render::Text::StyledText::ParagraphPtrWrapper & val); // 0x1402FE110
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> >::InsertAt(unsigned long long index, const Scaleform::Render::Primitive::MeshEntry & val); // 0x1403995B0
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> >::InsertAt(unsigned long long index, const Scaleform::Render::MatrixPoolImpl::HMatrix & val); // 0x140399690
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> >::InsertAt(unsigned long long index, const Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry & val); // 0x1403995B0
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> >::InsertAt(unsigned long long index, const Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener & val); // 0x14055CEA0
void Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >::InsertAt(unsigned long long index, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> & val); // 0x14050C090
void Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::InsertAt(unsigned long long index, const Scaleform::GFx::AS3::Value & val); // 0x14050C160
void Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> >::InsertAt(unsigned long long index, const Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> & val); // 0x14048E3E0
void Scaleform::ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> >::InsertMultipleAt(unsigned long long index, unsigned long long num, const double & val); // 0x1405A0B90
void Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> >::InsertMultipleAt(unsigned long long index, unsigned long long num, const Scaleform::Ptr<Scaleform::GFx::ASStringNode> & val); // 0x1405A0CA0
void Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::InsertMultipleAt(unsigned long long index, unsigned long long num, const Scaleform::GFx::AS3::Value & val); // 0x1405A0D80
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::Iterator
{
private:
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> > * pArray; // 0x0
	long long CurIndex; // 0x8
public:
	Iterator(Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> > *, long long);
	Iterator();
	bool operator==(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::Iterator &);
	bool operator!=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::Iterator &);
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::Iterator operator++(long);
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::Iterator & operator++();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::Iterator operator--(long);
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::Iterator & operator--();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::Iterator operator+(long);
	long long operator-(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::Iterator &);
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::Iterator operator-(long);
	Scaleform::Render::Text::StyledText::ParagraphPtrWrapper & operator*();
	Scaleform::Render::Text::StyledText::ParagraphPtrWrapper * operator->();
	Scaleform::Render::Text::StyledText::ParagraphPtrWrapper * GetPtr();
	bool IsFinished();
	void Remove();
	long long GetIndex();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >::Iterator
{
private:
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > > * pArray; // 0x0
	long long CurIndex; // 0x8
public:
	Iterator(Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > > *, long long);
	Iterator();
	bool operator==(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >::Iterator &);
	bool operator!=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >::Iterator &);
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >::Iterator operator++(long);
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >::Iterator & operator++();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >::Iterator operator--(long);
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >::Iterator & operator--();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >::Iterator operator+(long);
	long long operator-(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >::Iterator &);
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >::Iterator operator-(long);
	Scaleform::Ptr<Scaleform::Render::Fence> & operator*();
	Scaleform::Ptr<Scaleform::Render::Fence> * operator->();
	Scaleform::Ptr<Scaleform::Render::Fence> * GetPtr();
	bool IsFinished();
	void Remove();
	long long GetIndex();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator
{
private:
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> > * pArray; // 0x0
	long long CurIndex; // 0x8
public:
	ConstIterator(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> > *, long long);
	ConstIterator();
	bool operator==(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator &);
	bool operator!=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator &);
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator operator++(long);
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator & operator++();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator operator--(long);
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator & operator--();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator operator+(long);
	long long operator-(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator &);
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator operator-(long);
	const Scaleform::Render::Text::StyledText::ParagraphPtrWrapper & operator*();
	const Scaleform::Render::Text::StyledText::ParagraphPtrWrapper * operator->();
	const Scaleform::Render::Text::StyledText::ParagraphPtrWrapper * GetPtr();
	bool IsFinished();
	long long GetIndex();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator
{
private:
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> > * pArray; // 0x0
	long long CurIndex; // 0x8
public:
	ConstIterator(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> > *, long long);
	ConstIterator();
	bool operator==(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator &);
	bool operator!=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator &);
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator operator++(long);
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator & operator++();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator operator--(long);
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator & operator--();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator operator+(long);
	long long operator-(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator &);
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator operator-(long);
	const Scaleform::GFx::AS3::VMExceptionTypeInfo & operator*();
	const Scaleform::GFx::AS3::VMExceptionTypeInfo * operator->();
	const Scaleform::GFx::AS3::VMExceptionTypeInfo * GetPtr();
	bool IsFinished();
	long long GetIndex();
};
struct Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::Waitable::HandlerStruct>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > >(Scaleform::MemoryHeap *, const Scaleform::Waitable::HandlerStruct &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > >(Scaleform::MemoryHeap *, const Scaleform::Waitable::HandlerStruct &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > >(const Scaleform::Waitable::HandlerStruct &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > >(const Scaleform::Waitable::HandlerStruct &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > >();
	Scaleform::ArrayConstPolicy<0,16,1> * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayConstPolicy<0,16,1> &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Waitable::HandlerStruct & At(unsigned long long);
	Scaleform::Waitable::HandlerStruct & At(unsigned long long);
	Scaleform::Waitable::HandlerStruct ValueAt(unsigned long long);
	const Scaleform::Waitable::HandlerStruct & operator[](unsigned long long);
	Scaleform::Waitable::HandlerStruct & operator[](unsigned long long);
	Scaleform::Waitable::HandlerStruct * GetDataPtr();
	const Scaleform::Waitable::HandlerStruct * GetDataPtr();
	void PushBack(const Scaleform::Waitable::HandlerStruct &);
	void PopBack(unsigned long long);
	Scaleform::Waitable::HandlerStruct & PushDefault();
	Scaleform::Waitable::HandlerStruct Pop();
	const Scaleform::Waitable::HandlerStruct & Front();
	Scaleform::Waitable::HandlerStruct & Front();
	const Scaleform::Waitable::HandlerStruct & Back();
	Scaleform::Waitable::HandlerStruct & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Waitable::HandlerStruct &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Waitable::HandlerStruct &);
	void Append(const Scaleform::Waitable::HandlerStruct *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > >();
};
struct Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > :
	Scaleform::ArrayDataBase<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> >(const Scaleform::ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> > &);
	ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> >(long);
	ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> >();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Waitable::HandlerStruct &);
	void Append(const Scaleform::Waitable::HandlerStruct *, unsigned long long);
	~ArrayData<Scaleform::Waitable::HandlerStruct,Scaleform::AllocatorGH<Scaleform::Waitable::HandlerStruct,2>,Scaleform::ArrayConstPolicy<0,16,1> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Font::NativeHintingType &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Font::NativeHintingType &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Font::NativeHintingType &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Font::NativeHintingType &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::Font::NativeHintingType & At(unsigned long long);
	Scaleform::Render::Font::NativeHintingType & At(unsigned long long);
	Scaleform::Render::Font::NativeHintingType ValueAt(unsigned long long);
	const Scaleform::Render::Font::NativeHintingType & operator[](unsigned long long);
	Scaleform::Render::Font::NativeHintingType & operator[](unsigned long long);
	Scaleform::Render::Font::NativeHintingType * GetDataPtr();
	const Scaleform::Render::Font::NativeHintingType * GetDataPtr();
	void PushBack(const Scaleform::Render::Font::NativeHintingType &);
	void PopBack(unsigned long long);
	Scaleform::Render::Font::NativeHintingType & PushDefault();
	Scaleform::Render::Font::NativeHintingType Pop();
	const Scaleform::Render::Font::NativeHintingType & Front();
	Scaleform::Render::Font::NativeHintingType & Front();
	const Scaleform::Render::Font::NativeHintingType & Back();
	Scaleform::Render::Font::NativeHintingType & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::Font::NativeHintingType &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::Font::NativeHintingType &);
	void Append(const Scaleform::Render::Font::NativeHintingType *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const char &);
	void Append(const char *, unsigned long long);
	~ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::Font::NativeHintingType &);
	void Append(const Scaleform::Render::Font::NativeHintingType *, unsigned long long);
	~ArrayData<Scaleform::Render::Font::NativeHintingType,Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const char &, long);
	ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const char &);
	ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> >(const char &, long);
	ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> >(const char &);
	ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const char & At(unsigned long long);
	char & At(unsigned long long);
	char ValueAt(unsigned long long);
	const char & operator[](unsigned long long);
	char & operator[](unsigned long long);
	char * GetDataPtr();
	const char * GetDataPtr();
	void PushBack(const char &);
	void PopBack(unsigned long long);
	char & PushDefault();
	char Pop();
	const char & Front();
	char & Front();
	const char & Back();
	char & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const char &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const char &);
	void Append(const char *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorGH<char,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef Scaleform::Render::ImageFileHandler ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::Render::ImageFileHandler * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::Render::ImageFileHandler * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::Render::ImageFileHandler * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::Render::ImageFileHandler * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	Scaleform::Render::ImageFileHandler * & At(unsigned long long);
	Scaleform::Render::ImageFileHandler * & At(unsigned long long);
	Scaleform::Render::ImageFileHandler * ValueAt(unsigned long long);
	Scaleform::Render::ImageFileHandler * & operator[](unsigned long long);
	Scaleform::Render::ImageFileHandler * & operator[](unsigned long long);
	Scaleform::Render::ImageFileHandler * * GetDataPtr();
	Scaleform::Render::ImageFileHandler * * GetDataPtr();
	void PushBack(Scaleform::Render::ImageFileHandler * &);
	void PopBack(unsigned long long);
	Scaleform::Render::ImageFileHandler * & PushDefault();
	Scaleform::Render::ImageFileHandler * Pop();
	Scaleform::Render::ImageFileHandler * & Front();
	Scaleform::Render::ImageFileHandler * & Front();
	Scaleform::Render::ImageFileHandler * & Back();
	Scaleform::Render::ImageFileHandler * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, Scaleform::Render::ImageFileHandler * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, Scaleform::Render::ImageFileHandler * &);
	void Append(Scaleform::Render::ImageFileHandler * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const unsigned char &);
	void Append(const unsigned char *, unsigned long long);
	~ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::Render::Filter> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::Render::Filter> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::Render::Filter> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::Render::Filter> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::Render::Filter> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::Render::Filter> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::Render::Filter> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::Render::Filter> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::Render::Filter> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::Render::Filter> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::Render::Filter> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::Render::Filter> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::Render::Filter> & PushDefault();
	Scaleform::Ptr<Scaleform::Render::Filter> Pop();
	const Scaleform::Ptr<Scaleform::Render::Filter> & Front();
	Scaleform::Ptr<Scaleform::Render::Filter> & Front();
	const Scaleform::Ptr<Scaleform::Render::Filter> & Back();
	Scaleform::Ptr<Scaleform::Render::Filter> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::Render::Filter> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::Render::Filter> &);
	void Append(const Scaleform::Ptr<Scaleform::Render::Filter> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned char &, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned char &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(const unsigned char &, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(const unsigned char &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const unsigned char & At(unsigned long long);
	unsigned char & At(unsigned long long);
	unsigned char ValueAt(unsigned long long);
	const unsigned char & operator[](unsigned long long);
	unsigned char & operator[](unsigned long long);
	unsigned char * GetDataPtr();
	const unsigned char * GetDataPtr();
	void PushBack(const unsigned char &);
	void PopBack(unsigned long long);
	unsigned char & PushDefault();
	unsigned char Pop();
	const unsigned char & Front();
	unsigned char & Front();
	const unsigned char & Back();
	unsigned char & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const unsigned char &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const unsigned char &);
	void Append(const unsigned char *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::TextKeyMap::KeyMapEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::TextKeyMap::KeyMapEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::TextKeyMap::KeyMapEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::TextKeyMap::KeyMapEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::TextKeyMap::KeyMapEntry & At(unsigned long long);
	Scaleform::GFx::TextKeyMap::KeyMapEntry & At(unsigned long long);
	Scaleform::GFx::TextKeyMap::KeyMapEntry ValueAt(unsigned long long);
	const Scaleform::GFx::TextKeyMap::KeyMapEntry & operator[](unsigned long long);
	Scaleform::GFx::TextKeyMap::KeyMapEntry & operator[](unsigned long long);
	Scaleform::GFx::TextKeyMap::KeyMapEntry * GetDataPtr();
	const Scaleform::GFx::TextKeyMap::KeyMapEntry * GetDataPtr();
	void PushBack(const Scaleform::GFx::TextKeyMap::KeyMapEntry &);
	void PopBack(unsigned long long);
	Scaleform::GFx::TextKeyMap::KeyMapEntry & PushDefault();
	Scaleform::GFx::TextKeyMap::KeyMapEntry Pop();
	const Scaleform::GFx::TextKeyMap::KeyMapEntry & Front();
	Scaleform::GFx::TextKeyMap::KeyMapEntry & Front();
	const Scaleform::GFx::TextKeyMap::KeyMapEntry & Back();
	Scaleform::GFx::TextKeyMap::KeyMapEntry & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::TextKeyMap::KeyMapEntry &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::TextKeyMap::KeyMapEntry &);
	void Append(const Scaleform::GFx::TextKeyMap::KeyMapEntry *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorGH<unsigned char,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<unsigned char>
{
};
struct Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::Render::ImageFileHandler ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(Scaleform::Render::ImageFileHandler * &);
	void Append(Scaleform::Render::ImageFileHandler * *, unsigned long long);
	~ArrayData<Scaleform::Render::ImageFileHandler *,Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorGH<Scaleform::Render::ImageFileHandler *,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::ImageFileHandler *>
{
};
struct Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::TextKeyMap::KeyMapEntry &);
	void Append(const Scaleform::GFx::TextKeyMap::KeyMapEntry *, unsigned long long);
	~ArrayData<Scaleform::GFx::TextKeyMap::KeyMapEntry,Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::Render::Filter> &);
	void Append(const Scaleform::Ptr<Scaleform::Render::Filter> *, unsigned long long);
	~ArrayData<Scaleform::Ptr<Scaleform::Render::Filter>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef unsigned long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned long &, long);
	ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned long &);
	ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >(const unsigned long &, long);
	ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >(const unsigned long &);
	ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const unsigned long & At(unsigned long long);
	unsigned long & At(unsigned long long);
	unsigned long ValueAt(unsigned long long);
	const unsigned long & operator[](unsigned long long);
	unsigned long & operator[](unsigned long long);
	unsigned long * GetDataPtr();
	const unsigned long * GetDataPtr();
	void PushBack(const unsigned long &);
	void PopBack(unsigned long long);
	unsigned long & PushDefault();
	unsigned long Pop();
	const unsigned long & Front();
	unsigned long & Front();
	const unsigned long & Back();
	unsigned long & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const unsigned long &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const unsigned long &);
	void Append(const unsigned long *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & PushDefault();
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> Pop();
	const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & Front();
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & Front();
	const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & Back();
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorGH<unsigned long,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<unsigned long>
{
};
struct Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> *, unsigned long long);
	~ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const unsigned long &);
	void Append(const unsigned long *, unsigned long long);
	~ArrayData<unsigned long,Scaleform::AllocatorGH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::Text::Style *>
{
};
struct Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::Render::Text::Style ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(Scaleform::Render::Text::Style * &);
	void Append(Scaleform::Render::Text::Style * *, unsigned long long);
	~ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::Text::CSSToken<wchar_t> >
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::Text::CSSToken<wchar_t> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::Text::CSSToken<wchar_t> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::Text::CSSToken<wchar_t> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::Text::CSSToken<wchar_t> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::Text::CSSToken<wchar_t> & At(unsigned long long);
	Scaleform::GFx::Text::CSSToken<wchar_t> & At(unsigned long long);
	Scaleform::GFx::Text::CSSToken<wchar_t> ValueAt(unsigned long long);
	const Scaleform::GFx::Text::CSSToken<wchar_t> & operator[](unsigned long long);
	Scaleform::GFx::Text::CSSToken<wchar_t> & operator[](unsigned long long);
	Scaleform::GFx::Text::CSSToken<wchar_t> * GetDataPtr();
	const Scaleform::GFx::Text::CSSToken<wchar_t> * GetDataPtr();
	void PushBack(const Scaleform::GFx::Text::CSSToken<wchar_t> &);
	void PopBack(unsigned long long);
	Scaleform::GFx::Text::CSSToken<wchar_t> & PushDefault();
	Scaleform::GFx::Text::CSSToken<wchar_t> Pop();
	const Scaleform::GFx::Text::CSSToken<wchar_t> & Front();
	Scaleform::GFx::Text::CSSToken<wchar_t> & Front();
	const Scaleform::GFx::Text::CSSToken<wchar_t> & Back();
	Scaleform::GFx::Text::CSSToken<wchar_t> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::Text::CSSToken<wchar_t> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::Text::CSSToken<wchar_t> &);
	void Append(const Scaleform::GFx::Text::CSSToken<wchar_t> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef Scaleform::Render::Text::Style ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::Render::Text::Style * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::Render::Text::Style * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::Render::Text::Style * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::Render::Text::Style * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	Scaleform::Render::Text::Style * & At(unsigned long long);
	Scaleform::Render::Text::Style * & At(unsigned long long);
	Scaleform::Render::Text::Style * ValueAt(unsigned long long);
	Scaleform::Render::Text::Style * & operator[](unsigned long long);
	Scaleform::Render::Text::Style * & operator[](unsigned long long);
	Scaleform::Render::Text::Style * * GetDataPtr();
	Scaleform::Render::Text::Style * * GetDataPtr();
	void PushBack(Scaleform::Render::Text::Style * &);
	void PopBack(unsigned long long);
	Scaleform::Render::Text::Style * & PushDefault();
	Scaleform::Render::Text::Style * Pop();
	Scaleform::Render::Text::Style * & Front();
	Scaleform::Render::Text::Style * & Front();
	Scaleform::Render::Text::Style * & Back();
	Scaleform::Render::Text::Style * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, Scaleform::Render::Text::Style * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, Scaleform::Render::Text::Style * &);
	void Append(Scaleform::Render::Text::Style * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::Style *,Scaleform::AllocatorGH<Scaleform::Render::Text::Style *,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::Text::CSSToken<wchar_t> &);
	void Append(const Scaleform::GFx::Text::CSSToken<wchar_t> *, unsigned long long);
	~ArrayData<Scaleform::GFx::Text::CSSToken<wchar_t>,Scaleform::AllocatorGH<Scaleform::GFx::Text::CSSToken<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::MovieImpl::MDKillListEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::MovieImpl::MDKillListEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::MovieImpl::MDKillListEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::MovieImpl::MDKillListEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::MovieImpl::MDKillListEntry & At(unsigned long long);
	Scaleform::GFx::MovieImpl::MDKillListEntry & At(unsigned long long);
	Scaleform::GFx::MovieImpl::MDKillListEntry ValueAt(unsigned long long);
	const Scaleform::GFx::MovieImpl::MDKillListEntry & operator[](unsigned long long);
	Scaleform::GFx::MovieImpl::MDKillListEntry & operator[](unsigned long long);
	Scaleform::GFx::MovieImpl::MDKillListEntry * GetDataPtr();
	const Scaleform::GFx::MovieImpl::MDKillListEntry * GetDataPtr();
	void PushBack(const Scaleform::GFx::MovieImpl::MDKillListEntry &);
	void PopBack(unsigned long long);
	Scaleform::GFx::MovieImpl::MDKillListEntry & PushDefault();
	Scaleform::GFx::MovieImpl::MDKillListEntry Pop();
	const Scaleform::GFx::MovieImpl::MDKillListEntry & Front();
	Scaleform::GFx::MovieImpl::MDKillListEntry & Front();
	const Scaleform::GFx::MovieImpl::MDKillListEntry & Back();
	Scaleform::GFx::MovieImpl::MDKillListEntry & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::MovieImpl::MDKillListEntry &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::MovieImpl::MDKillListEntry &);
	void Append(const Scaleform::GFx::MovieImpl::MDKillListEntry *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::MovieDataDef> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::MovieDataDef> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::MovieDataDef> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::MovieDataDef> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::MovieDataDef> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDataDef> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDataDef> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::MovieDataDef> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDataDef> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDataDef> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::GFx::MovieDataDef> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::MovieDataDef> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDataDef> & PushDefault();
	Scaleform::Ptr<Scaleform::GFx::MovieDataDef> Pop();
	const Scaleform::Ptr<Scaleform::GFx::MovieDataDef> & Front();
	Scaleform::Ptr<Scaleform::GFx::MovieDataDef> & Front();
	const Scaleform::Ptr<Scaleform::GFx::MovieDataDef> & Back();
	Scaleform::Ptr<Scaleform::GFx::MovieDataDef> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::GFx::MovieDataDef> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::GFx::MovieDataDef> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::MovieDataDef> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::MovieImpl::MDKillListEntry &);
	void Append(const Scaleform::GFx::MovieImpl::MDKillListEntry *, unsigned long long);
	~ArrayData<Scaleform::GFx::MovieImpl::MDKillListEntry,Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::MovieDataDef> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::MovieDataDef> *, unsigned long long);
	~ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> &);
	void Append(const Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> *, unsigned long long);
	~ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> & At(unsigned long long);
	Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> & At(unsigned long long);
	Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> ValueAt(unsigned long long);
	const Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> & operator[](unsigned long long);
	Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> & operator[](unsigned long long);
	Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> * GetDataPtr();
	const Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> * GetDataPtr();
	void PushBack(const Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> &);
	void PopBack(unsigned long long);
	Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> & PushDefault();
	Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> Pop();
	const Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> & Front();
	Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> & Front();
	const Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> & Back();
	Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> &);
	void Append(const Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorGH<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone>,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::RangeData<Scaleform::GFx::TextField::CSSHolderBase::UrlZone> >
{
};
struct Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > :
	Scaleform::ArrayDataBase<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> >
{
	typedef Scaleform::GFx::ExecuteTag ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> >(const Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > &);
	ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> >(long);
	ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> >();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(Scaleform::GFx::ExecuteTag * &);
	void Append(Scaleform::GFx::ExecuteTag * *, unsigned long long);
	~ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> >();
};
struct Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::ExecuteTag *>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > >
{
	typedef Scaleform::GFx::ExecuteTag ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > >(Scaleform::MemoryHeap *, Scaleform::GFx::ExecuteTag * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > >(Scaleform::MemoryHeap *, Scaleform::GFx::ExecuteTag * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > >(Scaleform::GFx::ExecuteTag * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > >(Scaleform::GFx::ExecuteTag * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > >();
	Scaleform::ArrayConstPolicy<32,16,0> * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayConstPolicy<32,16,0> &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	Scaleform::GFx::ExecuteTag * & At(unsigned long long);
	Scaleform::GFx::ExecuteTag * & At(unsigned long long);
	Scaleform::GFx::ExecuteTag * ValueAt(unsigned long long);
	Scaleform::GFx::ExecuteTag * & operator[](unsigned long long);
	Scaleform::GFx::ExecuteTag * & operator[](unsigned long long);
	Scaleform::GFx::ExecuteTag * * GetDataPtr();
	Scaleform::GFx::ExecuteTag * * GetDataPtr();
	void PushBack(Scaleform::GFx::ExecuteTag * &);
	void PopBack(unsigned long long);
	Scaleform::GFx::ExecuteTag * & PushDefault();
	Scaleform::GFx::ExecuteTag * Pop();
	Scaleform::GFx::ExecuteTag * & Front();
	Scaleform::GFx::ExecuteTag * & Front();
	Scaleform::GFx::ExecuteTag * & Back();
	Scaleform::GFx::ExecuteTag * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, Scaleform::GFx::ExecuteTag * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, Scaleform::GFx::ExecuteTag * &);
	void Append(Scaleform::GFx::ExecuteTag * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ExecuteTag *,Scaleform::AllocatorGH<Scaleform::GFx::ExecuteTag *,2>,Scaleform::ArrayConstPolicy<32,16,0> > >();
};
struct Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::FontGlyphPacker::GlyphInfo>
{
};
struct Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::FontResource ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(Scaleform::GFx::FontResource * &);
	void Append(Scaleform::GFx::FontResource * *, unsigned long long);
	~ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::FontGlyphPacker::GlyphInfo &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::FontGlyphPacker::GlyphInfo &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::FontGlyphPacker::GlyphInfo &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::FontGlyphPacker::GlyphInfo &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::FontGlyphPacker::GlyphInfo & At(unsigned long long);
	Scaleform::GFx::FontGlyphPacker::GlyphInfo & At(unsigned long long);
	Scaleform::GFx::FontGlyphPacker::GlyphInfo ValueAt(unsigned long long);
	const Scaleform::GFx::FontGlyphPacker::GlyphInfo & operator[](unsigned long long);
	Scaleform::GFx::FontGlyphPacker::GlyphInfo & operator[](unsigned long long);
	Scaleform::GFx::FontGlyphPacker::GlyphInfo * GetDataPtr();
	const Scaleform::GFx::FontGlyphPacker::GlyphInfo * GetDataPtr();
	void PushBack(const Scaleform::GFx::FontGlyphPacker::GlyphInfo &);
	void PopBack(unsigned long long);
	Scaleform::GFx::FontGlyphPacker::GlyphInfo & PushDefault();
	Scaleform::GFx::FontGlyphPacker::GlyphInfo Pop();
	const Scaleform::GFx::FontGlyphPacker::GlyphInfo & Front();
	Scaleform::GFx::FontGlyphPacker::GlyphInfo & Front();
	const Scaleform::GFx::FontGlyphPacker::GlyphInfo & Back();
	Scaleform::GFx::FontGlyphPacker::GlyphInfo & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::FontGlyphPacker::GlyphInfo &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::FontGlyphPacker::GlyphInfo &);
	void Append(const Scaleform::GFx::FontGlyphPacker::GlyphInfo *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef Scaleform::GFx::FontResource ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::FontResource * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::FontResource * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::FontResource * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::FontResource * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	Scaleform::GFx::FontResource * & At(unsigned long long);
	Scaleform::GFx::FontResource * & At(unsigned long long);
	Scaleform::GFx::FontResource * ValueAt(unsigned long long);
	Scaleform::GFx::FontResource * & operator[](unsigned long long);
	Scaleform::GFx::FontResource * & operator[](unsigned long long);
	Scaleform::GFx::FontResource * * GetDataPtr();
	Scaleform::GFx::FontResource * * GetDataPtr();
	void PushBack(Scaleform::GFx::FontResource * &);
	void PopBack(unsigned long long);
	Scaleform::GFx::FontResource * & PushDefault();
	Scaleform::GFx::FontResource * Pop();
	Scaleform::GFx::FontResource * & Front();
	Scaleform::GFx::FontResource * & Front();
	Scaleform::GFx::FontResource * & Back();
	Scaleform::GFx::FontResource * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, Scaleform::GFx::FontResource * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, Scaleform::GFx::FontResource * &);
	void Append(Scaleform::GFx::FontResource * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontResource *,Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::FontGlyphPacker::GlyphInfo &);
	void Append(const Scaleform::GFx::FontGlyphPacker::GlyphInfo *, unsigned long long);
	~ArrayData<Scaleform::GFx::FontGlyphPacker::GlyphInfo,Scaleform::AllocatorGH<Scaleform::GFx::FontGlyphPacker::GlyphInfo,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDataDef>,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::GFx::MovieDataDef> >
{
};
struct Scaleform::AllocatorGH<void *,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<void *>
{
};
struct Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef void *ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(void * &);
	void Append(void * *, unsigned long long);
	~ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef void *ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, void * &, long);
	ArrayBase<Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, void * &);
	ArrayBase<Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> >(void * &, long);
	ArrayBase<Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> >(void * &);
	ArrayBase<Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	void * & At(unsigned long long);
	void * & At(unsigned long long);
	void * ValueAt(unsigned long long);
	void * & operator[](unsigned long long);
	void * & operator[](unsigned long long);
	void * * GetDataPtr();
	void * * GetDataPtr();
	void PushBack(void * &);
	void PopBack(unsigned long long);
	void * & PushDefault();
	void * Pop();
	void * & Front();
	void * & Front();
	void * & Back();
	void * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, void * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, void * &);
	void Append(void * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<void *,Scaleform::AllocatorGH<void *,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const long &, long);
	ArrayBase<Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const long &);
	ArrayBase<Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> >(const long &, long);
	ArrayBase<Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> >(const long &);
	ArrayBase<Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const long & At(unsigned long long);
	long & At(unsigned long long);
	long ValueAt(unsigned long long);
	const long & operator[](unsigned long long);
	long & operator[](unsigned long long);
	long * GetDataPtr();
	const long * GetDataPtr();
	void PushBack(const long &);
	void PopBack(unsigned long long);
	long & PushDefault();
	long Pop();
	const long & Front();
	long & Front();
	const long & Back();
	long & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const long &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const long &);
	void Append(const long *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::`anonymous-namespace'::Range &);
	void Append(const Scaleform::GFx::`anonymous-namespace'::Range *, unsigned long long);
	~ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::`anonymous namespace'::Range>
{
};
struct Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const long &);
	void Append(const long *, unsigned long long);
	~ArrayData<int,Scaleform::AllocatorGH<int,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::`anonymous-namespace'::Range &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::`anonymous-namespace'::Range &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::`anonymous-namespace'::Range &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::`anonymous-namespace'::Range &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::`anonymous-namespace'::Range & At(unsigned long long);
	Scaleform::GFx::`anonymous-namespace'::Range & At(unsigned long long);
	Scaleform::GFx::`anonymous-namespace'::Range ValueAt(unsigned long long);
	const Scaleform::GFx::`anonymous-namespace'::Range & operator[](unsigned long long);
	Scaleform::GFx::`anonymous-namespace'::Range & operator[](unsigned long long);
	Scaleform::GFx::`anonymous-namespace'::Range * GetDataPtr();
	const Scaleform::GFx::`anonymous-namespace'::Range * GetDataPtr();
	void PushBack(const Scaleform::GFx::`anonymous-namespace'::Range &);
	void PopBack(unsigned long long);
	Scaleform::GFx::`anonymous-namespace'::Range & PushDefault();
	Scaleform::GFx::`anonymous-namespace'::Range Pop();
	const Scaleform::GFx::`anonymous-namespace'::Range & Front();
	Scaleform::GFx::`anonymous-namespace'::Range & Front();
	const Scaleform::GFx::`anonymous-namespace'::Range & Back();
	Scaleform::GFx::`anonymous-namespace'::Range & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::`anonymous-namespace'::Range &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::`anonymous-namespace'::Range &);
	void Append(const Scaleform::GFx::`anonymous-namespace'::Range *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::`anonymous namespace'::Range,Scaleform::AllocatorGH<Scaleform::GFx::`anonymous namespace'::Range,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorGH<int,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<int>
{
};
struct Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> >
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::String &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::String &);
	ArrayBase<Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::String &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::String &);
	ArrayBase<Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::String & At(unsigned long long);
	Scaleform::String & At(unsigned long long);
	Scaleform::String ValueAt(unsigned long long);
	const Scaleform::String & operator[](unsigned long long);
	Scaleform::String & operator[](unsigned long long);
	Scaleform::String * GetDataPtr();
	const Scaleform::String * GetDataPtr();
	void PushBack(const Scaleform::String &);
	void PopBack(unsigned long long);
	Scaleform::String & PushDefault();
	Scaleform::String Pop();
	const Scaleform::String & Front();
	Scaleform::String & Front();
	const Scaleform::String & Back();
	Scaleform::String & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::String &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::String &);
	void Append(const Scaleform::String *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::String &);
	void Append(const Scaleform::String *, unsigned long long);
	~ArrayData<Scaleform::String,Scaleform::AllocatorGH<Scaleform::String,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::FillStyleType &);
	void Append(const Scaleform::Render::FillStyleType *, unsigned long long);
	~ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::StrokeStyleType>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::StrokeStyleType &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::StrokeStyleType &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::StrokeStyleType &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::StrokeStyleType &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::StrokeStyleType & At(unsigned long long);
	Scaleform::Render::StrokeStyleType & At(unsigned long long);
	Scaleform::Render::StrokeStyleType ValueAt(unsigned long long);
	const Scaleform::Render::StrokeStyleType & operator[](unsigned long long);
	Scaleform::Render::StrokeStyleType & operator[](unsigned long long);
	Scaleform::Render::StrokeStyleType * GetDataPtr();
	const Scaleform::Render::StrokeStyleType * GetDataPtr();
	void PushBack(const Scaleform::Render::StrokeStyleType &);
	void PopBack(unsigned long long);
	Scaleform::Render::StrokeStyleType & PushDefault();
	Scaleform::Render::StrokeStyleType Pop();
	const Scaleform::Render::StrokeStyleType & Front();
	Scaleform::Render::StrokeStyleType & Front();
	const Scaleform::Render::StrokeStyleType & Back();
	Scaleform::Render::StrokeStyleType & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::StrokeStyleType &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::StrokeStyleType &);
	void Append(const Scaleform::Render::StrokeStyleType *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::StrokeStyleType &);
	void Append(const Scaleform::Render::StrokeStyleType *, unsigned long long);
	~ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::FillStyleType>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::FillStyleType &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::FillStyleType &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::FillStyleType &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::FillStyleType &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::FillStyleType & At(unsigned long long);
	Scaleform::Render::FillStyleType & At(unsigned long long);
	Scaleform::Render::FillStyleType ValueAt(unsigned long long);
	const Scaleform::Render::FillStyleType & operator[](unsigned long long);
	Scaleform::Render::FillStyleType & operator[](unsigned long long);
	Scaleform::Render::FillStyleType * GetDataPtr();
	const Scaleform::Render::FillStyleType * GetDataPtr();
	void PushBack(const Scaleform::Render::FillStyleType &);
	void PopBack(unsigned long long);
	Scaleform::Render::FillStyleType & PushDefault();
	Scaleform::Render::FillStyleType Pop();
	const Scaleform::Render::FillStyleType & Front();
	Scaleform::Render::FillStyleType & Front();
	const Scaleform::Render::FillStyleType & Back();
	Scaleform::Render::FillStyleType & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::FillStyleType &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::FillStyleType &);
	void Append(const Scaleform::Render::FillStyleType *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorGH<Scaleform::GFx::FontResource *,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::FontResource *>
{
};
struct Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264> :
	Scaleform::AllocatorBaseGH<264>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> >
{
};
struct Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> *, unsigned long long);
	~ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & PushDefault();
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> Pop();
	const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & Front();
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & Front();
	const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & Back();
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & PushDefault();
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> Pop();
	const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & Front();
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & Front();
	const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & Back();
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> *, unsigned long long);
	~ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::GFx::InteractiveObject> >
{
};
struct Scaleform::AllocatorGH<Scaleform::GFx::MovieImpl::MDKillListEntry,327> :
	Scaleform::AllocatorBaseGH<327>,
	Scaleform::ConstructorMov<Scaleform::GFx::MovieImpl::MDKillListEntry>
{
};
struct Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::GFx::Resource> >
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::Resource> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::Resource> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::Resource> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::Resource> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::Resource> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::Resource> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::Resource> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::Resource> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::Resource> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::Resource> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::GFx::Resource> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::Resource> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::Resource> & PushDefault();
	Scaleform::Ptr<Scaleform::GFx::Resource> Pop();
	const Scaleform::Ptr<Scaleform::GFx::Resource> & Front();
	Scaleform::Ptr<Scaleform::GFx::Resource> & Front();
	const Scaleform::Ptr<Scaleform::GFx::Resource> & Back();
	Scaleform::Ptr<Scaleform::GFx::Resource> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::GFx::Resource> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::GFx::Resource> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::Resource> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::Resource> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::Resource> *, unsigned long long);
	~ArrayData<Scaleform::Ptr<Scaleform::GFx::Resource>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Resource>,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::StrokeStyleType &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::StrokeStyleType &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::StrokeStyleType &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::StrokeStyleType &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::StrokeStyleType & At(unsigned long long);
	Scaleform::Render::StrokeStyleType & At(unsigned long long);
	Scaleform::Render::StrokeStyleType ValueAt(unsigned long long);
	const Scaleform::Render::StrokeStyleType & operator[](unsigned long long);
	Scaleform::Render::StrokeStyleType & operator[](unsigned long long);
	Scaleform::Render::StrokeStyleType * GetDataPtr();
	const Scaleform::Render::StrokeStyleType * GetDataPtr();
	void PushBack(const Scaleform::Render::StrokeStyleType &);
	void PopBack(unsigned long long);
	Scaleform::Render::StrokeStyleType & PushDefault();
	Scaleform::Render::StrokeStyleType Pop();
	const Scaleform::Render::StrokeStyleType & Front();
	Scaleform::Render::StrokeStyleType & Front();
	const Scaleform::Render::StrokeStyleType & Back();
	Scaleform::Render::StrokeStyleType & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::StrokeStyleType &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::StrokeStyleType &);
	void Append(const Scaleform::Render::StrokeStyleType *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::StrokeStyleType &);
	void Append(const Scaleform::Render::StrokeStyleType *, unsigned long long);
	~ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::FillStyleType &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::FillStyleType &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::FillStyleType &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::FillStyleType &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::FillStyleType & At(unsigned long long);
	Scaleform::Render::FillStyleType & At(unsigned long long);
	Scaleform::Render::FillStyleType ValueAt(unsigned long long);
	const Scaleform::Render::FillStyleType & operator[](unsigned long long);
	Scaleform::Render::FillStyleType & operator[](unsigned long long);
	Scaleform::Render::FillStyleType * GetDataPtr();
	const Scaleform::Render::FillStyleType * GetDataPtr();
	void PushBack(const Scaleform::Render::FillStyleType &);
	void PopBack(unsigned long long);
	Scaleform::Render::FillStyleType & PushDefault();
	Scaleform::Render::FillStyleType Pop();
	const Scaleform::Render::FillStyleType & Front();
	Scaleform::Render::FillStyleType & Front();
	const Scaleform::Render::FillStyleType & Back();
	Scaleform::Render::FillStyleType & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::FillStyleType &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::FillStyleType &);
	void Append(const Scaleform::Render::FillStyleType *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::FillStyleType &);
	void Append(const Scaleform::Render::FillStyleType *, unsigned long long);
	~ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorGH<Scaleform::Render::StrokeStyleType,259> :
	Scaleform::AllocatorBaseGH<259>,
	Scaleform::ConstructorMov<Scaleform::Render::StrokeStyleType>
{
};
struct Scaleform::AllocatorGH<Scaleform::Render::FillStyleType,259> :
	Scaleform::AllocatorBaseGH<259>,
	Scaleform::ConstructorMov<Scaleform::Render::FillStyleType>
{
};
struct Scaleform::AllocatorGH<char,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<char>
{
};
struct Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::TextureGlyph>
{
};
struct Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::TextureGlyph &);
	void Append(const Scaleform::Render::TextureGlyph *, unsigned long long);
	~ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::TextureGlyph &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::TextureGlyph &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::TextureGlyph &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::TextureGlyph &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::TextureGlyph & At(unsigned long long);
	Scaleform::Render::TextureGlyph & At(unsigned long long);
	Scaleform::Render::TextureGlyph ValueAt(unsigned long long);
	const Scaleform::Render::TextureGlyph & operator[](unsigned long long);
	Scaleform::Render::TextureGlyph & operator[](unsigned long long);
	Scaleform::Render::TextureGlyph * GetDataPtr();
	const Scaleform::Render::TextureGlyph * GetDataPtr();
	void PushBack(const Scaleform::Render::TextureGlyph &);
	void PopBack(unsigned long long);
	Scaleform::Render::TextureGlyph & PushDefault();
	Scaleform::Render::TextureGlyph Pop();
	const Scaleform::Render::TextureGlyph & Front();
	Scaleform::Render::TextureGlyph & Front();
	const Scaleform::Render::TextureGlyph & Back();
	Scaleform::Render::TextureGlyph & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::TextureGlyph &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::TextureGlyph &);
	void Append(const Scaleform::Render::TextureGlyph *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorGH<Scaleform::Render::TextureGlyph,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::TaskThreadInPool *>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef Scaleform::GFx::Task ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::Task * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::Task * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::Task * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::Task * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	Scaleform::GFx::Task * & At(unsigned long long);
	Scaleform::GFx::Task * & At(unsigned long long);
	Scaleform::GFx::Task * ValueAt(unsigned long long);
	Scaleform::GFx::Task * & operator[](unsigned long long);
	Scaleform::GFx::Task * & operator[](unsigned long long);
	Scaleform::GFx::Task * * GetDataPtr();
	Scaleform::GFx::Task * * GetDataPtr();
	void PushBack(Scaleform::GFx::Task * &);
	void PopBack(unsigned long long);
	Scaleform::GFx::Task * & PushDefault();
	Scaleform::GFx::Task * Pop();
	Scaleform::GFx::Task * & Front();
	Scaleform::GFx::Task * & Front();
	Scaleform::GFx::Task * & Back();
	Scaleform::GFx::Task * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, Scaleform::GFx::Task * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, Scaleform::GFx::Task * &);
	void Append(Scaleform::GFx::Task * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::Task ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(Scaleform::GFx::Task * &);
	void Append(Scaleform::GFx::Task * *, unsigned long long);
	~ArrayData<Scaleform::GFx::Task *,Scaleform::AllocatorGH<Scaleform::GFx::Task *,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::TaskThreadInPool ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(Scaleform::GFx::TaskThreadInPool * &);
	void Append(Scaleform::GFx::TaskThreadInPool * *, unsigned long long);
	~ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::Task> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::Task> *, unsigned long long);
	~ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef Scaleform::GFx::TaskThreadInPool ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::TaskThreadInPool * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::TaskThreadInPool * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::TaskThreadInPool * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::TaskThreadInPool * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	Scaleform::GFx::TaskThreadInPool * & At(unsigned long long);
	Scaleform::GFx::TaskThreadInPool * & At(unsigned long long);
	Scaleform::GFx::TaskThreadInPool * ValueAt(unsigned long long);
	Scaleform::GFx::TaskThreadInPool * & operator[](unsigned long long);
	Scaleform::GFx::TaskThreadInPool * & operator[](unsigned long long);
	Scaleform::GFx::TaskThreadInPool * * GetDataPtr();
	Scaleform::GFx::TaskThreadInPool * * GetDataPtr();
	void PushBack(Scaleform::GFx::TaskThreadInPool * &);
	void PopBack(unsigned long long);
	Scaleform::GFx::TaskThreadInPool * & PushDefault();
	Scaleform::GFx::TaskThreadInPool * Pop();
	Scaleform::GFx::TaskThreadInPool * & Front();
	Scaleform::GFx::TaskThreadInPool * & Front();
	Scaleform::GFx::TaskThreadInPool * & Back();
	Scaleform::GFx::TaskThreadInPool * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, Scaleform::GFx::TaskThreadInPool * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, Scaleform::GFx::TaskThreadInPool * &);
	void Append(Scaleform::GFx::TaskThreadInPool * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TaskThreadInPool *,Scaleform::AllocatorGH<Scaleform::GFx::TaskThreadInPool *,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::GFx::Task> >
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::Task> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::Task> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::Task> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::Task> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::Task> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::Task> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::Task> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::Task> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::Task> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::Task> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::GFx::Task> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::Task> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::Task> & PushDefault();
	Scaleform::Ptr<Scaleform::GFx::Task> Pop();
	const Scaleform::Ptr<Scaleform::GFx::Task> & Front();
	Scaleform::Ptr<Scaleform::GFx::Task> & Front();
	const Scaleform::Ptr<Scaleform::GFx::Task> & Back();
	Scaleform::Ptr<Scaleform::GFx::Task> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::GFx::Task> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::GFx::Task> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::Task> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::Task>,Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::GFx::Task>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorGH<Scaleform::GFx::Task *,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::Task *>
{
};
struct Scaleform::AllocatorGH<Scaleform::GFx::TextKeyMap::KeyMapEntry,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::TextKeyMap::KeyMapEntry>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Text::HighlightDesc &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Text::HighlightDesc &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Text::HighlightDesc &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Text::HighlightDesc &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::Text::HighlightDesc & At(unsigned long long);
	Scaleform::Render::Text::HighlightDesc & At(unsigned long long);
	Scaleform::Render::Text::HighlightDesc ValueAt(unsigned long long);
	const Scaleform::Render::Text::HighlightDesc & operator[](unsigned long long);
	Scaleform::Render::Text::HighlightDesc & operator[](unsigned long long);
	Scaleform::Render::Text::HighlightDesc * GetDataPtr();
	const Scaleform::Render::Text::HighlightDesc * GetDataPtr();
	void PushBack(const Scaleform::Render::Text::HighlightDesc &);
	void PopBack(unsigned long long);
	Scaleform::Render::Text::HighlightDesc & PushDefault();
	Scaleform::Render::Text::HighlightDesc Pop();
	const Scaleform::Render::Text::HighlightDesc & Front();
	Scaleform::Render::Text::HighlightDesc & Front();
	const Scaleform::Render::Text::HighlightDesc & Back();
	Scaleform::Render::Text::HighlightDesc & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::Text::HighlightDesc &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::Text::HighlightDesc &);
	void Append(const Scaleform::Render::Text::HighlightDesc *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::Text::HighlightDesc &);
	void Append(const Scaleform::Render::Text::HighlightDesc *, unsigned long long);
	~ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorGH<Scaleform::Render::Text::HighlightDesc,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::Text::HighlightDesc>
{
};
struct Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const tagKERNINGPAIR &);
	void Append(const tagKERNINGPAIR *, unsigned long long);
	~ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorGH<Scaleform::Render::Font::NativeHintingType,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::Font::NativeHintingType>
{
};
struct Scaleform::AllocatorGH<tagKERNINGPAIR,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<tagKERNINGPAIR>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const tagKERNINGPAIR &, long);
	ArrayBase<Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const tagKERNINGPAIR &);
	ArrayBase<Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> >(const tagKERNINGPAIR &, long);
	ArrayBase<Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> >(const tagKERNINGPAIR &);
	ArrayBase<Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const tagKERNINGPAIR & At(unsigned long long);
	tagKERNINGPAIR & At(unsigned long long);
	tagKERNINGPAIR ValueAt(unsigned long long);
	const tagKERNINGPAIR & operator[](unsigned long long);
	tagKERNINGPAIR & operator[](unsigned long long);
	tagKERNINGPAIR * GetDataPtr();
	const tagKERNINGPAIR * GetDataPtr();
	void PushBack(const tagKERNINGPAIR &);
	void PopBack(unsigned long long);
	tagKERNINGPAIR & PushDefault();
	tagKERNINGPAIR Pop();
	const tagKERNINGPAIR & Front();
	tagKERNINGPAIR & Front();
	const tagKERNINGPAIR & Back();
	tagKERNINGPAIR & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const tagKERNINGPAIR &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const tagKERNINGPAIR &);
	void Append(const tagKERNINGPAIR *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<tagKERNINGPAIR,Scaleform::AllocatorGH<tagKERNINGPAIR,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Point<long> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Point<long> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Point<long> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Point<long> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::Point<long> & At(unsigned long long);
	Scaleform::Render::Point<long> & At(unsigned long long);
	Scaleform::Render::Point<long> ValueAt(unsigned long long);
	const Scaleform::Render::Point<long> & operator[](unsigned long long);
	Scaleform::Render::Point<long> & operator[](unsigned long long);
	Scaleform::Render::Point<long> * GetDataPtr();
	const Scaleform::Render::Point<long> * GetDataPtr();
	void PushBack(const Scaleform::Render::Point<long> &);
	void PopBack(unsigned long long);
	Scaleform::Render::Point<long> & PushDefault();
	Scaleform::Render::Point<long> Pop();
	const Scaleform::Render::Point<long> & Front();
	Scaleform::Render::Point<long> & Front();
	const Scaleform::Render::Point<long> & Back();
	Scaleform::Render::Point<long> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::Point<long> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::Point<long> &);
	void Append(const Scaleform::Render::Point<long> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::Point<long> &);
	void Append(const Scaleform::Render::Point<long> *, unsigned long long);
	~ArrayData<Scaleform::Render::Point<long>,Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorGH<Scaleform::Render::Point<long>,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::Point<long> >
{
};
struct Scaleform::AllocatorGH<Scaleform::Ptr<Scaleform::Render::Filter>,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::Render::Filter> >
{
};
struct Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> >
{
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> * GetDataPtr();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & PushDefault();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> Pop();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & Front();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & Front();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & Back();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > * GetDataPtr();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > & PushDefault();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > Pop();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > & Front();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > & Front();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > & Back();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Value &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Value &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Value &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Value &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::Value & At(unsigned long long);
	Scaleform::GFx::AS3::Value & At(unsigned long long);
	Scaleform::GFx::AS3::Value ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::Value & operator[](unsigned long long);
	Scaleform::GFx::AS3::Value & operator[](unsigned long long);
	Scaleform::GFx::AS3::Value * GetDataPtr();
	const Scaleform::GFx::AS3::Value * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::Value &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::Value & PushDefault();
	Scaleform::GFx::AS3::Value Pop();
	const Scaleform::GFx::AS3::Value & Front();
	Scaleform::GFx::AS3::Value & Front();
	const Scaleform::GFx::AS3::Value & Back();
	Scaleform::GFx::AS3::Value & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::Value &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::Value &);
	void Append(const Scaleform::GFx::AS3::Value *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > >
{
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const > *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,Scaleform::AllocatorGH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace const >,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::Value &);
	void Append(const Scaleform::GFx::AS3::Value *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorGH<Scaleform::GFx::AS3::Value,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::Value>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned char &, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned char &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(const unsigned char &, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(const unsigned char &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const unsigned char & At(unsigned long long);
	unsigned char & At(unsigned long long);
	unsigned char ValueAt(unsigned long long);
	const unsigned char & operator[](unsigned long long);
	unsigned char & operator[](unsigned long long);
	unsigned char * GetDataPtr();
	const unsigned char * GetDataPtr();
	void PushBack(const unsigned char &);
	void PopBack(unsigned long long);
	unsigned char & PushDefault();
	unsigned char Pop();
	const unsigned char & Front();
	unsigned char & Front();
	const unsigned char & Back();
	unsigned char & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const unsigned char &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const unsigned char &);
	void Append(const unsigned char *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const unsigned char &);
	void Append(const unsigned char *, unsigned long long);
	~ArrayData<unsigned char,Scaleform::AllocatorGH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorGH_POD<unsigned char,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorPOD<unsigned char>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::MsgFormat::fmt_record &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::MsgFormat::fmt_record &);
	ArrayBase<Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::MsgFormat::fmt_record &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::MsgFormat::fmt_record &);
	ArrayBase<Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::MsgFormat::fmt_record & At(unsigned long long);
	Scaleform::MsgFormat::fmt_record & At(unsigned long long);
	Scaleform::MsgFormat::fmt_record ValueAt(unsigned long long);
	const Scaleform::MsgFormat::fmt_record & operator[](unsigned long long);
	Scaleform::MsgFormat::fmt_record & operator[](unsigned long long);
	Scaleform::MsgFormat::fmt_record * GetDataPtr();
	const Scaleform::MsgFormat::fmt_record * GetDataPtr();
	void PushBack(const Scaleform::MsgFormat::fmt_record &);
	void PopBack(unsigned long long);
	Scaleform::MsgFormat::fmt_record & PushDefault();
	Scaleform::MsgFormat::fmt_record Pop();
	const Scaleform::MsgFormat::fmt_record & Front();
	Scaleform::MsgFormat::fmt_record & Front();
	const Scaleform::MsgFormat::fmt_record & Back();
	Scaleform::MsgFormat::fmt_record & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::MsgFormat::fmt_record &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::MsgFormat::fmt_record &);
	void Append(const Scaleform::MsgFormat::fmt_record *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::MsgFormat::fmt_record &);
	void Append(const Scaleform::MsgFormat::fmt_record *, unsigned long long);
	~ArrayData<Scaleform::MsgFormat::fmt_record,Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorGH_POD<Scaleform::MsgFormat::fmt_record,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorPOD<Scaleform::MsgFormat::fmt_record>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::MemberValue &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::MemberValue &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::MemberValue &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::MemberValue &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::MemberValue & At(unsigned long long);
	Scaleform::GFx::MemberValue & At(unsigned long long);
	Scaleform::GFx::MemberValue ValueAt(unsigned long long);
	const Scaleform::GFx::MemberValue & operator[](unsigned long long);
	Scaleform::GFx::MemberValue & operator[](unsigned long long);
	Scaleform::GFx::MemberValue * GetDataPtr();
	const Scaleform::GFx::MemberValue * GetDataPtr();
	void PushBack(const Scaleform::GFx::MemberValue &);
	void PopBack(unsigned long long);
	Scaleform::GFx::MemberValue & PushDefault();
	Scaleform::GFx::MemberValue Pop();
	const Scaleform::GFx::MemberValue & Front();
	Scaleform::GFx::MemberValue & Front();
	const Scaleform::GFx::MemberValue & Back();
	Scaleform::GFx::MemberValue & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::MemberValue &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::MemberValue &);
	void Append(const Scaleform::GFx::MemberValue *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::MemberValue &);
	void Append(const Scaleform::GFx::MemberValue *, unsigned long long);
	~ArrayData<Scaleform::GFx::MemberValue,Scaleform::AllocatorGH_CPP<Scaleform::GFx::MemberValue,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorCPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr & At(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr & At(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr & operator[](unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr & operator[](unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr * GetDataPtr();
	const Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr & PushDefault();
	Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr Pop();
	const Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr & Front();
	Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr & Front();
	const Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr & Back();
	Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr &);
	void Append(const Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr &);
	void Append(const Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,Scaleform::AllocatorGH_CPP<Scaleform::GFx::AS3::Instances::fl_display::MovieClip::FrameScript::Descr,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::Value &);
	void Append(const Scaleform::GFx::Value *, unsigned long long);
	~ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2> :
	Scaleform::AllocatorBaseGH<2>,
	Scaleform::ConstructorCPP<Scaleform::GFx::Value>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::Value &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::Value &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::Value &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::Value &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::Value & At(unsigned long long);
	Scaleform::GFx::Value & At(unsigned long long);
	Scaleform::GFx::Value ValueAt(unsigned long long);
	const Scaleform::GFx::Value & operator[](unsigned long long);
	Scaleform::GFx::Value & operator[](unsigned long long);
	Scaleform::GFx::Value * GetDataPtr();
	const Scaleform::GFx::Value * GetDataPtr();
	void PushBack(const Scaleform::GFx::Value &);
	void PopBack(unsigned long long);
	Scaleform::GFx::Value & PushDefault();
	Scaleform::GFx::Value Pop();
	const Scaleform::GFx::Value & Front();
	Scaleform::GFx::Value & Front();
	const Scaleform::GFx::Value & Back();
	Scaleform::GFx::Value & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::Value &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::Value &);
	void Append(const Scaleform::GFx::Value *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Value,Scaleform::AllocatorGH_CPP<Scaleform::GFx::Value,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > :
	Scaleform::ArrayDataBase<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> >
{
	typedef const Scaleform::Render::UserDataState::Data ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > &);
	ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> >(long);
	ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::UserDataState::Data * &);
	void Append(const Scaleform::Render::UserDataState::Data * *, unsigned long long);
	~ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
};
struct Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> &);
	void Append(const Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> *, unsigned long long);
	~ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > :
	Scaleform::ArrayDataBase<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > &);
	ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >(long);
	ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::Matrix3x4<float> &);
	void Append(const Scaleform::Render::Matrix3x4<float> *, unsigned long long);
	~ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > >
{
	typedef unsigned long long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > >(Scaleform::MemoryHeap *, const unsigned long long &, long);
	ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > >(Scaleform::MemoryHeap *, const unsigned long long &);
	ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > >(const unsigned long long &, long);
	ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > >(const unsigned long long &);
	ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > >(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > > &);
	ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > >(long);
	ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > >();
	Scaleform::ArrayConstPolicy<4,4,0> * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayConstPolicy<4,4,0> &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const unsigned long long & At(unsigned long long);
	unsigned long long & At(unsigned long long);
	unsigned long long ValueAt(unsigned long long);
	const unsigned long long & operator[](unsigned long long);
	unsigned long long & operator[](unsigned long long);
	unsigned long long * GetDataPtr();
	const unsigned long long * GetDataPtr();
	void PushBack(const unsigned long long &);
	void PopBack(unsigned long long);
	unsigned long long & PushDefault();
	unsigned long long Pop();
	const unsigned long long & Front();
	unsigned long long & Front();
	const unsigned long long & Back();
	unsigned long long & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const unsigned long long &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const unsigned long long &);
	void Append(const unsigned long long *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> & PushDefault();
	Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> Pop();
	const Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> & Front();
	Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> & Front();
	const Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> & Back();
	Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> &);
	void Append(const Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, const Scaleform::Render::HAL::BlendModeStackEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, const Scaleform::Render::HAL::BlendModeStackEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::Render::HAL::BlendModeStackEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::Render::HAL::BlendModeStackEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >();
	Scaleform::ArrayConstPolicy<0,8,1> * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayConstPolicy<0,8,1> &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::HAL::BlendModeStackEntry & At(unsigned long long);
	Scaleform::Render::HAL::BlendModeStackEntry & At(unsigned long long);
	Scaleform::Render::HAL::BlendModeStackEntry ValueAt(unsigned long long);
	const Scaleform::Render::HAL::BlendModeStackEntry & operator[](unsigned long long);
	Scaleform::Render::HAL::BlendModeStackEntry & operator[](unsigned long long);
	Scaleform::Render::HAL::BlendModeStackEntry * GetDataPtr();
	const Scaleform::Render::HAL::BlendModeStackEntry * GetDataPtr();
	void PushBack(const Scaleform::Render::HAL::BlendModeStackEntry &);
	void PopBack(unsigned long long);
	Scaleform::Render::HAL::BlendModeStackEntry & PushDefault();
	Scaleform::Render::HAL::BlendModeStackEntry Pop();
	const Scaleform::Render::HAL::BlendModeStackEntry & Front();
	Scaleform::Render::HAL::BlendModeStackEntry & Front();
	const Scaleform::Render::HAL::BlendModeStackEntry & Back();
	Scaleform::Render::HAL::BlendModeStackEntry & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::HAL::BlendModeStackEntry &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::HAL::BlendModeStackEntry &);
	void Append(const Scaleform::Render::HAL::BlendModeStackEntry *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >();
};
struct Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const char &);
	void Append(const char *, unsigned long long);
	~ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > :
	Scaleform::ArrayDataBase<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > &);
	ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >(long);
	ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::HAL::RenderTargetEntry &);
	void Append(const Scaleform::Render::HAL::RenderTargetEntry *, unsigned long long);
	~ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, const Scaleform::Render::HAL::RenderTargetEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, const Scaleform::Render::HAL::RenderTargetEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::Render::HAL::RenderTargetEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::Render::HAL::RenderTargetEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >();
	Scaleform::ArrayConstPolicy<0,8,1> * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayConstPolicy<0,8,1> &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::HAL::RenderTargetEntry & At(unsigned long long);
	Scaleform::Render::HAL::RenderTargetEntry & At(unsigned long long);
	Scaleform::Render::HAL::RenderTargetEntry ValueAt(unsigned long long);
	const Scaleform::Render::HAL::RenderTargetEntry & operator[](unsigned long long);
	Scaleform::Render::HAL::RenderTargetEntry & operator[](unsigned long long);
	Scaleform::Render::HAL::RenderTargetEntry * GetDataPtr();
	const Scaleform::Render::HAL::RenderTargetEntry * GetDataPtr();
	void PushBack(const Scaleform::Render::HAL::RenderTargetEntry &);
	void PopBack(unsigned long long);
	Scaleform::Render::HAL::RenderTargetEntry & PushDefault();
	Scaleform::Render::HAL::RenderTargetEntry Pop();
	const Scaleform::Render::HAL::RenderTargetEntry & Front();
	Scaleform::Render::HAL::RenderTargetEntry & Front();
	const Scaleform::Render::HAL::RenderTargetEntry & Back();
	Scaleform::Render::HAL::RenderTargetEntry & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::HAL::RenderTargetEntry &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::HAL::RenderTargetEntry &);
	void Append(const Scaleform::Render::HAL::RenderTargetEntry *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::RenderTargetEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >();
};
struct Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::ExternalFontWinAPI::GlyphType &);
	void Append(const Scaleform::Render::ExternalFontWinAPI::GlyphType *, unsigned long long);
	~ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > :
	Scaleform::ArrayDataBase<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> >
{
	typedef unsigned long long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> >(const Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> > &);
	ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> >(long);
	ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> >();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const unsigned long long &);
	void Append(const unsigned long long *, unsigned long long);
	~ArrayData<unsigned __int64,Scaleform::AllocatorLH<unsigned __int64,72>,Scaleform::ArrayConstPolicy<4,4,0> >();
};
struct Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > :
	Scaleform::ArrayDataBase<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > &);
	ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >(long);
	ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::HAL::BlendModeStackEntry &);
	void Append(const Scaleform::Render::HAL::BlendModeStackEntry *, unsigned long long);
	~ArrayData<Scaleform::Render::HAL::BlendModeStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef Scaleform::Render::TreeRoot ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::Render::TreeRoot * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::Render::TreeRoot * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::Render::TreeRoot * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::Render::TreeRoot * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	Scaleform::Render::TreeRoot * & At(unsigned long long);
	Scaleform::Render::TreeRoot * & At(unsigned long long);
	Scaleform::Render::TreeRoot * ValueAt(unsigned long long);
	Scaleform::Render::TreeRoot * & operator[](unsigned long long);
	Scaleform::Render::TreeRoot * & operator[](unsigned long long);
	Scaleform::Render::TreeRoot * * GetDataPtr();
	Scaleform::Render::TreeRoot * * GetDataPtr();
	void PushBack(Scaleform::Render::TreeRoot * &);
	void PopBack(unsigned long long);
	Scaleform::Render::TreeRoot * & PushDefault();
	Scaleform::Render::TreeRoot * Pop();
	Scaleform::Render::TreeRoot * & Front();
	Scaleform::Render::TreeRoot * & Front();
	Scaleform::Render::TreeRoot * & Back();
	Scaleform::Render::TreeRoot * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, Scaleform::Render::TreeRoot * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, Scaleform::Render::TreeRoot * &);
	void Append(Scaleform::Render::TreeRoot * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, const Scaleform::Render::Matrix3x4<float> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, const Scaleform::Render::Matrix3x4<float> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::Render::Matrix3x4<float> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::Render::Matrix3x4<float> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >();
	Scaleform::ArrayConstPolicy<0,8,1> * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayConstPolicy<0,8,1> &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::Matrix3x4<float> & At(unsigned long long);
	Scaleform::Render::Matrix3x4<float> & At(unsigned long long);
	Scaleform::Render::Matrix3x4<float> ValueAt(unsigned long long);
	const Scaleform::Render::Matrix3x4<float> & operator[](unsigned long long);
	Scaleform::Render::Matrix3x4<float> & operator[](unsigned long long);
	Scaleform::Render::Matrix3x4<float> * GetDataPtr();
	const Scaleform::Render::Matrix3x4<float> * GetDataPtr();
	void PushBack(const Scaleform::Render::Matrix3x4<float> &);
	void PopBack(unsigned long long);
	Scaleform::Render::Matrix3x4<float> & PushDefault();
	Scaleform::Render::Matrix3x4<float> Pop();
	const Scaleform::Render::Matrix3x4<float> & Front();
	Scaleform::Render::Matrix3x4<float> & Front();
	const Scaleform::Render::Matrix3x4<float> & Back();
	Scaleform::Render::Matrix3x4<float> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::Matrix3x4<float> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::Matrix3x4<float> &);
	void Append(const Scaleform::Render::Matrix3x4<float> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix3x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >();
};
struct Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::FillStyleType>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const char &, long);
	ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const char &);
	ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> >(const char &, long);
	ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> >(const char &);
	ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const char & At(unsigned long long);
	char & At(unsigned long long);
	char ValueAt(unsigned long long);
	const char & operator[](unsigned long long);
	char & operator[](unsigned long long);
	char * GetDataPtr();
	const char * GetDataPtr();
	void PushBack(const char &);
	void PopBack(unsigned long long);
	char & PushDefault();
	char Pop();
	const char & Front();
	char & Front();
	const char & Back();
	char & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const char &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const char &);
	void Append(const char *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<char,Scaleform::AllocatorLH<char,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, const Scaleform::Render::HAL::MaskStackEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, const Scaleform::Render::HAL::MaskStackEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::Render::HAL::MaskStackEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::Render::HAL::MaskStackEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >();
	Scaleform::ArrayConstPolicy<0,8,1> * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayConstPolicy<0,8,1> &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::HAL::MaskStackEntry & At(unsigned long long);
	Scaleform::Render::HAL::MaskStackEntry & At(unsigned long long);
	Scaleform::Render::HAL::MaskStackEntry ValueAt(unsigned long long);
	const Scaleform::Render::HAL::MaskStackEntry & operator[](unsigned long long);
	Scaleform::Render::HAL::MaskStackEntry & operator[](unsigned long long);
	Scaleform::Render::HAL::MaskStackEntry * GetDataPtr();
	const Scaleform::Render::HAL::MaskStackEntry * GetDataPtr();
	void PushBack(const Scaleform::Render::HAL::MaskStackEntry &);
	void PopBack(unsigned long long);
	Scaleform::Render::HAL::MaskStackEntry & PushDefault();
	Scaleform::Render::HAL::MaskStackEntry Pop();
	const Scaleform::Render::HAL::MaskStackEntry & Front();
	Scaleform::Render::HAL::MaskStackEntry & Front();
	const Scaleform::Render::HAL::MaskStackEntry & Back();
	Scaleform::Render::HAL::MaskStackEntry & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::HAL::MaskStackEntry &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::HAL::MaskStackEntry &);
	void Append(const Scaleform::Render::HAL::MaskStackEntry *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >();
};
struct Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::Text::StyledText::ParagraphPtrWrapper &);
	void Append(const Scaleform::Render::Text::StyledText::ParagraphPtrWrapper *, unsigned long long);
	~ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef Scaleform::Render::TextureFormat ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::Render::TextureFormat * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::Render::TextureFormat * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::Render::TextureFormat * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::Render::TextureFormat * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	Scaleform::Render::TextureFormat * & At(unsigned long long);
	Scaleform::Render::TextureFormat * & At(unsigned long long);
	Scaleform::Render::TextureFormat * ValueAt(unsigned long long);
	Scaleform::Render::TextureFormat * & operator[](unsigned long long);
	Scaleform::Render::TextureFormat * & operator[](unsigned long long);
	Scaleform::Render::TextureFormat * * GetDataPtr();
	Scaleform::Render::TextureFormat * * GetDataPtr();
	void PushBack(Scaleform::Render::TextureFormat * &);
	void PopBack(unsigned long long);
	Scaleform::Render::TextureFormat * & PushDefault();
	Scaleform::Render::TextureFormat * Pop();
	Scaleform::Render::TextureFormat * & Front();
	Scaleform::Render::TextureFormat * & Front();
	Scaleform::Render::TextureFormat * & Back();
	Scaleform::Render::TextureFormat * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, Scaleform::Render::TextureFormat * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, Scaleform::Render::TextureFormat * &);
	void Append(Scaleform::Render::TextureFormat * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > >
{
	typedef const Scaleform::Render::UserDataState::Data ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, const Scaleform::Render::UserDataState::Data * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, const Scaleform::Render::UserDataState::Data * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::Render::UserDataState::Data * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::Render::UserDataState::Data * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > >();
	Scaleform::ArrayConstPolicy<0,8,1> * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayConstPolicy<0,8,1> &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::UserDataState::Data * & At(unsigned long long);
	const Scaleform::Render::UserDataState::Data * & At(unsigned long long);
	const Scaleform::Render::UserDataState::Data * ValueAt(unsigned long long);
	const Scaleform::Render::UserDataState::Data * & operator[](unsigned long long);
	const Scaleform::Render::UserDataState::Data * & operator[](unsigned long long);
	const Scaleform::Render::UserDataState::Data * * GetDataPtr();
	const Scaleform::Render::UserDataState::Data * * GetDataPtr();
	void PushBack(const Scaleform::Render::UserDataState::Data * &);
	void PopBack(unsigned long long);
	const Scaleform::Render::UserDataState::Data * & PushDefault();
	const Scaleform::Render::UserDataState::Data * Pop();
	const Scaleform::Render::UserDataState::Data * & Front();
	const Scaleform::Render::UserDataState::Data * & Front();
	const Scaleform::Render::UserDataState::Data * & Back();
	const Scaleform::Render::UserDataState::Data * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::UserDataState::Data * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::UserDataState::Data * &);
	void Append(const Scaleform::Render::UserDataState::Data * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::UserDataState::Data const *,Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2>,Scaleform::ArrayConstPolicy<0,8,1> > >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::Render::Image> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::Render::Image> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::Render::Image> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::Render::Image> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::Render::Image> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::Render::Image> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::Render::Image> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::Render::Image> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::Render::Image> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::Render::Image> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::Render::Image> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::Render::Image> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::Render::Image> & PushDefault();
	Scaleform::Ptr<Scaleform::Render::Image> Pop();
	const Scaleform::Ptr<Scaleform::Render::Image> & Front();
	Scaleform::Ptr<Scaleform::Render::Image> & Front();
	const Scaleform::Ptr<Scaleform::Render::Image> & Back();
	Scaleform::Ptr<Scaleform::Render::Image> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::Render::Image> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::Render::Image> &);
	void Append(const Scaleform::Ptr<Scaleform::Render::Image> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry &);
	void Append(const Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry *, unsigned long long);
	~ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned char &, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned char &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(const unsigned char &, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(const unsigned char &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const unsigned char & At(unsigned long long);
	unsigned char & At(unsigned long long);
	unsigned char ValueAt(unsigned long long);
	const unsigned char & operator[](unsigned long long);
	unsigned char & operator[](unsigned long long);
	unsigned char * GetDataPtr();
	const unsigned char * GetDataPtr();
	void PushBack(const unsigned char &);
	void PopBack(unsigned long long);
	unsigned char & PushDefault();
	unsigned char Pop();
	const unsigned char & Front();
	unsigned char & Front();
	const unsigned char & Back();
	unsigned char & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const unsigned char &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const unsigned char &);
	void Append(const unsigned char *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const unsigned char &);
	void Append(const unsigned char *, unsigned long long);
	~ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > :
	Scaleform::ArrayDataBase<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > &);
	ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >(long);
	ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::HAL::MaskStackEntry &);
	void Append(const Scaleform::Render::HAL::MaskStackEntry *, unsigned long long);
	~ArrayData<Scaleform::Render::HAL::MaskStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, const Scaleform::Render::HAL::FilterStackEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, const Scaleform::Render::HAL::FilterStackEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::Render::HAL::FilterStackEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::Render::HAL::FilterStackEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >();
	Scaleform::ArrayConstPolicy<0,8,1> * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayConstPolicy<0,8,1> &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::HAL::FilterStackEntry & At(unsigned long long);
	Scaleform::Render::HAL::FilterStackEntry & At(unsigned long long);
	Scaleform::Render::HAL::FilterStackEntry ValueAt(unsigned long long);
	const Scaleform::Render::HAL::FilterStackEntry & operator[](unsigned long long);
	Scaleform::Render::HAL::FilterStackEntry & operator[](unsigned long long);
	Scaleform::Render::HAL::FilterStackEntry * GetDataPtr();
	const Scaleform::Render::HAL::FilterStackEntry * GetDataPtr();
	void PushBack(const Scaleform::Render::HAL::FilterStackEntry &);
	void PopBack(unsigned long long);
	Scaleform::Render::HAL::FilterStackEntry & PushDefault();
	Scaleform::Render::HAL::FilterStackEntry Pop();
	const Scaleform::Render::HAL::FilterStackEntry & Front();
	Scaleform::Render::HAL::FilterStackEntry & Front();
	const Scaleform::Render::HAL::FilterStackEntry & Back();
	Scaleform::Render::HAL::FilterStackEntry & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::HAL::FilterStackEntry &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::HAL::FilterStackEntry &);
	void Append(const Scaleform::Render::HAL::FilterStackEntry *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > >();
};
struct Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::FillStyleType &);
	void Append(const Scaleform::Render::FillStyleType *, unsigned long long);
	~ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::StrokeStyleType>
{
};
struct Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef wchar_t ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const wchar_t &);
	void Append(const wchar_t *, unsigned long long);
	~ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::ExternalFontWinAPI::GlyphType &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::ExternalFontWinAPI::GlyphType &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::ExternalFontWinAPI::GlyphType &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::ExternalFontWinAPI::GlyphType &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::ExternalFontWinAPI::GlyphType & At(unsigned long long);
	Scaleform::Render::ExternalFontWinAPI::GlyphType & At(unsigned long long);
	Scaleform::Render::ExternalFontWinAPI::GlyphType ValueAt(unsigned long long);
	const Scaleform::Render::ExternalFontWinAPI::GlyphType & operator[](unsigned long long);
	Scaleform::Render::ExternalFontWinAPI::GlyphType & operator[](unsigned long long);
	Scaleform::Render::ExternalFontWinAPI::GlyphType * GetDataPtr();
	const Scaleform::Render::ExternalFontWinAPI::GlyphType * GetDataPtr();
	void PushBack(const Scaleform::Render::ExternalFontWinAPI::GlyphType &);
	void PopBack(unsigned long long);
	Scaleform::Render::ExternalFontWinAPI::GlyphType & PushDefault();
	Scaleform::Render::ExternalFontWinAPI::GlyphType Pop();
	const Scaleform::Render::ExternalFontWinAPI::GlyphType & Front();
	Scaleform::Render::ExternalFontWinAPI::GlyphType & Front();
	const Scaleform::Render::ExternalFontWinAPI::GlyphType & Back();
	Scaleform::Render::ExternalFontWinAPI::GlyphType & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::ExternalFontWinAPI::GlyphType &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::ExternalFontWinAPI::GlyphType &);
	void Append(const Scaleform::Render::ExternalFontWinAPI::GlyphType *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::ExternalFontWinAPI::GlyphType,Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::Matrix2x4<float> &);
	void Append(const Scaleform::Render::Matrix2x4<float> *, unsigned long long);
	~ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > :
	Scaleform::ArrayDataBase<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> > &);
	ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >(long);
	ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::HAL::FilterStackEntry &);
	void Append(const Scaleform::Render::HAL::FilterStackEntry *, unsigned long long);
	~ArrayData<Scaleform::Render::HAL::FilterStackEntry,Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
};
struct Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > &);
	void Append(const Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > *, unsigned long long);
	~ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::Render::Text::LineBuffer::Line ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(Scaleform::Render::Text::LineBuffer::Line * &);
	void Append(Scaleform::Render::Text::LineBuffer::Line * *, unsigned long long);
	~ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef wchar_t ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const wchar_t &, long);
	ArrayBase<Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const wchar_t &);
	ArrayBase<Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> >(const wchar_t &, long);
	ArrayBase<Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> >(const wchar_t &);
	ArrayBase<Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const wchar_t & At(unsigned long long);
	wchar_t & At(unsigned long long);
	wchar_t ValueAt(unsigned long long);
	const wchar_t & operator[](unsigned long long);
	wchar_t & operator[](unsigned long long);
	wchar_t * GetDataPtr();
	const wchar_t * GetDataPtr();
	void PushBack(const wchar_t &);
	void PopBack(unsigned long long);
	wchar_t & PushDefault();
	wchar_t Pop();
	const wchar_t & Front();
	wchar_t & Front();
	const wchar_t & Back();
	wchar_t & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const wchar_t &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const wchar_t &);
	void Append(const wchar_t *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<wchar_t,Scaleform::AllocatorLH<wchar_t,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, const Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, const Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > >();
	Scaleform::ArrayConstPolicy<0,8,1> * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayConstPolicy<0,8,1> &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry & At(unsigned long long);
	Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry & At(unsigned long long);
	Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry ValueAt(unsigned long long);
	const Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry & operator[](unsigned long long);
	Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry & operator[](unsigned long long);
	Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry * GetDataPtr();
	const Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry * GetDataPtr();
	void PushBack(const Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry &);
	void PopBack(unsigned long long);
	Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry & PushDefault();
	Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry Pop();
	const Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry & Front();
	Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry & Front();
	const Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry & Back();
	Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry &);
	void Append(const Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > >();
};
struct Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper>
{
};
struct Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::Render::TextureFormat ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(Scaleform::Render::TextureFormat * &);
	void Append(Scaleform::Render::TextureFormat * *, unsigned long long);
	~ArrayData<Scaleform::Render::TextureFormat *,Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::Text::HighlightDesc>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::StrokeStyleType &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::StrokeStyleType &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::StrokeStyleType &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::StrokeStyleType &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::StrokeStyleType & At(unsigned long long);
	Scaleform::Render::StrokeStyleType & At(unsigned long long);
	Scaleform::Render::StrokeStyleType ValueAt(unsigned long long);
	const Scaleform::Render::StrokeStyleType & operator[](unsigned long long);
	Scaleform::Render::StrokeStyleType & operator[](unsigned long long);
	Scaleform::Render::StrokeStyleType * GetDataPtr();
	const Scaleform::Render::StrokeStyleType * GetDataPtr();
	void PushBack(const Scaleform::Render::StrokeStyleType &);
	void PopBack(unsigned long long);
	Scaleform::Render::StrokeStyleType & PushDefault();
	Scaleform::Render::StrokeStyleType Pop();
	const Scaleform::Render::StrokeStyleType & Front();
	Scaleform::Render::StrokeStyleType & Front();
	const Scaleform::Render::StrokeStyleType & Back();
	Scaleform::Render::StrokeStyleType & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::StrokeStyleType &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::StrokeStyleType &);
	void Append(const Scaleform::Render::StrokeStyleType *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::StrokeStyleType &);
	void Append(const Scaleform::Render::StrokeStyleType *, unsigned long long);
	~ArrayData<Scaleform::Render::StrokeStyleType,Scaleform::AllocatorLH<Scaleform::Render::StrokeStyleType,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::Render::Image> &);
	void Append(const Scaleform::Ptr<Scaleform::Render::Image> *, unsigned long long);
	~ArrayData<Scaleform::Ptr<Scaleform::Render::Image>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > & At(unsigned long long);
	Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > & At(unsigned long long);
	Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > ValueAt(unsigned long long);
	const Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > & operator[](unsigned long long);
	Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > & operator[](unsigned long long);
	Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > * GetDataPtr();
	const Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > * GetDataPtr();
	void PushBack(const Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > &);
	void PopBack(unsigned long long);
	Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > & PushDefault();
	Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > Pop();
	const Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > & Front();
	Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > & Front();
	const Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > & Back();
	Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > &);
	void Append(const Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::Render::BundleEntry ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(Scaleform::Render::BundleEntry * &);
	void Append(Scaleform::Render::BundleEntry * *, unsigned long long);
	~ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Text::HighlightDesc &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Text::HighlightDesc &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Text::HighlightDesc &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Text::HighlightDesc &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::Text::HighlightDesc & At(unsigned long long);
	Scaleform::Render::Text::HighlightDesc & At(unsigned long long);
	Scaleform::Render::Text::HighlightDesc ValueAt(unsigned long long);
	const Scaleform::Render::Text::HighlightDesc & operator[](unsigned long long);
	Scaleform::Render::Text::HighlightDesc & operator[](unsigned long long);
	Scaleform::Render::Text::HighlightDesc * GetDataPtr();
	const Scaleform::Render::Text::HighlightDesc * GetDataPtr();
	void PushBack(const Scaleform::Render::Text::HighlightDesc &);
	void PopBack(unsigned long long);
	Scaleform::Render::Text::HighlightDesc & PushDefault();
	Scaleform::Render::Text::HighlightDesc Pop();
	const Scaleform::Render::Text::HighlightDesc & Front();
	Scaleform::Render::Text::HighlightDesc & Front();
	const Scaleform::Render::Text::HighlightDesc & Back();
	Scaleform::Render::Text::HighlightDesc & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::Text::HighlightDesc &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::Text::HighlightDesc &);
	void Append(const Scaleform::Render::Text::HighlightDesc *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::Text::HighlightDesc &);
	void Append(const Scaleform::Render::Text::HighlightDesc *, unsigned long long);
	~ArrayData<Scaleform::Render::Text::HighlightDesc,Scaleform::AllocatorLH<Scaleform::Render::Text::HighlightDesc,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::BundleEntry *>
{
};
struct Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::Text::DocView::ImageSubstitutor::Element &);
	void Append(const Scaleform::Render::Text::DocView::ImageSubstitutor::Element *, unsigned long long);
	~ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::Render::Fence> >
{
};
struct Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::MatrixPoolImpl::HMatrix &);
	void Append(const Scaleform::Render::MatrixPoolImpl::HMatrix *, unsigned long long);
	~ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::Primitive::MeshEntry &);
	void Append(const Scaleform::Render::Primitive::MeshEntry *, unsigned long long);
	~ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Text::DocView::ImageSubstitutor::Element &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Text::DocView::ImageSubstitutor::Element &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Text::DocView::ImageSubstitutor::Element &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Text::DocView::ImageSubstitutor::Element &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::Text::DocView::ImageSubstitutor::Element & At(unsigned long long);
	Scaleform::Render::Text::DocView::ImageSubstitutor::Element & At(unsigned long long);
	Scaleform::Render::Text::DocView::ImageSubstitutor::Element ValueAt(unsigned long long);
	const Scaleform::Render::Text::DocView::ImageSubstitutor::Element & operator[](unsigned long long);
	Scaleform::Render::Text::DocView::ImageSubstitutor::Element & operator[](unsigned long long);
	Scaleform::Render::Text::DocView::ImageSubstitutor::Element * GetDataPtr();
	const Scaleform::Render::Text::DocView::ImageSubstitutor::Element * GetDataPtr();
	void PushBack(const Scaleform::Render::Text::DocView::ImageSubstitutor::Element &);
	void PopBack(unsigned long long);
	Scaleform::Render::Text::DocView::ImageSubstitutor::Element & PushDefault();
	Scaleform::Render::Text::DocView::ImageSubstitutor::Element Pop();
	const Scaleform::Render::Text::DocView::ImageSubstitutor::Element & Front();
	Scaleform::Render::Text::DocView::ImageSubstitutor::Element & Front();
	const Scaleform::Render::Text::DocView::ImageSubstitutor::Element & Back();
	Scaleform::Render::Text::DocView::ImageSubstitutor::Element & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::Text::DocView::ImageSubstitutor::Element &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::Text::DocView::ImageSubstitutor::Element &);
	void Append(const Scaleform::Render::Text::DocView::ImageSubstitutor::Element *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::ComplexMesh::FillRecord &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::ComplexMesh::FillRecord &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::ComplexMesh::FillRecord &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::ComplexMesh::FillRecord &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::ComplexMesh::FillRecord & At(unsigned long long);
	Scaleform::Render::ComplexMesh::FillRecord & At(unsigned long long);
	Scaleform::Render::ComplexMesh::FillRecord ValueAt(unsigned long long);
	const Scaleform::Render::ComplexMesh::FillRecord & operator[](unsigned long long);
	Scaleform::Render::ComplexMesh::FillRecord & operator[](unsigned long long);
	Scaleform::Render::ComplexMesh::FillRecord * GetDataPtr();
	const Scaleform::Render::ComplexMesh::FillRecord * GetDataPtr();
	void PushBack(const Scaleform::Render::ComplexMesh::FillRecord &);
	void PopBack(unsigned long long);
	Scaleform::Render::ComplexMesh::FillRecord & PushDefault();
	Scaleform::Render::ComplexMesh::FillRecord Pop();
	const Scaleform::Render::ComplexMesh::FillRecord & Front();
	Scaleform::Render::ComplexMesh::FillRecord & Front();
	const Scaleform::Render::ComplexMesh::FillRecord & Back();
	Scaleform::Render::ComplexMesh::FillRecord & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::ComplexMesh::FillRecord &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::ComplexMesh::FillRecord &);
	void Append(const Scaleform::Render::ComplexMesh::FillRecord *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::Render::TreeRoot ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(Scaleform::Render::TreeRoot * &);
	void Append(Scaleform::Render::TreeRoot * *, unsigned long long);
	~ArrayData<Scaleform::Render::TreeRoot *,Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> >(const Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > &);
	ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> >(long);
	ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> >();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::Render::Fence> &);
	void Append(const Scaleform::Ptr<Scaleform::Render::Fence> *, unsigned long long);
	~ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef Scaleform::Render::Text::LineBuffer::Line ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::Render::Text::LineBuffer::Line * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::Render::Text::LineBuffer::Line * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::Render::Text::LineBuffer::Line * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::Render::Text::LineBuffer::Line * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	Scaleform::Render::Text::LineBuffer::Line * & At(unsigned long long);
	Scaleform::Render::Text::LineBuffer::Line * & At(unsigned long long);
	Scaleform::Render::Text::LineBuffer::Line * ValueAt(unsigned long long);
	Scaleform::Render::Text::LineBuffer::Line * & operator[](unsigned long long);
	Scaleform::Render::Text::LineBuffer::Line * & operator[](unsigned long long);
	Scaleform::Render::Text::LineBuffer::Line * * GetDataPtr();
	Scaleform::Render::Text::LineBuffer::Line * * GetDataPtr();
	void PushBack(Scaleform::Render::Text::LineBuffer::Line * &);
	void PopBack(unsigned long long);
	Scaleform::Render::Text::LineBuffer::Line * & PushDefault();
	Scaleform::Render::Text::LineBuffer::Line * Pop();
	Scaleform::Render::Text::LineBuffer::Line * & Front();
	Scaleform::Render::Text::LineBuffer::Line * & Front();
	Scaleform::Render::Text::LineBuffer::Line * & Back();
	Scaleform::Render::Text::LineBuffer::Line * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, Scaleform::Render::Text::LineBuffer::Line * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, Scaleform::Render::Text::LineBuffer::Line * &);
	void Append(Scaleform::Render::Text::LineBuffer::Line * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::LineBuffer::Line *,Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > :
	Scaleform::ArrayDataBase<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> > &);
	ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> >(long);
	ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> >();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry &);
	void Append(const Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry *, unsigned long long);
	~ArrayData<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68>,Scaleform::ArrayConstPolicy<0,8,1> >();
};
struct Scaleform::AllocatorLH<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> >,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::RangeData<Scaleform::Ptr<Scaleform::Render::Text::TextFormat> > >
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::MatrixPoolImpl::HMatrix &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::MatrixPoolImpl::HMatrix &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::MatrixPoolImpl::HMatrix &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::MatrixPoolImpl::HMatrix &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::MatrixPoolImpl::HMatrix & At(unsigned long long);
	Scaleform::Render::MatrixPoolImpl::HMatrix & At(unsigned long long);
	Scaleform::Render::MatrixPoolImpl::HMatrix ValueAt(unsigned long long);
	const Scaleform::Render::MatrixPoolImpl::HMatrix & operator[](unsigned long long);
	Scaleform::Render::MatrixPoolImpl::HMatrix & operator[](unsigned long long);
	Scaleform::Render::MatrixPoolImpl::HMatrix * GetDataPtr();
	const Scaleform::Render::MatrixPoolImpl::HMatrix * GetDataPtr();
	void PushBack(const Scaleform::Render::MatrixPoolImpl::HMatrix &);
	void PopBack(unsigned long long);
	Scaleform::Render::MatrixPoolImpl::HMatrix & PushDefault();
	Scaleform::Render::MatrixPoolImpl::HMatrix Pop();
	const Scaleform::Render::MatrixPoolImpl::HMatrix & Front();
	Scaleform::Render::MatrixPoolImpl::HMatrix & Front();
	const Scaleform::Render::MatrixPoolImpl::HMatrix & Back();
	Scaleform::Render::MatrixPoolImpl::HMatrix & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::MatrixPoolImpl::HMatrix &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::MatrixPoolImpl::HMatrix &);
	void Append(const Scaleform::Render::MatrixPoolImpl::HMatrix *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::MatrixPoolImpl::HMatrix,Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::ComplexMesh::FillRecord &);
	void Append(const Scaleform::Render::ComplexMesh::FillRecord *, unsigned long long);
	~ArrayData<Scaleform::Render::ComplexMesh::FillRecord,Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::FillStyleType &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::FillStyleType &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::FillStyleType &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::FillStyleType &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::FillStyleType & At(unsigned long long);
	Scaleform::Render::FillStyleType & At(unsigned long long);
	Scaleform::Render::FillStyleType ValueAt(unsigned long long);
	const Scaleform::Render::FillStyleType & operator[](unsigned long long);
	Scaleform::Render::FillStyleType & operator[](unsigned long long);
	Scaleform::Render::FillStyleType * GetDataPtr();
	const Scaleform::Render::FillStyleType * GetDataPtr();
	void PushBack(const Scaleform::Render::FillStyleType &);
	void PopBack(unsigned long long);
	Scaleform::Render::FillStyleType & PushDefault();
	Scaleform::Render::FillStyleType Pop();
	const Scaleform::Render::FillStyleType & Front();
	Scaleform::Render::FillStyleType & Front();
	const Scaleform::Render::FillStyleType & Back();
	Scaleform::Render::FillStyleType & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::FillStyleType &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::FillStyleType &);
	void Append(const Scaleform::Render::FillStyleType *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::FillStyleType,Scaleform::AllocatorLH<Scaleform::Render::FillStyleType,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::Render::Fence> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::Render::Fence> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >(const Scaleform::Ptr<Scaleform::Render::Fence> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >(const Scaleform::Ptr<Scaleform::Render::Fence> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >();
	Scaleform::ArrayConstPolicy<128,64,1> * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayConstPolicy<128,64,1> &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::Render::Fence> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::Render::Fence> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::Render::Fence> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::Render::Fence> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::Render::Fence> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::Render::Fence> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::Render::Fence> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::Render::Fence> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::Render::Fence> & PushDefault();
	Scaleform::Ptr<Scaleform::Render::Fence> Pop();
	const Scaleform::Ptr<Scaleform::Render::Fence> & Front();
	Scaleform::Ptr<Scaleform::Render::Fence> & Front();
	const Scaleform::Ptr<Scaleform::Render::Fence> & Back();
	Scaleform::Ptr<Scaleform::Render::Fence> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::Render::Fence> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::Render::Fence> &);
	void Append(const Scaleform::Ptr<Scaleform::Render::Fence> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::Render::Fence>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Fence>,2>,Scaleform::ArrayConstPolicy<128,64,1> > >();
};
struct Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > :
	Scaleform::ArrayDataBase<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >(const Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > &);
	ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >(long);
	ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::Matrix4x4<float> &);
	void Append(const Scaleform::Render::Matrix4x4<float> *, unsigned long long);
	~ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Primitive::MeshEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Primitive::MeshEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Primitive::MeshEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Primitive::MeshEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::Primitive::MeshEntry & At(unsigned long long);
	Scaleform::Render::Primitive::MeshEntry & At(unsigned long long);
	Scaleform::Render::Primitive::MeshEntry ValueAt(unsigned long long);
	const Scaleform::Render::Primitive::MeshEntry & operator[](unsigned long long);
	Scaleform::Render::Primitive::MeshEntry & operator[](unsigned long long);
	Scaleform::Render::Primitive::MeshEntry * GetDataPtr();
	const Scaleform::Render::Primitive::MeshEntry * GetDataPtr();
	void PushBack(const Scaleform::Render::Primitive::MeshEntry &);
	void PopBack(unsigned long long);
	Scaleform::Render::Primitive::MeshEntry & PushDefault();
	Scaleform::Render::Primitive::MeshEntry Pop();
	const Scaleform::Render::Primitive::MeshEntry & Front();
	Scaleform::Render::Primitive::MeshEntry & Front();
	const Scaleform::Render::Primitive::MeshEntry & Back();
	Scaleform::Render::Primitive::MeshEntry & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::Primitive::MeshEntry &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::Primitive::MeshEntry &);
	void Append(const Scaleform::Render::Primitive::MeshEntry *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::Primitive::MeshEntry,Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, const Scaleform::Render::Matrix4x4<float> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, const Scaleform::Render::Matrix4x4<float> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::Render::Matrix4x4<float> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::Render::Matrix4x4<float> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >();
	Scaleform::ArrayConstPolicy<0,8,1> * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayConstPolicy<0,8,1> &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::Matrix4x4<float> & At(unsigned long long);
	Scaleform::Render::Matrix4x4<float> & At(unsigned long long);
	Scaleform::Render::Matrix4x4<float> ValueAt(unsigned long long);
	const Scaleform::Render::Matrix4x4<float> & operator[](unsigned long long);
	Scaleform::Render::Matrix4x4<float> & operator[](unsigned long long);
	Scaleform::Render::Matrix4x4<float> * GetDataPtr();
	const Scaleform::Render::Matrix4x4<float> * GetDataPtr();
	void PushBack(const Scaleform::Render::Matrix4x4<float> &);
	void PopBack(unsigned long long);
	Scaleform::Render::Matrix4x4<float> & PushDefault();
	Scaleform::Render::Matrix4x4<float> Pop();
	const Scaleform::Render::Matrix4x4<float> & Front();
	Scaleform::Render::Matrix4x4<float> & Front();
	const Scaleform::Render::Matrix4x4<float> & Back();
	Scaleform::Render::Matrix4x4<float> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::Matrix4x4<float> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::Matrix4x4<float> &);
	void Append(const Scaleform::Render::Matrix4x4<float> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix4x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2>,Scaleform::ArrayConstPolicy<0,8,1> > >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry & At(unsigned long long);
	Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry & At(unsigned long long);
	Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry ValueAt(unsigned long long);
	const Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry & operator[](unsigned long long);
	Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry & operator[](unsigned long long);
	Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry * GetDataPtr();
	const Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry * GetDataPtr();
	void PushBack(const Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry &);
	void PopBack(unsigned long long);
	Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry & PushDefault();
	Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry Pop();
	const Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry & Front();
	Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry & Front();
	const Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry & Back();
	Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry &);
	void Append(const Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry,68> :
	Scaleform::AllocatorBaseLH<68>,
	Scaleform::ConstructorMov<Scaleform::Render::MeshBuffer::MeshBufferUpdateEntry>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef Scaleform::Render::BundleEntry ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::Render::BundleEntry * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::Render::BundleEntry * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::Render::BundleEntry * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::Render::BundleEntry * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	Scaleform::Render::BundleEntry * & At(unsigned long long);
	Scaleform::Render::BundleEntry * & At(unsigned long long);
	Scaleform::Render::BundleEntry * ValueAt(unsigned long long);
	Scaleform::Render::BundleEntry * & operator[](unsigned long long);
	Scaleform::Render::BundleEntry * & operator[](unsigned long long);
	Scaleform::Render::BundleEntry * * GetDataPtr();
	Scaleform::Render::BundleEntry * * GetDataPtr();
	void PushBack(Scaleform::Render::BundleEntry * &);
	void PopBack(unsigned long long);
	Scaleform::Render::BundleEntry * & PushDefault();
	Scaleform::Render::BundleEntry * Pop();
	Scaleform::Render::BundleEntry * & Front();
	Scaleform::Render::BundleEntry * & Front();
	Scaleform::Render::BundleEntry * & Back();
	Scaleform::Render::BundleEntry * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, Scaleform::Render::BundleEntry * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, Scaleform::Render::BundleEntry * &);
	void Append(Scaleform::Render::BundleEntry * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::BundleEntry *,Scaleform::AllocatorLH<Scaleform::Render::BundleEntry *,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Text::StyledText::ParagraphPtrWrapper &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Text::StyledText::ParagraphPtrWrapper &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Text::StyledText::ParagraphPtrWrapper &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Text::StyledText::ParagraphPtrWrapper &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::Text::StyledText::ParagraphPtrWrapper & At(unsigned long long);
	Scaleform::Render::Text::StyledText::ParagraphPtrWrapper & At(unsigned long long);
	Scaleform::Render::Text::StyledText::ParagraphPtrWrapper ValueAt(unsigned long long);
	const Scaleform::Render::Text::StyledText::ParagraphPtrWrapper & operator[](unsigned long long);
	Scaleform::Render::Text::StyledText::ParagraphPtrWrapper & operator[](unsigned long long);
	Scaleform::Render::Text::StyledText::ParagraphPtrWrapper * GetDataPtr();
	const Scaleform::Render::Text::StyledText::ParagraphPtrWrapper * GetDataPtr();
	void PushBack(const Scaleform::Render::Text::StyledText::ParagraphPtrWrapper &);
	void PopBack(unsigned long long);
	Scaleform::Render::Text::StyledText::ParagraphPtrWrapper & PushDefault();
	Scaleform::Render::Text::StyledText::ParagraphPtrWrapper Pop();
	const Scaleform::Render::Text::StyledText::ParagraphPtrWrapper & Front();
	Scaleform::Render::Text::StyledText::ParagraphPtrWrapper & Front();
	const Scaleform::Render::Text::StyledText::ParagraphPtrWrapper & Back();
	Scaleform::Render::Text::StyledText::ParagraphPtrWrapper & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::Text::StyledText::ParagraphPtrWrapper &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::Text::StyledText::ParagraphPtrWrapper &);
	void Append(const Scaleform::Render::Text::StyledText::ParagraphPtrWrapper *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,Scaleform::AllocatorLH<Scaleform::Render::Text::StyledText::ParagraphPtrWrapper,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<Scaleform::Render::Text::DocView::ImageSubstitutor::Element,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::Text::DocView::ImageSubstitutor::Element>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Matrix2x4<float> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Matrix2x4<float> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Matrix2x4<float> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Matrix2x4<float> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::Matrix2x4<float> & At(unsigned long long);
	Scaleform::Render::Matrix2x4<float> & At(unsigned long long);
	Scaleform::Render::Matrix2x4<float> ValueAt(unsigned long long);
	const Scaleform::Render::Matrix2x4<float> & operator[](unsigned long long);
	Scaleform::Render::Matrix2x4<float> & operator[](unsigned long long);
	Scaleform::Render::Matrix2x4<float> * GetDataPtr();
	const Scaleform::Render::Matrix2x4<float> * GetDataPtr();
	void PushBack(const Scaleform::Render::Matrix2x4<float> &);
	void PopBack(unsigned long long);
	Scaleform::Render::Matrix2x4<float> & PushDefault();
	Scaleform::Render::Matrix2x4<float> Pop();
	const Scaleform::Render::Matrix2x4<float> & Front();
	Scaleform::Render::Matrix2x4<float> & Front();
	const Scaleform::Render::Matrix2x4<float> & Back();
	Scaleform::Render::Matrix2x4<float> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::Matrix2x4<float> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::Matrix2x4<float> &);
	void Append(const Scaleform::Render::Matrix2x4<float> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::Matrix2x4<float>,Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<Scaleform::Render::MatrixPoolImpl::HMatrix,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::MatrixPoolImpl::HMatrix>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > >(Scaleform::MemoryHeap *, const Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > >(Scaleform::MemoryHeap *, const Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > >(const Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > >(const Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > >();
	Scaleform::ArrayConstPolicy<8,8,0> * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayConstPolicy<8,8,0> &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry & At(unsigned long long);
	Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry & At(unsigned long long);
	Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry ValueAt(unsigned long long);
	const Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry & operator[](unsigned long long);
	Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry & operator[](unsigned long long);
	Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry * GetDataPtr();
	const Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry * GetDataPtr();
	void PushBack(const Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry &);
	void PopBack(unsigned long long);
	Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry & PushDefault();
	Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry Pop();
	const Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry & Front();
	Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry & Front();
	const Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry & Back();
	Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry &);
	void Append(const Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > >();
};
struct Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > :
	Scaleform::ArrayDataBase<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> >(const Scaleform::ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> > &);
	ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> >(long);
	ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> >();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry &);
	void Append(const Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry *, unsigned long long);
	~ArrayData<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67>,Scaleform::ArrayConstPolicy<8,8,0> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef Scaleform::Render::GL::MeshBuffer ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::Render::GL::MeshBuffer * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::Render::GL::MeshBuffer * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::Render::GL::MeshBuffer * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::Render::GL::MeshBuffer * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	Scaleform::Render::GL::MeshBuffer * & At(unsigned long long);
	Scaleform::Render::GL::MeshBuffer * & At(unsigned long long);
	Scaleform::Render::GL::MeshBuffer * ValueAt(unsigned long long);
	Scaleform::Render::GL::MeshBuffer * & operator[](unsigned long long);
	Scaleform::Render::GL::MeshBuffer * & operator[](unsigned long long);
	Scaleform::Render::GL::MeshBuffer * * GetDataPtr();
	Scaleform::Render::GL::MeshBuffer * * GetDataPtr();
	void PushBack(Scaleform::Render::GL::MeshBuffer * &);
	void PopBack(unsigned long long);
	Scaleform::Render::GL::MeshBuffer * & PushDefault();
	Scaleform::Render::GL::MeshBuffer * Pop();
	Scaleform::Render::GL::MeshBuffer * & Front();
	Scaleform::Render::GL::MeshBuffer * & Front();
	Scaleform::Render::GL::MeshBuffer * & Back();
	Scaleform::Render::GL::MeshBuffer * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, Scaleform::Render::GL::MeshBuffer * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, Scaleform::Render::GL::MeshBuffer * &);
	void Append(Scaleform::Render::GL::MeshBuffer * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<Scaleform::Render::HAL::MaskStackEntry,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::HAL::MaskStackEntry>
{
};
struct Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::Render::GL::MeshBuffer ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(Scaleform::Render::GL::MeshBuffer * &);
	void Append(Scaleform::Render::GL::MeshBuffer * *, unsigned long long);
	~ArrayData<Scaleform::Render::GL::MeshBuffer *,Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH<Scaleform::Render::HAL::BlendModeStackEntry,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::HAL::BlendModeStackEntry>
{
};
struct Scaleform::AllocatorLH<Scaleform::Render::GL::MeshBuffer *,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::GL::MeshBuffer *>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & PushDefault();
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> Pop();
	const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & Front();
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & Front();
	const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & Back();
	Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> &);
	void Append(const Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> *, unsigned long long);
	~ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> *, unsigned long long);
	~ArrayData<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::TimelineDef::Frame &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::TimelineDef::Frame &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::TimelineDef::Frame &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::TimelineDef::Frame &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::TimelineDef::Frame & At(unsigned long long);
	Scaleform::GFx::TimelineDef::Frame & At(unsigned long long);
	Scaleform::GFx::TimelineDef::Frame ValueAt(unsigned long long);
	const Scaleform::GFx::TimelineDef::Frame & operator[](unsigned long long);
	Scaleform::GFx::TimelineDef::Frame & operator[](unsigned long long);
	Scaleform::GFx::TimelineDef::Frame * GetDataPtr();
	const Scaleform::GFx::TimelineDef::Frame * GetDataPtr();
	void PushBack(const Scaleform::GFx::TimelineDef::Frame &);
	void PopBack(unsigned long long);
	Scaleform::GFx::TimelineDef::Frame & PushDefault();
	Scaleform::GFx::TimelineDef::Frame Pop();
	const Scaleform::GFx::TimelineDef::Frame & Front();
	Scaleform::GFx::TimelineDef::Frame & Front();
	const Scaleform::GFx::TimelineDef::Frame & Back();
	Scaleform::GFx::TimelineDef::Frame & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::TimelineDef::Frame &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::TimelineDef::Frame &);
	void Append(const Scaleform::GFx::TimelineDef::Frame *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> & At(unsigned long long);
	Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> & At(unsigned long long);
	Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> ValueAt(unsigned long long);
	const Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> & operator[](unsigned long long);
	Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> & operator[](unsigned long long);
	Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> * GetDataPtr();
	const Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> * GetDataPtr();
	void PushBack(const Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> &);
	void PopBack(unsigned long long);
	Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> & PushDefault();
	Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> Pop();
	const Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> & Front();
	Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> & Front();
	const Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> & Back();
	Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> &);
	void Append(const Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::RangeData<void *> >
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::RangeData<void *> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::RangeData<void *> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::RangeData<void *> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::RangeData<void *> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::RangeData<void *> & At(unsigned long long);
	Scaleform::RangeData<void *> & At(unsigned long long);
	Scaleform::RangeData<void *> ValueAt(unsigned long long);
	const Scaleform::RangeData<void *> & operator[](unsigned long long);
	Scaleform::RangeData<void *> & operator[](unsigned long long);
	Scaleform::RangeData<void *> * GetDataPtr();
	const Scaleform::RangeData<void *> * GetDataPtr();
	void PushBack(const Scaleform::RangeData<void *> &);
	void PopBack(unsigned long long);
	Scaleform::RangeData<void *> & PushDefault();
	Scaleform::RangeData<void *> Pop();
	const Scaleform::RangeData<void *> & Front();
	Scaleform::RangeData<void *> & Front();
	const Scaleform::RangeData<void *> & Back();
	Scaleform::RangeData<void *> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::RangeData<void *> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::RangeData<void *> &);
	void Append(const Scaleform::RangeData<void *> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> & PushDefault();
	Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> Pop();
	const Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> & Front();
	Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> & Front();
	const Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> & Back();
	Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::FontData::AdvanceEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::FontData::AdvanceEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::FontData::AdvanceEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::FontData::AdvanceEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::FontData::AdvanceEntry & At(unsigned long long);
	Scaleform::GFx::FontData::AdvanceEntry & At(unsigned long long);
	Scaleform::GFx::FontData::AdvanceEntry ValueAt(unsigned long long);
	const Scaleform::GFx::FontData::AdvanceEntry & operator[](unsigned long long);
	Scaleform::GFx::FontData::AdvanceEntry & operator[](unsigned long long);
	Scaleform::GFx::FontData::AdvanceEntry * GetDataPtr();
	const Scaleform::GFx::FontData::AdvanceEntry * GetDataPtr();
	void PushBack(const Scaleform::GFx::FontData::AdvanceEntry &);
	void PopBack(unsigned long long);
	Scaleform::GFx::FontData::AdvanceEntry & PushDefault();
	Scaleform::GFx::FontData::AdvanceEntry Pop();
	const Scaleform::GFx::FontData::AdvanceEntry & Front();
	Scaleform::GFx::FontData::AdvanceEntry & Front();
	const Scaleform::GFx::FontData::AdvanceEntry & Back();
	Scaleform::GFx::FontData::AdvanceEntry & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::FontData::AdvanceEntry &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::FontData::AdvanceEntry &);
	void Append(const Scaleform::GFx::FontData::AdvanceEntry *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::FontData::AdvanceEntry &);
	void Append(const Scaleform::GFx::FontData::AdvanceEntry *, unsigned long long);
	~ArrayData<Scaleform::GFx::FontData::AdvanceEntry,Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::ImportData::Symbol &);
	void Append(const Scaleform::GFx::ImportData::Symbol *, unsigned long long);
	~ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261> :
	Scaleform::AllocatorBaseLH<261>,
	Scaleform::ConstructorMov<Scaleform::Render::TextureGlyph>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> & PushDefault();
	Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> Pop();
	const Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> & Front();
	Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> & Front();
	const Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> & Back();
	Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> &);
	void Append(const Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::TextureGlyph &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::TextureGlyph &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::TextureGlyph &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::TextureGlyph &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::TextureGlyph & At(unsigned long long);
	Scaleform::Render::TextureGlyph & At(unsigned long long);
	Scaleform::Render::TextureGlyph ValueAt(unsigned long long);
	const Scaleform::Render::TextureGlyph & operator[](unsigned long long);
	Scaleform::Render::TextureGlyph & operator[](unsigned long long);
	Scaleform::Render::TextureGlyph * GetDataPtr();
	const Scaleform::Render::TextureGlyph * GetDataPtr();
	void PushBack(const Scaleform::Render::TextureGlyph &);
	void PopBack(unsigned long long);
	Scaleform::Render::TextureGlyph & PushDefault();
	Scaleform::Render::TextureGlyph Pop();
	const Scaleform::Render::TextureGlyph & Front();
	Scaleform::Render::TextureGlyph & Front();
	const Scaleform::Render::TextureGlyph & Back();
	Scaleform::Render::TextureGlyph & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::TextureGlyph &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::TextureGlyph &);
	void Append(const Scaleform::Render::TextureGlyph *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> &);
	void Append(const Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> *, unsigned long long);
	~ArrayData<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::ImportData::Symbol &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::ImportData::Symbol &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::ImportData::Symbol &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::ImportData::Symbol &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::ImportData::Symbol & At(unsigned long long);
	Scaleform::GFx::ImportData::Symbol & At(unsigned long long);
	Scaleform::GFx::ImportData::Symbol ValueAt(unsigned long long);
	const Scaleform::GFx::ImportData::Symbol & operator[](unsigned long long);
	Scaleform::GFx::ImportData::Symbol & operator[](unsigned long long);
	Scaleform::GFx::ImportData::Symbol * GetDataPtr();
	const Scaleform::GFx::ImportData::Symbol * GetDataPtr();
	void PushBack(const Scaleform::GFx::ImportData::Symbol &);
	void PopBack(unsigned long long);
	Scaleform::GFx::ImportData::Symbol & PushDefault();
	Scaleform::GFx::ImportData::Symbol Pop();
	const Scaleform::GFx::ImportData::Symbol & Front();
	Scaleform::GFx::ImportData::Symbol & Front();
	const Scaleform::GFx::ImportData::Symbol & Back();
	Scaleform::GFx::ImportData::Symbol & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::ImportData::Symbol &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::ImportData::Symbol &);
	void Append(const Scaleform::GFx::ImportData::Symbol *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImportData::Symbol,Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::ImportData::Symbol,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::ImportData::Symbol>
{
};
struct Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::RangeData<void *> &);
	void Append(const Scaleform::RangeData<void *> *, unsigned long long);
	~ArrayData<Scaleform::RangeData<void *>,Scaleform::AllocatorLH<Scaleform::RangeData<void *>,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::TextureGlyph &);
	void Append(const Scaleform::Render::TextureGlyph *, unsigned long long);
	~ArrayData<Scaleform::Render::TextureGlyph,Scaleform::AllocatorLH<Scaleform::Render::TextureGlyph,261>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> *, unsigned long long);
	~ArrayData<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::TimelineDef::Frame &);
	void Append(const Scaleform::GFx::TimelineDef::Frame *, unsigned long long);
	~ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::MovieImpl::FontDesc &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::MovieImpl::FontDesc &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::MovieImpl::FontDesc &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::MovieImpl::FontDesc &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::MovieImpl::FontDesc & At(unsigned long long);
	Scaleform::GFx::MovieImpl::FontDesc & At(unsigned long long);
	Scaleform::GFx::MovieImpl::FontDesc ValueAt(unsigned long long);
	const Scaleform::GFx::MovieImpl::FontDesc & operator[](unsigned long long);
	Scaleform::GFx::MovieImpl::FontDesc & operator[](unsigned long long);
	Scaleform::GFx::MovieImpl::FontDesc * GetDataPtr();
	const Scaleform::GFx::MovieImpl::FontDesc * GetDataPtr();
	void PushBack(const Scaleform::GFx::MovieImpl::FontDesc &);
	void PopBack(unsigned long long);
	Scaleform::GFx::MovieImpl::FontDesc & PushDefault();
	Scaleform::GFx::MovieImpl::FontDesc Pop();
	const Scaleform::GFx::MovieImpl::FontDesc & Front();
	Scaleform::GFx::MovieImpl::FontDesc & Front();
	const Scaleform::GFx::MovieImpl::FontDesc & Back();
	Scaleform::GFx::MovieImpl::FontDesc & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::MovieImpl::FontDesc &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::MovieImpl::FontDesc &);
	void Append(const Scaleform::GFx::MovieImpl::FontDesc *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::MovieImpl::IndirectTransPair &);
	void Append(const Scaleform::GFx::MovieImpl::IndirectTransPair *, unsigned long long);
	~ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::MovieImpl::IndirectTransPair &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::MovieImpl::IndirectTransPair &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::MovieImpl::IndirectTransPair &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::MovieImpl::IndirectTransPair &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::MovieImpl::IndirectTransPair & At(unsigned long long);
	Scaleform::GFx::MovieImpl::IndirectTransPair & At(unsigned long long);
	Scaleform::GFx::MovieImpl::IndirectTransPair ValueAt(unsigned long long);
	const Scaleform::GFx::MovieImpl::IndirectTransPair & operator[](unsigned long long);
	Scaleform::GFx::MovieImpl::IndirectTransPair & operator[](unsigned long long);
	Scaleform::GFx::MovieImpl::IndirectTransPair * GetDataPtr();
	const Scaleform::GFx::MovieImpl::IndirectTransPair * GetDataPtr();
	void PushBack(const Scaleform::GFx::MovieImpl::IndirectTransPair &);
	void PopBack(unsigned long long);
	Scaleform::GFx::MovieImpl::IndirectTransPair & PushDefault();
	Scaleform::GFx::MovieImpl::IndirectTransPair Pop();
	const Scaleform::GFx::MovieImpl::IndirectTransPair & Front();
	Scaleform::GFx::MovieImpl::IndirectTransPair & Front();
	const Scaleform::GFx::MovieImpl::IndirectTransPair & Back();
	Scaleform::GFx::MovieImpl::IndirectTransPair & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::MovieImpl::IndirectTransPair &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::MovieImpl::IndirectTransPair &);
	void Append(const Scaleform::GFx::MovieImpl::IndirectTransPair *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::IndirectTransPair,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::DisplayList::DepthToIndexMapElem &);
	void Append(const Scaleform::GFx::DisplayList::DepthToIndexMapElem *, unsigned long long);
	~ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::StaticTextRecord::GlyphEntry &);
	void Append(const Scaleform::GFx::StaticTextRecord::GlyphEntry *, unsigned long long);
	~ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> *, unsigned long long);
	~ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::Point<float> >
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> & PushDefault();
	Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> Pop();
	const Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> & Front();
	Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> & Front();
	const Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> & Back();
	Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> *, unsigned long long);
	~ArrayData<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::DisplayList::DisplayEntry &);
	void Append(const Scaleform::GFx::DisplayList::DisplayEntry *, unsigned long long);
	~ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> >
{
	typedef Scaleform::GFx::StaticTextRecord ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::StaticTextRecord * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::StaticTextRecord * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::StaticTextRecord * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::StaticTextRecord * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	Scaleform::GFx::StaticTextRecord * & At(unsigned long long);
	Scaleform::GFx::StaticTextRecord * & At(unsigned long long);
	Scaleform::GFx::StaticTextRecord * ValueAt(unsigned long long);
	Scaleform::GFx::StaticTextRecord * & operator[](unsigned long long);
	Scaleform::GFx::StaticTextRecord * & operator[](unsigned long long);
	Scaleform::GFx::StaticTextRecord * * GetDataPtr();
	Scaleform::GFx::StaticTextRecord * * GetDataPtr();
	void PushBack(Scaleform::GFx::StaticTextRecord * &);
	void PopBack(unsigned long long);
	Scaleform::GFx::StaticTextRecord * & PushDefault();
	Scaleform::GFx::StaticTextRecord * Pop();
	Scaleform::GFx::StaticTextRecord * & Front();
	Scaleform::GFx::StaticTextRecord * & Front();
	Scaleform::GFx::StaticTextRecord * & Back();
	Scaleform::GFx::StaticTextRecord * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, Scaleform::GFx::StaticTextRecord * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, Scaleform::GFx::StaticTextRecord * &);
	void Append(Scaleform::GFx::StaticTextRecord * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::Point<float> &);
	void Append(const Scaleform::Render::Point<float> *, unsigned long long);
	~ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::TimelineDef::Frame &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::TimelineDef::Frame &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::TimelineDef::Frame &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::TimelineDef::Frame &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::TimelineDef::Frame & At(unsigned long long);
	Scaleform::GFx::TimelineDef::Frame & At(unsigned long long);
	Scaleform::GFx::TimelineDef::Frame ValueAt(unsigned long long);
	const Scaleform::GFx::TimelineDef::Frame & operator[](unsigned long long);
	Scaleform::GFx::TimelineDef::Frame & operator[](unsigned long long);
	Scaleform::GFx::TimelineDef::Frame * GetDataPtr();
	const Scaleform::GFx::TimelineDef::Frame * GetDataPtr();
	void PushBack(const Scaleform::GFx::TimelineDef::Frame &);
	void PopBack(unsigned long long);
	Scaleform::GFx::TimelineDef::Frame & PushDefault();
	Scaleform::GFx::TimelineDef::Frame Pop();
	const Scaleform::GFx::TimelineDef::Frame & Front();
	Scaleform::GFx::TimelineDef::Frame & Front();
	const Scaleform::GFx::TimelineDef::Frame & Back();
	Scaleform::GFx::TimelineDef::Frame & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::TimelineDef::Frame &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::TimelineDef::Frame &);
	void Append(const Scaleform::GFx::TimelineDef::Frame *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::MovieImpl::FontDesc &);
	void Append(const Scaleform::GFx::MovieImpl::FontDesc *, unsigned long long);
	~ArrayData<Scaleform::GFx::MovieImpl::FontDesc,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::StaticTextRecord::GlyphEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::StaticTextRecord::GlyphEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::StaticTextRecord::GlyphEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::StaticTextRecord::GlyphEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::StaticTextRecord::GlyphEntry & At(unsigned long long);
	Scaleform::GFx::StaticTextRecord::GlyphEntry & At(unsigned long long);
	Scaleform::GFx::StaticTextRecord::GlyphEntry ValueAt(unsigned long long);
	const Scaleform::GFx::StaticTextRecord::GlyphEntry & operator[](unsigned long long);
	Scaleform::GFx::StaticTextRecord::GlyphEntry & operator[](unsigned long long);
	Scaleform::GFx::StaticTextRecord::GlyphEntry * GetDataPtr();
	const Scaleform::GFx::StaticTextRecord::GlyphEntry * GetDataPtr();
	void PushBack(const Scaleform::GFx::StaticTextRecord::GlyphEntry &);
	void PopBack(unsigned long long);
	Scaleform::GFx::StaticTextRecord::GlyphEntry & PushDefault();
	Scaleform::GFx::StaticTextRecord::GlyphEntry Pop();
	const Scaleform::GFx::StaticTextRecord::GlyphEntry & Front();
	Scaleform::GFx::StaticTextRecord::GlyphEntry & Front();
	const Scaleform::GFx::StaticTextRecord::GlyphEntry & Back();
	Scaleform::GFx::StaticTextRecord::GlyphEntry & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::StaticTextRecord::GlyphEntry &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::StaticTextRecord::GlyphEntry &);
	void Append(const Scaleform::GFx::StaticTextRecord::GlyphEntry *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord::GlyphEntry,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & PushDefault();
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> Pop();
	const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & Front();
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & Front();
	const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & Back();
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::TimelineDef::Frame &);
	void Append(const Scaleform::GFx::TimelineDef::Frame *, unsigned long long);
	~ArrayData<Scaleform::GFx::TimelineDef::Frame,Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::DisplayList::DisplayEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::DisplayList::DisplayEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::DisplayList::DisplayEntry &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::DisplayList::DisplayEntry &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::DisplayList::DisplayEntry & At(unsigned long long);
	Scaleform::GFx::DisplayList::DisplayEntry & At(unsigned long long);
	Scaleform::GFx::DisplayList::DisplayEntry ValueAt(unsigned long long);
	const Scaleform::GFx::DisplayList::DisplayEntry & operator[](unsigned long long);
	Scaleform::GFx::DisplayList::DisplayEntry & operator[](unsigned long long);
	Scaleform::GFx::DisplayList::DisplayEntry * GetDataPtr();
	const Scaleform::GFx::DisplayList::DisplayEntry * GetDataPtr();
	void PushBack(const Scaleform::GFx::DisplayList::DisplayEntry &);
	void PopBack(unsigned long long);
	Scaleform::GFx::DisplayList::DisplayEntry & PushDefault();
	Scaleform::GFx::DisplayList::DisplayEntry Pop();
	const Scaleform::GFx::DisplayList::DisplayEntry & Front();
	Scaleform::GFx::DisplayList::DisplayEntry & Front();
	const Scaleform::GFx::DisplayList::DisplayEntry & Back();
	Scaleform::GFx::DisplayList::DisplayEntry & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::DisplayList::DisplayEntry &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::DisplayList::DisplayEntry &);
	void Append(const Scaleform::GFx::DisplayList::DisplayEntry *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DisplayEntry,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::DisplayList::DepthToIndexMapElem>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::MovieImpl::LevelInfo &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::MovieImpl::LevelInfo &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::MovieImpl::LevelInfo &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::MovieImpl::LevelInfo &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::MovieImpl::LevelInfo & At(unsigned long long);
	Scaleform::GFx::MovieImpl::LevelInfo & At(unsigned long long);
	Scaleform::GFx::MovieImpl::LevelInfo ValueAt(unsigned long long);
	const Scaleform::GFx::MovieImpl::LevelInfo & operator[](unsigned long long);
	Scaleform::GFx::MovieImpl::LevelInfo & operator[](unsigned long long);
	Scaleform::GFx::MovieImpl::LevelInfo * GetDataPtr();
	const Scaleform::GFx::MovieImpl::LevelInfo * GetDataPtr();
	void PushBack(const Scaleform::GFx::MovieImpl::LevelInfo &);
	void PopBack(unsigned long long);
	Scaleform::GFx::MovieImpl::LevelInfo & PushDefault();
	Scaleform::GFx::MovieImpl::LevelInfo Pop();
	const Scaleform::GFx::MovieImpl::LevelInfo & Front();
	Scaleform::GFx::MovieImpl::LevelInfo & Front();
	const Scaleform::GFx::MovieImpl::LevelInfo & Back();
	Scaleform::GFx::MovieImpl::LevelInfo & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::MovieImpl::LevelInfo &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::MovieImpl::LevelInfo &);
	void Append(const Scaleform::GFx::MovieImpl::LevelInfo *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::DisplayList::DepthToIndexMapElem &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::DisplayList::DepthToIndexMapElem &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::DisplayList::DepthToIndexMapElem &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::DisplayList::DepthToIndexMapElem &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::DisplayList::DepthToIndexMapElem & At(unsigned long long);
	Scaleform::GFx::DisplayList::DepthToIndexMapElem & At(unsigned long long);
	Scaleform::GFx::DisplayList::DepthToIndexMapElem ValueAt(unsigned long long);
	const Scaleform::GFx::DisplayList::DepthToIndexMapElem & operator[](unsigned long long);
	Scaleform::GFx::DisplayList::DepthToIndexMapElem & operator[](unsigned long long);
	Scaleform::GFx::DisplayList::DepthToIndexMapElem * GetDataPtr();
	const Scaleform::GFx::DisplayList::DepthToIndexMapElem * GetDataPtr();
	void PushBack(const Scaleform::GFx::DisplayList::DepthToIndexMapElem &);
	void PopBack(unsigned long long);
	Scaleform::GFx::DisplayList::DepthToIndexMapElem & PushDefault();
	Scaleform::GFx::DisplayList::DepthToIndexMapElem Pop();
	const Scaleform::GFx::DisplayList::DepthToIndexMapElem & Front();
	Scaleform::GFx::DisplayList::DepthToIndexMapElem & Front();
	const Scaleform::GFx::DisplayList::DepthToIndexMapElem & Back();
	Scaleform::GFx::DisplayList::DepthToIndexMapElem & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::DisplayList::DepthToIndexMapElem &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::DisplayList::DepthToIndexMapElem &);
	void Append(const Scaleform::GFx::DisplayList::DepthToIndexMapElem *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::DisplayList::DepthToIndexMapElem,Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DepthToIndexMapElem,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::DisplayList::DisplayEntry,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::DisplayList::DisplayEntry>
{
};
struct Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::MovieImpl::LevelInfo &);
	void Append(const Scaleform::GFx::MovieImpl::LevelInfo *, unsigned long long);
	~ArrayData<Scaleform::GFx::MovieImpl::LevelInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::StaticTextRecord ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(Scaleform::GFx::StaticTextRecord * &);
	void Append(Scaleform::GFx::StaticTextRecord * *, unsigned long long);
	~ArrayData<Scaleform::GFx::StaticTextRecord *,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Point<float> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Point<float> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Point<float> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Point<float> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::Point<float> & At(unsigned long long);
	Scaleform::Render::Point<float> & At(unsigned long long);
	Scaleform::Render::Point<float> ValueAt(unsigned long long);
	const Scaleform::Render::Point<float> & operator[](unsigned long long);
	Scaleform::Render::Point<float> & operator[](unsigned long long);
	Scaleform::Render::Point<float> * GetDataPtr();
	const Scaleform::Render::Point<float> * GetDataPtr();
	void PushBack(const Scaleform::Render::Point<float> &);
	void PopBack(unsigned long long);
	Scaleform::Render::Point<float> & PushDefault();
	Scaleform::Render::Point<float> Pop();
	const Scaleform::Render::Point<float> & Front();
	Scaleform::Render::Point<float> & Front();
	const Scaleform::Render::Point<float> & Back();
	Scaleform::Render::Point<float> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::Point<float> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::Point<float> &);
	void Append(const Scaleform::Render::Point<float> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::Point<float>,Scaleform::AllocatorLH<Scaleform::Render::Point<float>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord *,258> :
	Scaleform::AllocatorBaseLH<258>,
	Scaleform::ConstructorMov<Scaleform::GFx::StaticTextRecord *>
{
};
struct Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> *, unsigned long long);
	~ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::Button::CharToRec &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::Button::CharToRec &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::Button::CharToRec &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::Button::CharToRec &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::Button::CharToRec & At(unsigned long long);
	Scaleform::GFx::Button::CharToRec & At(unsigned long long);
	Scaleform::GFx::Button::CharToRec ValueAt(unsigned long long);
	const Scaleform::GFx::Button::CharToRec & operator[](unsigned long long);
	Scaleform::GFx::Button::CharToRec & operator[](unsigned long long);
	Scaleform::GFx::Button::CharToRec * GetDataPtr();
	const Scaleform::GFx::Button::CharToRec * GetDataPtr();
	void PushBack(const Scaleform::GFx::Button::CharToRec &);
	void PopBack(unsigned long long);
	Scaleform::GFx::Button::CharToRec & PushDefault();
	Scaleform::GFx::Button::CharToRec Pop();
	const Scaleform::GFx::Button::CharToRec & Front();
	Scaleform::GFx::Button::CharToRec & Front();
	const Scaleform::GFx::Button::CharToRec & Back();
	Scaleform::GFx::Button::CharToRec & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::Button::CharToRec &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::Button::CharToRec &);
	void Append(const Scaleform::GFx::Button::CharToRec *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::ButtonRecord &);
	void Append(const Scaleform::GFx::ButtonRecord *, unsigned long long);
	~ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::Button::CharToRec &);
	void Append(const Scaleform::GFx::Button::CharToRec *, unsigned long long);
	~ArrayData<Scaleform::GFx::Button::CharToRec,Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::ButtonRecord &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::ButtonRecord &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::ButtonRecord &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::ButtonRecord &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::ButtonRecord & At(unsigned long long);
	Scaleform::GFx::ButtonRecord & At(unsigned long long);
	Scaleform::GFx::ButtonRecord ValueAt(unsigned long long);
	const Scaleform::GFx::ButtonRecord & operator[](unsigned long long);
	Scaleform::GFx::ButtonRecord & operator[](unsigned long long);
	Scaleform::GFx::ButtonRecord * GetDataPtr();
	const Scaleform::GFx::ButtonRecord * GetDataPtr();
	void PushBack(const Scaleform::GFx::ButtonRecord &);
	void PopBack(unsigned long long);
	Scaleform::GFx::ButtonRecord & PushDefault();
	Scaleform::GFx::ButtonRecord Pop();
	const Scaleform::GFx::ButtonRecord & Front();
	Scaleform::GFx::ButtonRecord & Front();
	const Scaleform::GFx::ButtonRecord & Back();
	Scaleform::GFx::ButtonRecord & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::ButtonRecord &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::ButtonRecord &);
	void Append(const Scaleform::GFx::ButtonRecord *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ButtonRecord,Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::Button::CharToRec,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::Button::CharToRec>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> & PushDefault();
	Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> Pop();
	const Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> & Front();
	Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> & Front();
	const Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> & Back();
	Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::ButtonRecord,258> :
	Scaleform::AllocatorBaseLH<258>,
	Scaleform::ConstructorMov<Scaleform::GFx::ButtonRecord>
{
};
struct Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase>,258> :
	Scaleform::AllocatorBaseLH<258>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::GFx::ButtonActionBase> >
{
};
struct Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc>,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::AmpMovieObjectDesc> >
{
};
struct Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase>,261> :
	Scaleform::AllocatorBaseLH<261>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::GFx::ShapeDataBase> >
{
};
struct Scaleform::AllocatorLH<Scaleform::GFx::FontData::AdvanceEntry,261> :
	Scaleform::AllocatorBaseLH<261>,
	Scaleform::ConstructorMov<Scaleform::GFx::FontData::AdvanceEntry>
{
};
struct Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject>,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::WeakPtr<Scaleform::GFx::InteractiveObject> >
{
};
struct Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::TimelineDef::Frame>
{
};
struct Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::MovieDataDef::SceneInfo &);
	void Append(const Scaleform::GFx::MovieDataDef::SceneInfo *, unsigned long long);
	~ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl>,264> :
	Scaleform::AllocatorBaseLH<264>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::GFx::MovieDefImpl> >
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::ImagePackerImpl::InputImage &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::ImagePackerImpl::InputImage &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::ImagePackerImpl::InputImage &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::ImagePackerImpl::InputImage &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::ImagePackerImpl::InputImage & At(unsigned long long);
	Scaleform::GFx::ImagePackerImpl::InputImage & At(unsigned long long);
	Scaleform::GFx::ImagePackerImpl::InputImage ValueAt(unsigned long long);
	const Scaleform::GFx::ImagePackerImpl::InputImage & operator[](unsigned long long);
	Scaleform::GFx::ImagePackerImpl::InputImage & operator[](unsigned long long);
	Scaleform::GFx::ImagePackerImpl::InputImage * GetDataPtr();
	const Scaleform::GFx::ImagePackerImpl::InputImage * GetDataPtr();
	void PushBack(const Scaleform::GFx::ImagePackerImpl::InputImage &);
	void PopBack(unsigned long long);
	Scaleform::GFx::ImagePackerImpl::InputImage & PushDefault();
	Scaleform::GFx::ImagePackerImpl::InputImage Pop();
	const Scaleform::GFx::ImagePackerImpl::InputImage & Front();
	Scaleform::GFx::ImagePackerImpl::InputImage & Front();
	const Scaleform::GFx::ImagePackerImpl::InputImage & Back();
	Scaleform::GFx::ImagePackerImpl::InputImage & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::ImagePackerImpl::InputImage &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::ImagePackerImpl::InputImage &);
	void Append(const Scaleform::GFx::ImagePackerImpl::InputImage *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::ImagePackerImpl::InputImage>
{
};
struct Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::MovieDataDef::SceneInfo>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::MovieDataDef::SceneInfo &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::MovieDataDef::SceneInfo &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::MovieDataDef::SceneInfo &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::MovieDataDef::SceneInfo &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::MovieDataDef::SceneInfo & At(unsigned long long);
	Scaleform::GFx::MovieDataDef::SceneInfo & At(unsigned long long);
	Scaleform::GFx::MovieDataDef::SceneInfo ValueAt(unsigned long long);
	const Scaleform::GFx::MovieDataDef::SceneInfo & operator[](unsigned long long);
	Scaleform::GFx::MovieDataDef::SceneInfo & operator[](unsigned long long);
	Scaleform::GFx::MovieDataDef::SceneInfo * GetDataPtr();
	const Scaleform::GFx::MovieDataDef::SceneInfo * GetDataPtr();
	void PushBack(const Scaleform::GFx::MovieDataDef::SceneInfo &);
	void PopBack(unsigned long long);
	Scaleform::GFx::MovieDataDef::SceneInfo & PushDefault();
	Scaleform::GFx::MovieDataDef::SceneInfo Pop();
	const Scaleform::GFx::MovieDataDef::SceneInfo & Front();
	Scaleform::GFx::MovieDataDef::SceneInfo & Front();
	const Scaleform::GFx::MovieDataDef::SceneInfo & Back();
	Scaleform::GFx::MovieDataDef::SceneInfo & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::MovieDataDef::SceneInfo &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::MovieDataDef::SceneInfo &);
	void Append(const Scaleform::GFx::MovieDataDef::SceneInfo *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::MovieDataDef::SceneInfo,Scaleform::AllocatorLH<Scaleform::GFx::MovieDataDef::SceneInfo,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::ImagePackerImpl::InputImage &);
	void Append(const Scaleform::GFx::ImagePackerImpl::InputImage *, unsigned long long);
	~ArrayData<Scaleform::GFx::ImagePackerImpl::InputImage,Scaleform::AllocatorLH<Scaleform::GFx::ImagePackerImpl::InputImage,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::LevelInfo,327> :
	Scaleform::AllocatorBaseLH<327>,
	Scaleform::ConstructorMov<Scaleform::GFx::MovieImpl::LevelInfo>
{
};
struct Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::FontDesc,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::MovieImpl::FontDesc>
{
};
struct Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327> :
	Scaleform::AllocatorBaseLH<327>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::GFx::InteractiveObject> >
{
};
struct Scaleform::AllocatorLH<Scaleform::GFx::MovieImpl::IndirectTransPair,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::MovieImpl::IndirectTransPair>
{
};
struct Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf>,327> :
	Scaleform::AllocatorBaseLH<327>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::GFx::ASIntervalTimerIntf> >
{
};
struct Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::StaticTextSnapshotData::CharRef &);
	void Append(const Scaleform::GFx::StaticTextSnapshotData::CharRef *, unsigned long long);
	~ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::StaticTextSnapshotData::CharRef &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::StaticTextSnapshotData::CharRef &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::StaticTextSnapshotData::CharRef &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::StaticTextSnapshotData::CharRef &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::StaticTextSnapshotData::CharRef & At(unsigned long long);
	Scaleform::GFx::StaticTextSnapshotData::CharRef & At(unsigned long long);
	Scaleform::GFx::StaticTextSnapshotData::CharRef ValueAt(unsigned long long);
	const Scaleform::GFx::StaticTextSnapshotData::CharRef & operator[](unsigned long long);
	Scaleform::GFx::StaticTextSnapshotData::CharRef & operator[](unsigned long long);
	Scaleform::GFx::StaticTextSnapshotData::CharRef * GetDataPtr();
	const Scaleform::GFx::StaticTextSnapshotData::CharRef * GetDataPtr();
	void PushBack(const Scaleform::GFx::StaticTextSnapshotData::CharRef &);
	void PopBack(unsigned long long);
	Scaleform::GFx::StaticTextSnapshotData::CharRef & PushDefault();
	Scaleform::GFx::StaticTextSnapshotData::CharRef Pop();
	const Scaleform::GFx::StaticTextSnapshotData::CharRef & Front();
	Scaleform::GFx::StaticTextSnapshotData::CharRef & Front();
	const Scaleform::GFx::StaticTextSnapshotData::CharRef & Back();
	Scaleform::GFx::StaticTextSnapshotData::CharRef & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::StaticTextSnapshotData::CharRef &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::StaticTextSnapshotData::CharRef &);
	void Append(const Scaleform::GFx::StaticTextSnapshotData::CharRef *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::StaticTextSnapshotData::CharRef,Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::TimelineDef::Frame,264> :
	Scaleform::AllocatorBaseLH<264>,
	Scaleform::ConstructorMov<Scaleform::GFx::TimelineDef::Frame>
{
};
struct Scaleform::AllocatorLH<Scaleform::GFx::StaticTextRecord::GlyphEntry,258> :
	Scaleform::AllocatorBaseLH<258>,
	Scaleform::ConstructorMov<Scaleform::GFx::StaticTextRecord::GlyphEntry>
{
};
struct Scaleform::AllocatorLH<Scaleform::GFx::StaticTextSnapshotData::CharRef,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::StaticTextSnapshotData::CharRef>
{
};
struct Scaleform::AllocatorLH<Scaleform::Render::Text::LineBuffer::Line *,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::Text::LineBuffer::Line *>
{
};
struct Scaleform::AllocatorLH<wchar_t,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<wchar_t>
{
};
struct Scaleform::AllocatorLH<char,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<char>
{
};
struct Scaleform::AllocatorLH<Scaleform::Render::ExternalFontWinAPI::GlyphType,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::ExternalFontWinAPI::GlyphType>
{
};
struct Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify>,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::Render::ContextImpl::ContextCaptureNotify> >
{
};
struct Scaleform::AllocatorLH<Scaleform::Render::TreeRoot *,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::TreeRoot *>
{
};
struct Scaleform::AllocatorLH<Scaleform::Render::HAL::FilterStackEntry,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::HAL::FilterStackEntry>
{
};
struct Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::MemItem> &);
	void Append(const Scaleform::Ptr<Scaleform::MemItem> *, unsigned long long);
	~ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH<Scaleform::Render::UserDataState::Data const *,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::UserDataState::Data const *>
{
};
struct Scaleform::AllocatorLH<Scaleform::Render::Matrix4x4<float>,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::Matrix4x4<float> >
{
};
struct Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::MemItem> >
{
};
struct Scaleform::AllocatorLH<Scaleform::Render::HAL::RenderTargetEntry,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::HAL::RenderTargetEntry>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::MemItem> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::MemItem> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::MemItem> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::MemItem> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::MemItem> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::MemItem> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::MemItem> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::MemItem> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::MemItem> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::MemItem> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::MemItem> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::MemItem> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::MemItem> & PushDefault();
	Scaleform::Ptr<Scaleform::MemItem> Pop();
	const Scaleform::Ptr<Scaleform::MemItem> & Front();
	Scaleform::Ptr<Scaleform::MemItem> & Front();
	const Scaleform::Ptr<Scaleform::MemItem> & Back();
	Scaleform::Ptr<Scaleform::MemItem> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::MemItem> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::MemItem> &);
	void Append(const Scaleform::Ptr<Scaleform::MemItem> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::MemItem>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::MemItem>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<Scaleform::Render::Matrix3x4<float>,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::Matrix3x4<float> >
{
};
struct Scaleform::AllocatorLH<Scaleform::Render::TextureFormat *,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::TextureFormat *>
{
};
struct Scaleform::AllocatorLH<unsigned __int64,72> :
	Scaleform::AllocatorBaseLH<72>,
	Scaleform::ConstructorMov<unsigned __int64>
{
};
struct Scaleform::AllocatorLH<Scaleform::Render::Matrix2x4<float>,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::Matrix2x4<float> >
{
};
struct Scaleform::AllocatorLH<Scaleform::Render::Primitive::MeshEntry,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::Primitive::MeshEntry>
{
};
struct Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::Render::Image>,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::Render::Image> >
{
};
struct Scaleform::AllocatorLH<Scaleform::Render::ComplexMesh::FillRecord,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::ComplexMesh::FillRecord>
{
};
struct Scaleform::AllocatorLH<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::ComplexPrimitiveBundle::InstanceEntry>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> * GetDataPtr();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> & PushDefault();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> Pop();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> & Front();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> & Front();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> & Back();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> * GetDataPtr();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> & PushDefault();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> Pop();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> & Front();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> & Front();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> & Back();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::Value &);
	void Append(const Scaleform::GFx::AS3::Value *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> *, unsigned long long);
	~ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::Multiname &);
	void Append(const Scaleform::GFx::AS3::Multiname *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Abc::Multiname &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Abc::Multiname &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Abc::Multiname &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Abc::Multiname &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::Abc::Multiname & At(unsigned long long);
	Scaleform::GFx::AS3::Abc::Multiname & At(unsigned long long);
	Scaleform::GFx::AS3::Abc::Multiname ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::Abc::Multiname & operator[](unsigned long long);
	Scaleform::GFx::AS3::Abc::Multiname & operator[](unsigned long long);
	Scaleform::GFx::AS3::Abc::Multiname * GetDataPtr();
	const Scaleform::GFx::AS3::Abc::Multiname * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::Abc::Multiname &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::Abc::Multiname & PushDefault();
	Scaleform::GFx::AS3::Abc::Multiname Pop();
	const Scaleform::GFx::AS3::Abc::Multiname & Front();
	Scaleform::GFx::AS3::Abc::Multiname & Front();
	const Scaleform::GFx::AS3::Abc::Multiname & Back();
	Scaleform::GFx::AS3::Abc::Multiname & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::Abc::Multiname &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::Abc::Multiname &);
	void Append(const Scaleform::GFx::AS3::Abc::Multiname *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::Abc::NamespaceInfo &);
	void Append(const Scaleform::GFx::AS3::Abc::NamespaceInfo *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> * GetDataPtr();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> & PushDefault();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> Pop();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> & Front();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> & Front();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> & Back();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::AS3::Instances::fl::GlobalObject ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(Scaleform::GFx::AS3::Instances::fl::GlobalObject * &);
	void Append(Scaleform::GFx::AS3::Instances::fl::GlobalObject * *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> &);
	void Append(const Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> *, unsigned long long);
	~ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & PushDefault();
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> Pop();
	const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & Front();
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & Front();
	const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & Back();
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Value &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Value &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Value &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Value &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::Value & At(unsigned long long);
	Scaleform::GFx::AS3::Value & At(unsigned long long);
	Scaleform::GFx::AS3::Value ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::Value & operator[](unsigned long long);
	Scaleform::GFx::AS3::Value & operator[](unsigned long long);
	Scaleform::GFx::AS3::Value * GetDataPtr();
	const Scaleform::GFx::AS3::Value * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::Value &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::Value & PushDefault();
	Scaleform::GFx::AS3::Value Pop();
	const Scaleform::GFx::AS3::Value & Front();
	Scaleform::GFx::AS3::Value & Front();
	const Scaleform::GFx::AS3::Value & Back();
	Scaleform::GFx::AS3::Value & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::Value &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::Value &);
	void Append(const Scaleform::GFx::AS3::Value *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340> :
	Scaleform::AllocatorBaseLH<340>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::Abc::NamespaceInfo>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener & At(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener & At(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener & operator[](unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener & operator[](unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener * GetDataPtr();
	const Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener & PushDefault();
	Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener Pop();
	const Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener & Front();
	Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener & Front();
	const Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener & Back();
	Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener &);
	void Append(const Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::Abc::Multiname &);
	void Append(const Scaleform::GFx::AS3::Abc::Multiname *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::Abc::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::Slots::Pair &);
	void Append(const Scaleform::GFx::AS3::Slots::Pair *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::Abc::StringView &);
	void Append(const Scaleform::GFx::AS3::Abc::StringView *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::VMExceptionInfo &);
	void Append(const Scaleform::GFx::AS3::VMExceptionInfo *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340> :
	Scaleform::AllocatorBaseLH<340>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::Abc::StringView>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Abc::StringView &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Abc::StringView &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Abc::StringView &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Abc::StringView &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::Abc::StringView & At(unsigned long long);
	Scaleform::GFx::AS3::Abc::StringView & At(unsigned long long);
	Scaleform::GFx::AS3::Abc::StringView ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::Abc::StringView & operator[](unsigned long long);
	Scaleform::GFx::AS3::Abc::StringView & operator[](unsigned long long);
	Scaleform::GFx::AS3::Abc::StringView * GetDataPtr();
	const Scaleform::GFx::AS3::Abc::StringView * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::Abc::StringView &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::Abc::StringView & PushDefault();
	Scaleform::GFx::AS3::Abc::StringView Pop();
	const Scaleform::GFx::AS3::Abc::StringView & Front();
	Scaleform::GFx::AS3::Abc::StringView & Front();
	const Scaleform::GFx::AS3::Abc::StringView & Back();
	Scaleform::GFx::AS3::Abc::StringView & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::Abc::StringView &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::Abc::StringView &);
	void Append(const Scaleform::GFx::AS3::Abc::StringView *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::StringView,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::StringView,340>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Abc::NamespaceInfo &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Abc::NamespaceInfo &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Abc::NamespaceInfo &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Abc::NamespaceInfo &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::Abc::NamespaceInfo & At(unsigned long long);
	Scaleform::GFx::AS3::Abc::NamespaceInfo & At(unsigned long long);
	Scaleform::GFx::AS3::Abc::NamespaceInfo ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::Abc::NamespaceInfo & operator[](unsigned long long);
	Scaleform::GFx::AS3::Abc::NamespaceInfo & operator[](unsigned long long);
	Scaleform::GFx::AS3::Abc::NamespaceInfo * GetDataPtr();
	const Scaleform::GFx::AS3::Abc::NamespaceInfo * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::Abc::NamespaceInfo &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::Abc::NamespaceInfo & PushDefault();
	Scaleform::GFx::AS3::Abc::NamespaceInfo Pop();
	const Scaleform::GFx::AS3::Abc::NamespaceInfo & Front();
	Scaleform::GFx::AS3::Abc::NamespaceInfo & Front();
	const Scaleform::GFx::AS3::Abc::NamespaceInfo & Back();
	Scaleform::GFx::AS3::Abc::NamespaceInfo & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::Abc::NamespaceInfo &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::Abc::NamespaceInfo &);
	void Append(const Scaleform::GFx::AS3::Abc::NamespaceInfo *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::NamespaceInfo,340>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Multiname &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Multiname &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Multiname &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Multiname &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::Multiname & At(unsigned long long);
	Scaleform::GFx::AS3::Multiname & At(unsigned long long);
	Scaleform::GFx::AS3::Multiname ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::Multiname & operator[](unsigned long long);
	Scaleform::GFx::AS3::Multiname & operator[](unsigned long long);
	Scaleform::GFx::AS3::Multiname * GetDataPtr();
	const Scaleform::GFx::AS3::Multiname * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::Multiname &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::Multiname & PushDefault();
	Scaleform::GFx::AS3::Multiname Pop();
	const Scaleform::GFx::AS3::Multiname & Front();
	Scaleform::GFx::AS3::Multiname & Front();
	const Scaleform::GFx::AS3::Multiname & Back();
	Scaleform::GFx::AS3::Multiname & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::Multiname &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::Multiname &);
	void Append(const Scaleform::GFx::AS3::Multiname *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Multiname,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> >
{
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener &);
	void Append(const Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_events::EventDispatcher::Listener,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::VMExceptionTypeInfo &);
	void Append(const Scaleform::GFx::AS3::VMExceptionTypeInfo *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> >
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Slots::Pair &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Slots::Pair &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Slots::Pair &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Slots::Pair &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::Slots::Pair & At(unsigned long long);
	Scaleform::GFx::AS3::Slots::Pair & At(unsigned long long);
	Scaleform::GFx::AS3::Slots::Pair ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::Slots::Pair & operator[](unsigned long long);
	Scaleform::GFx::AS3::Slots::Pair & operator[](unsigned long long);
	Scaleform::GFx::AS3::Slots::Pair * GetDataPtr();
	const Scaleform::GFx::AS3::Slots::Pair * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::Slots::Pair &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::Slots::Pair & PushDefault();
	Scaleform::GFx::AS3::Slots::Pair Pop();
	const Scaleform::GFx::AS3::Slots::Pair & Front();
	Scaleform::GFx::AS3::Slots::Pair & Front();
	const Scaleform::GFx::AS3::Slots::Pair & Back();
	Scaleform::GFx::AS3::Slots::Pair & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::Slots::Pair &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::Slots::Pair &);
	void Append(const Scaleform::GFx::AS3::Slots::Pair *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Slots::Pair,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341> :
	Scaleform::AllocatorBaseLH<341>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> >
{
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::VMMethodBodyInfo &);
	void Append(const Scaleform::GFx::AS3::VMMethodBodyInfo *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> & At(unsigned long long);
	Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> & At(unsigned long long);
	Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> ValueAt(unsigned long long);
	const Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> & operator[](unsigned long long);
	Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> & operator[](unsigned long long);
	Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> * GetDataPtr();
	const Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> * GetDataPtr();
	void PushBack(const Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> &);
	void PopBack(unsigned long long);
	Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> & PushDefault();
	Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> Pop();
	const Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> & Front();
	Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> & Front();
	const Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> & Back();
	Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> &);
	void Append(const Scaleform::WeakPtr<Scaleform::GFx::DisplayObject> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,Scaleform::AllocatorLH<Scaleform::WeakPtr<Scaleform::GFx::DisplayObject>,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::VMExceptionInfo &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::VMExceptionInfo &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::VMExceptionInfo &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::VMExceptionInfo &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::VMExceptionInfo & At(unsigned long long);
	Scaleform::GFx::AS3::VMExceptionInfo & At(unsigned long long);
	Scaleform::GFx::AS3::VMExceptionInfo ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::VMExceptionInfo & operator[](unsigned long long);
	Scaleform::GFx::AS3::VMExceptionInfo & operator[](unsigned long long);
	Scaleform::GFx::AS3::VMExceptionInfo * GetDataPtr();
	const Scaleform::GFx::AS3::VMExceptionInfo * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::VMExceptionInfo &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::VMExceptionInfo & PushDefault();
	Scaleform::GFx::AS3::VMExceptionInfo Pop();
	const Scaleform::GFx::AS3::VMExceptionInfo & Front();
	Scaleform::GFx::AS3::VMExceptionInfo & Front();
	const Scaleform::GFx::AS3::VMExceptionInfo & Back();
	Scaleform::GFx::AS3::VMExceptionInfo & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::VMExceptionInfo &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::VMExceptionInfo &);
	void Append(const Scaleform::GFx::AS3::VMExceptionInfo *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::Multiname,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::Multiname>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::VMMethodBodyInfo &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::VMMethodBodyInfo &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::VMMethodBodyInfo &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::VMMethodBodyInfo &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::VMMethodBodyInfo & At(unsigned long long);
	Scaleform::GFx::AS3::VMMethodBodyInfo & At(unsigned long long);
	Scaleform::GFx::AS3::VMMethodBodyInfo ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::VMMethodBodyInfo & operator[](unsigned long long);
	Scaleform::GFx::AS3::VMMethodBodyInfo & operator[](unsigned long long);
	Scaleform::GFx::AS3::VMMethodBodyInfo * GetDataPtr();
	const Scaleform::GFx::AS3::VMMethodBodyInfo * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::VMMethodBodyInfo &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::VMMethodBodyInfo & PushDefault();
	Scaleform::GFx::AS3::VMMethodBodyInfo Pop();
	const Scaleform::GFx::AS3::VMMethodBodyInfo & Front();
	Scaleform::GFx::AS3::VMMethodBodyInfo & Front();
	const Scaleform::GFx::AS3::VMMethodBodyInfo & Back();
	Scaleform::GFx::AS3::VMMethodBodyInfo & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::VMMethodBodyInfo &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::VMMethodBodyInfo &);
	void Append(const Scaleform::GFx::AS3::VMMethodBodyInfo *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMMethodBodyInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> * GetDataPtr();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & PushDefault();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> Pop();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & Front();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & Front();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & Back();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef Scaleform::GFx::AS3::Instances::fl::GlobalObject ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::AS3::Instances::fl::GlobalObject * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::AS3::Instances::fl::GlobalObject * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::AS3::Instances::fl::GlobalObject * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::AS3::Instances::fl::GlobalObject * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl::GlobalObject * & At(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl::GlobalObject * & At(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl::GlobalObject * ValueAt(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl::GlobalObject * & operator[](unsigned long long);
	Scaleform::GFx::AS3::Instances::fl::GlobalObject * & operator[](unsigned long long);
	Scaleform::GFx::AS3::Instances::fl::GlobalObject * * GetDataPtr();
	Scaleform::GFx::AS3::Instances::fl::GlobalObject * * GetDataPtr();
	void PushBack(Scaleform::GFx::AS3::Instances::fl::GlobalObject * &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl::GlobalObject * & PushDefault();
	Scaleform::GFx::AS3::Instances::fl::GlobalObject * Pop();
	Scaleform::GFx::AS3::Instances::fl::GlobalObject * & Front();
	Scaleform::GFx::AS3::Instances::fl::GlobalObject * & Front();
	Scaleform::GFx::AS3::Instances::fl::GlobalObject * & Back();
	Scaleform::GFx::AS3::Instances::fl::GlobalObject * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, Scaleform::GFx::AS3::Instances::fl::GlobalObject * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, Scaleform::GFx::AS3::Instances::fl::GlobalObject * &);
	void Append(Scaleform::GFx::AS3::Instances::fl::GlobalObject * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> * GetDataPtr();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> & PushDefault();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> Pop();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> & Front();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> & Front();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> & Back();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,341>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl::GlobalObject *,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::Instances::fl::GlobalObject *>
{
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,323> :
	Scaleform::AllocatorBaseLH<323>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::GFx::InteractiveObject> >
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> * GetDataPtr();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> & PushDefault();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> Pop();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> & Front();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> & Front();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> & Back();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::VMExceptionTypeInfo &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::VMExceptionTypeInfo &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::VMExceptionTypeInfo &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::VMExceptionTypeInfo &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::VMExceptionTypeInfo & At(unsigned long long);
	Scaleform::GFx::AS3::VMExceptionTypeInfo & At(unsigned long long);
	Scaleform::GFx::AS3::VMExceptionTypeInfo ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::VMExceptionTypeInfo & operator[](unsigned long long);
	Scaleform::GFx::AS3::VMExceptionTypeInfo & operator[](unsigned long long);
	Scaleform::GFx::AS3::VMExceptionTypeInfo * GetDataPtr();
	const Scaleform::GFx::AS3::VMExceptionTypeInfo * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::VMExceptionTypeInfo &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::VMExceptionTypeInfo & PushDefault();
	Scaleform::GFx::AS3::VMExceptionTypeInfo Pop();
	const Scaleform::GFx::AS3::VMExceptionTypeInfo & Front();
	Scaleform::GFx::AS3::VMExceptionTypeInfo & Front();
	const Scaleform::GFx::AS3::VMExceptionTypeInfo & Back();
	Scaleform::GFx::AS3::VMExceptionTypeInfo & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::VMExceptionTypeInfo &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::VMExceptionTypeInfo &);
	void Append(const Scaleform::GFx::AS3::VMExceptionTypeInfo *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMExceptionTypeInfo,Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> * GetDataPtr();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & PushDefault();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> Pop();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & Front();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & Front();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & Back();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::Abc::Multiname,340> :
	Scaleform::AllocatorBaseLH<340>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::Abc::Multiname>
{
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> * GetDataPtr();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> & PushDefault();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> Pop();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> & Front();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> & Front();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> & Back();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> * GetDataPtr();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> & PushDefault();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> Pop();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> & Front();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> & Front();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> & Back();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::Value>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Value &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Value &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Value &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Value &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::Value & At(unsigned long long);
	Scaleform::GFx::AS3::Value & At(unsigned long long);
	Scaleform::GFx::AS3::Value ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::Value & operator[](unsigned long long);
	Scaleform::GFx::AS3::Value & operator[](unsigned long long);
	Scaleform::GFx::AS3::Value * GetDataPtr();
	const Scaleform::GFx::AS3::Value * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::Value &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::Value & PushDefault();
	Scaleform::GFx::AS3::Value Pop();
	const Scaleform::GFx::AS3::Value & Front();
	Scaleform::GFx::AS3::Value & Front();
	const Scaleform::GFx::AS3::Value & Back();
	Scaleform::GFx::AS3::Value & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::Value &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::Value &);
	void Append(const Scaleform::GFx::AS3::Value *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::Value &);
	void Append(const Scaleform::GFx::AS3::Value *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::Value,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::Value,331> :
	Scaleform::AllocatorBaseLH<331>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::Value>
{
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> >
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> * GetDataPtr();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> & PushDefault();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> Pop();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> & Front();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> & Front();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> & Back();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const unsigned char &);
	void Append(const unsigned char *, unsigned long long);
	~ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits>,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::ClassTraits::Traits> >
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> >
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned char &, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned char &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> >(const unsigned char &, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> >(const unsigned char &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const unsigned char & At(unsigned long long);
	unsigned char & At(unsigned long long);
	unsigned char ValueAt(unsigned long long);
	const unsigned char & operator[](unsigned long long);
	unsigned char & operator[](unsigned long long);
	unsigned char * GetDataPtr();
	const unsigned char * GetDataPtr();
	void PushBack(const unsigned char &);
	void PopBack(unsigned long long);
	unsigned char & PushDefault();
	unsigned char Pop();
	const unsigned char & Front();
	unsigned char & Front();
	const unsigned char & Back();
	unsigned char & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const unsigned char &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const unsigned char &);
	void Append(const unsigned char *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,328>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<unsigned char,328> :
	Scaleform::AllocatorBaseLH<328>,
	Scaleform::ConstructorMov<unsigned char>
{
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> >
{
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr>,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XMLAttr> >
{
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionTypeInfo,341> :
	Scaleform::AllocatorBaseLH<341>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::VMExceptionTypeInfo>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > >
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > >(Scaleform::MemoryHeap *, const unsigned char &, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > >(Scaleform::MemoryHeap *, const unsigned char &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > >(const unsigned char &, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > >(const unsigned char &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > >(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > > &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > >(long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > >();
	Scaleform::ArrayConstPolicy<0,4,1> * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayConstPolicy<0,4,1> &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const unsigned char & At(unsigned long long);
	unsigned char & At(unsigned long long);
	unsigned char ValueAt(unsigned long long);
	const unsigned char & operator[](unsigned long long);
	unsigned char & operator[](unsigned long long);
	unsigned char * GetDataPtr();
	const unsigned char * GetDataPtr();
	void PushBack(const unsigned char &);
	void PopBack(unsigned long long);
	unsigned char & PushDefault();
	unsigned char Pop();
	const unsigned char & Front();
	unsigned char & Front();
	const unsigned char & Back();
	unsigned char & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const unsigned char &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const unsigned char &);
	void Append(const unsigned char *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * & At(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * & At(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * ValueAt(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * & operator[](unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * & operator[](unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * * GetDataPtr();
	Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * * GetDataPtr();
	void PushBack(Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * & PushDefault();
	Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * Pop();
	Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * & Front();
	Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * & Front();
	Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * & Back();
	Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * &);
	void Append(Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMMethodBodyInfo,346> :
	Scaleform::AllocatorBaseLH<346>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::VMMethodBodyInfo>
{
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet>,343> :
	Scaleform::AllocatorBaseLH<343>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::NamespaceSet> >
{
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode>,344> :
	Scaleform::AllocatorBaseLH<344>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::ASStringNode> >
{
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *>
{
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * &);
	void Append(Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH<unsigned char,327> :
	Scaleform::AllocatorBaseLH<327>,
	Scaleform::ConstructorMov<unsigned char>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * & At(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * & At(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * ValueAt(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * & operator[](unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * & operator[](unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * * GetDataPtr();
	Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * * GetDataPtr();
	void PushBack(Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * & PushDefault();
	Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * Pop();
	Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * & Front();
	Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * & Front();
	Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * & Back();
	Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * &);
	void Append(Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * & At(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * & At(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * ValueAt(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * & operator[](unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * & operator[](unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * * GetDataPtr();
	Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * * GetDataPtr();
	void PushBack(Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * & PushDefault();
	Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * Pop();
	Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * & Front();
	Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * & Front();
	Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * & Back();
	Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * &);
	void Append(Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * &);
	void Append(Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation * *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile>,341> :
	Scaleform::AllocatorBaseLH<341>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAbcFile> >
{
};
struct Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > :
	Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> >
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> >(const Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> > &);
	ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> >(long);
	ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> >();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const unsigned char &);
	void Append(const unsigned char *, unsigned long long);
	~ArrayData<unsigned char,Scaleform::AllocatorLH<unsigned char,327>,Scaleform::ArrayConstPolicy<0,4,1> >();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain>,329> :
	Scaleform::AllocatorBaseLH<329>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::VMAppDomain> >
{
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::VMExceptionInfo,341> :
	Scaleform::AllocatorBaseLH<341>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::VMExceptionInfo>
{
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * &);
	void Append(Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext * *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_external::ExtensionContext *,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::Instances::fl_sensors::Accelerometer *>
{
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::Slots::Pair,333> :
	Scaleform::AllocatorBaseLH<333>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::Slots::Pair>
{
};
struct Scaleform::AllocatorLH<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::Instances::fl_sensors::Geolocation *>
{
};
struct Scaleform::AllocatorLH<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry,67> :
	Scaleform::AllocatorBaseLH<67>,
	Scaleform::ConstructorMov<Scaleform::Render::GL::TextureManager::PendingTextureDestroyEntry>
{
};
struct Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const unsigned char &);
	void Append(const unsigned char *, unsigned long long);
	~ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> >
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned char &, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned char &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> >(const unsigned char &, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> >(const unsigned char &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const unsigned char & At(unsigned long long);
	unsigned char & At(unsigned long long);
	unsigned char ValueAt(unsigned long long);
	const unsigned char & operator[](unsigned long long);
	unsigned char & operator[](unsigned long long);
	unsigned char * GetDataPtr();
	const unsigned char * GetDataPtr();
	void PushBack(const unsigned char &);
	void PopBack(unsigned long long);
	unsigned char & PushDefault();
	unsigned char Pop();
	const unsigned char & Front();
	unsigned char & Front();
	const unsigned char & Back();
	unsigned char & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const unsigned char &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const unsigned char &);
	void Append(const unsigned char *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,74>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorPOD<Scaleform::Render::ShapeMeshProvider::DrawLayerType>
{
};
struct Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const unsigned char &);
	void Append(const unsigned char *, unsigned long long);
	~ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::ShapeMeshProvider::DrawLayerType &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::ShapeMeshProvider::DrawLayerType &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::ShapeMeshProvider::DrawLayerType &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::ShapeMeshProvider::DrawLayerType &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::ShapeMeshProvider::DrawLayerType & At(unsigned long long);
	Scaleform::Render::ShapeMeshProvider::DrawLayerType & At(unsigned long long);
	Scaleform::Render::ShapeMeshProvider::DrawLayerType ValueAt(unsigned long long);
	const Scaleform::Render::ShapeMeshProvider::DrawLayerType & operator[](unsigned long long);
	Scaleform::Render::ShapeMeshProvider::DrawLayerType & operator[](unsigned long long);
	Scaleform::Render::ShapeMeshProvider::DrawLayerType * GetDataPtr();
	const Scaleform::Render::ShapeMeshProvider::DrawLayerType * GetDataPtr();
	void PushBack(const Scaleform::Render::ShapeMeshProvider::DrawLayerType &);
	void PopBack(unsigned long long);
	Scaleform::Render::ShapeMeshProvider::DrawLayerType & PushDefault();
	Scaleform::Render::ShapeMeshProvider::DrawLayerType Pop();
	const Scaleform::Render::ShapeMeshProvider::DrawLayerType & Front();
	Scaleform::Render::ShapeMeshProvider::DrawLayerType & Front();
	const Scaleform::Render::ShapeMeshProvider::DrawLayerType & Back();
	Scaleform::Render::ShapeMeshProvider::DrawLayerType & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::ShapeMeshProvider::DrawLayerType &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::ShapeMeshProvider::DrawLayerType &);
	void Append(const Scaleform::Render::ShapeMeshProvider::DrawLayerType *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> >
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned char &, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned char &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> >(const unsigned char &, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> >(const unsigned char &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const unsigned char & At(unsigned long long);
	unsigned char & At(unsigned long long);
	unsigned char ValueAt(unsigned long long);
	const unsigned char & operator[](unsigned long long);
	unsigned char & operator[](unsigned long long);
	unsigned char * GetDataPtr();
	const unsigned char * GetDataPtr();
	void PushBack(const unsigned char &);
	void PopBack(unsigned long long);
	unsigned char & PushDefault();
	unsigned char Pop();
	const unsigned char & Front();
	unsigned char & Front();
	const unsigned char & Back();
	unsigned char & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const unsigned char &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const unsigned char &);
	void Append(const unsigned char *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef unsigned long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned long &, long);
	ArrayBase<Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned long &);
	ArrayBase<Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> >(const unsigned long &, long);
	ArrayBase<Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> >(const unsigned long &);
	ArrayBase<Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const unsigned long & At(unsigned long long);
	unsigned long & At(unsigned long long);
	unsigned long ValueAt(unsigned long long);
	const unsigned long & operator[](unsigned long long);
	unsigned long & operator[](unsigned long long);
	unsigned long * GetDataPtr();
	const unsigned long * GetDataPtr();
	void PushBack(const unsigned long &);
	void PopBack(unsigned long long);
	unsigned long & PushDefault();
	unsigned long Pop();
	const unsigned long & Front();
	unsigned long & Front();
	const unsigned long & Back();
	unsigned long & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const unsigned long &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const unsigned long &);
	void Append(const unsigned long *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH_POD<unsigned char,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorPOD<unsigned char>
{
};
struct Scaleform::AllocatorLH_POD<unsigned int,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorPOD<unsigned int>
{
};
struct Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const unsigned long &);
	void Append(const unsigned long *, unsigned long long);
	~ArrayData<unsigned int,Scaleform::AllocatorLH_POD<unsigned int,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned char &, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned char &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(const unsigned char &, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(const unsigned char &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const unsigned char & At(unsigned long long);
	unsigned char & At(unsigned long long);
	unsigned char ValueAt(unsigned long long);
	const unsigned char & operator[](unsigned long long);
	unsigned char & operator[](unsigned long long);
	unsigned char * GetDataPtr();
	const unsigned char * GetDataPtr();
	void PushBack(const unsigned char &);
	void PopBack(unsigned long long);
	unsigned char & PushDefault();
	unsigned char Pop();
	const unsigned char & Front();
	unsigned char & Front();
	const unsigned char & Back();
	unsigned char & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const unsigned char &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const unsigned char &);
	void Append(const unsigned char *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef float ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const float &);
	void Append(const float *, unsigned long long);
	~ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef float ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const float &, long);
	ArrayBase<Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const float &);
	ArrayBase<Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> >(const float &, long);
	ArrayBase<Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> >(const float &);
	ArrayBase<Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const float & At(unsigned long long);
	float & At(unsigned long long);
	float ValueAt(unsigned long long);
	const float & operator[](unsigned long long);
	float & operator[](unsigned long long);
	float * GetDataPtr();
	const float * GetDataPtr();
	void PushBack(const float &);
	void PopBack(unsigned long long);
	float & PushDefault();
	float Pop();
	const float & Front();
	float & Front();
	const float & Back();
	float & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const float &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const float &);
	void Append(const float *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<float,Scaleform::AllocatorLH_POD<float,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const unsigned char &);
	void Append(const unsigned char *, unsigned long long);
	~ArrayData<unsigned char,Scaleform::AllocatorLH_POD<unsigned char,75>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH_POD<unsigned char,75> :
	Scaleform::AllocatorBaseLH<75>,
	Scaleform::ConstructorPOD<unsigned char>
{
};
struct Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::ShapeMeshProvider::DrawLayerType &);
	void Append(const Scaleform::Render::ShapeMeshProvider::DrawLayerType *, unsigned long long);
	~ArrayData<Scaleform::Render::ShapeMeshProvider::DrawLayerType,Scaleform::AllocatorLH_POD<Scaleform::Render::ShapeMeshProvider::DrawLayerType,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH_POD<float,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorPOD<float>
{
};
struct Scaleform::AllocatorLH_POD<unsigned char,74> :
	Scaleform::AllocatorBaseLH<74>,
	Scaleform::ConstructorPOD<unsigned char>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> >
{
	typedef Scaleform::GFx::AS3::VMAbcFile ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::AS3::VMAbcFile * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::AS3::VMAbcFile * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::AS3::VMAbcFile * &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::AS3::VMAbcFile * &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	Scaleform::GFx::AS3::VMAbcFile * & At(unsigned long long);
	Scaleform::GFx::AS3::VMAbcFile * & At(unsigned long long);
	Scaleform::GFx::AS3::VMAbcFile * ValueAt(unsigned long long);
	Scaleform::GFx::AS3::VMAbcFile * & operator[](unsigned long long);
	Scaleform::GFx::AS3::VMAbcFile * & operator[](unsigned long long);
	Scaleform::GFx::AS3::VMAbcFile * * GetDataPtr();
	Scaleform::GFx::AS3::VMAbcFile * * GetDataPtr();
	void PushBack(Scaleform::GFx::AS3::VMAbcFile * &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::VMAbcFile * & PushDefault();
	Scaleform::GFx::AS3::VMAbcFile * Pop();
	Scaleform::GFx::AS3::VMAbcFile * & Front();
	Scaleform::GFx::AS3::VMAbcFile * & Front();
	Scaleform::GFx::AS3::VMAbcFile * & Back();
	Scaleform::GFx::AS3::VMAbcFile * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, Scaleform::GFx::AS3::VMAbcFile * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, Scaleform::GFx::AS3::VMAbcFile * &);
	void Append(Scaleform::GFx::AS3::VMAbcFile * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH_POD<long,339> :
	Scaleform::AllocatorBaseLH<339>,
	Scaleform::ConstructorPOD<long>
{
};
struct Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy>
{
	typedef const unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const unsigned char * &);
	void Append(const unsigned char * *, unsigned long long);
	~ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH_POD<long,340> :
	Scaleform::AllocatorBaseLH<340>,
	Scaleform::ConstructorPOD<long>
{
};
struct Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy>
{
	typedef long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const long &);
	void Append(const long *, unsigned long long);
	~ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::Abc::NamespaceSetInfo &);
	void Append(const Scaleform::GFx::AS3::Abc::NamespaceSetInfo *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> >
{
	typedef long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const long &, long);
	ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const long &);
	ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> >(const long &, long);
	ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> >(const long &);
	ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const long & At(unsigned long long);
	long & At(unsigned long long);
	long ValueAt(unsigned long long);
	const long & operator[](unsigned long long);
	long & operator[](unsigned long long);
	long * GetDataPtr();
	const long * GetDataPtr();
	void PushBack(const long &);
	void PopBack(unsigned long long);
	long & PushDefault();
	long Pop();
	const long & Front();
	long & Front();
	const long & Back();
	long & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const long &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const long &);
	void Append(const long *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,340>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> >
{
	typedef long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const long &, long);
	ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const long &);
	ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> >(const long &, long);
	ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> >(const long &);
	ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const long & At(unsigned long long);
	long & At(unsigned long long);
	long ValueAt(unsigned long long);
	const long & operator[](unsigned long long);
	long & operator[](unsigned long long);
	long * GetDataPtr();
	const long * GetDataPtr();
	void PushBack(const long &);
	void PopBack(unsigned long long);
	long & PushDefault();
	long Pop();
	const long & Front();
	long & Front();
	const long & Back();
	long & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const long &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const long &);
	void Append(const long *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> >
{
	typedef unsigned long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned long &, long);
	ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned long &);
	ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> >(const unsigned long &, long);
	ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> >(const unsigned long &);
	ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const unsigned long & At(unsigned long long);
	unsigned long & At(unsigned long long);
	unsigned long ValueAt(unsigned long long);
	const unsigned long & operator[](unsigned long long);
	unsigned long & operator[](unsigned long long);
	unsigned long * GetDataPtr();
	const unsigned long * GetDataPtr();
	void PushBack(const unsigned long &);
	void PopBack(unsigned long long);
	unsigned long & PushDefault();
	unsigned long Pop();
	const unsigned long & Front();
	unsigned long & Front();
	const unsigned long & Back();
	unsigned long & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const unsigned long &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const unsigned long &);
	void Append(const unsigned long *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::AS3::VMAbcFile ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(Scaleform::GFx::AS3::VMAbcFile * &);
	void Append(Scaleform::GFx::AS3::VMAbcFile * *, unsigned long long);
	~ArrayData<Scaleform::GFx::AS3::VMAbcFile *,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340> :
	Scaleform::AllocatorBaseLH<340>,
	Scaleform::ConstructorPOD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo>
{
};
struct Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned long long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const unsigned long long &);
	void Append(const unsigned long long *, unsigned long long);
	~ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const unsigned long &);
	void Append(const unsigned long *, unsigned long long);
	~ArrayData<unsigned long,Scaleform::AllocatorLH_POD<unsigned long,340>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> >
{
	typedef unsigned long long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned long long &, long);
	ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned long long &);
	ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> >(const unsigned long long &, long);
	ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> >(const unsigned long long &);
	ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const unsigned long long & At(unsigned long long);
	unsigned long long & At(unsigned long long);
	unsigned long long ValueAt(unsigned long long);
	const unsigned long long & operator[](unsigned long long);
	unsigned long long & operator[](unsigned long long);
	unsigned long long * GetDataPtr();
	const unsigned long long * GetDataPtr();
	void PushBack(const unsigned long long &);
	void PopBack(unsigned long long);
	unsigned long long & PushDefault();
	unsigned long long Pop();
	const unsigned long long & Front();
	unsigned long long & Front();
	const unsigned long long & Back();
	unsigned long long & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const unsigned long long &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const unsigned long long &);
	void Append(const unsigned long long *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<unsigned __int64,Scaleform::AllocatorLH_POD<unsigned __int64,347>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> >
{
	typedef const unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned char * &, long);
	ArrayBase<Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned char * &);
	ArrayBase<Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> >(const unsigned char * &, long);
	ArrayBase<Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> >(const unsigned char * &);
	ArrayBase<Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const unsigned char * & At(unsigned long long);
	const unsigned char * & At(unsigned long long);
	const unsigned char * ValueAt(unsigned long long);
	const unsigned char * & operator[](unsigned long long);
	const unsigned char * & operator[](unsigned long long);
	const unsigned char * * GetDataPtr();
	const unsigned char * * GetDataPtr();
	void PushBack(const unsigned char * &);
	void PopBack(unsigned long long);
	const unsigned char * & PushDefault();
	const unsigned char * Pop();
	const unsigned char * & Front();
	const unsigned char * & Front();
	const unsigned char * & Back();
	const unsigned char * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const unsigned char * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const unsigned char * &);
	void Append(const unsigned char * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<unsigned char const *,Scaleform::AllocatorLH_POD<unsigned char const *,339>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH_POD<unsigned long,340> :
	Scaleform::AllocatorBaseLH<340>,
	Scaleform::ConstructorPOD<unsigned long>
{
};
struct Scaleform::AllocatorLH_POD<unsigned __int64,347> :
	Scaleform::AllocatorBaseLH<347>,
	Scaleform::ConstructorPOD<unsigned __int64>
{
};
struct Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy>
{
	typedef long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy> &);
	ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy>(long);
	ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy>();
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const long &);
	void Append(const long *, unsigned long long);
	~ArrayData<long,Scaleform::AllocatorLH_POD<long,339>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorLH_POD<unsigned char const *,339> :
	Scaleform::AllocatorBaseLH<339>,
	Scaleform::ConstructorPOD<unsigned char const *>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Abc::NamespaceSetInfo &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Abc::NamespaceSetInfo &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Abc::NamespaceSetInfo &, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Abc::NamespaceSetInfo &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::Abc::NamespaceSetInfo & At(unsigned long long);
	Scaleform::GFx::AS3::Abc::NamespaceSetInfo & At(unsigned long long);
	Scaleform::GFx::AS3::Abc::NamespaceSetInfo ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::Abc::NamespaceSetInfo & operator[](unsigned long long);
	Scaleform::GFx::AS3::Abc::NamespaceSetInfo & operator[](unsigned long long);
	Scaleform::GFx::AS3::Abc::NamespaceSetInfo * GetDataPtr();
	const Scaleform::GFx::AS3::Abc::NamespaceSetInfo * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::Abc::NamespaceSetInfo &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::Abc::NamespaceSetInfo & PushDefault();
	Scaleform::GFx::AS3::Abc::NamespaceSetInfo Pop();
	const Scaleform::GFx::AS3::Abc::NamespaceSetInfo & Front();
	Scaleform::GFx::AS3::Abc::NamespaceSetInfo & Front();
	const Scaleform::GFx::AS3::Abc::NamespaceSetInfo & Back();
	Scaleform::GFx::AS3::Abc::NamespaceSetInfo & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::Abc::NamespaceSetInfo &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::Abc::NamespaceSetInfo &);
	void Append(const Scaleform::GFx::AS3::Abc::NamespaceSetInfo *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayData<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::Abc::NamespaceSetInfo,340>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorLH_POD<Scaleform::GFx::AS3::VMAbcFile *,329> :
	Scaleform::AllocatorBaseLH<329>,
	Scaleform::ConstructorPOD<Scaleform::GFx::AS3::VMAbcFile *>
{
};
struct Scaleform::AllocatorLH<unsigned int,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<unsigned int>
{
};
struct Scaleform::AllocatorLH<unsigned char,2> :
	Scaleform::AllocatorBaseLH<2>,
	Scaleform::ConstructorMov<unsigned char>
{
};
const Scaleform::ArrayLH_POD<unsigned char,2,Scaleform::ArrayDefaultPolicy> & Scaleform::ArrayLH_POD<unsigned char,2,Scaleform::ArrayDefaultPolicy>::operator=(const Scaleform::ArrayLH_POD<unsigned char,2,Scaleform::ArrayDefaultPolicy> & a); // 0x140375E50
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::TextMeshLayer &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::TextMeshLayer &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::TextMeshLayer &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::TextMeshLayer &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::TextMeshLayer & At(unsigned long long);
	Scaleform::Render::TextMeshLayer & At(unsigned long long);
	Scaleform::Render::TextMeshLayer ValueAt(unsigned long long);
	const Scaleform::Render::TextMeshLayer & operator[](unsigned long long);
	Scaleform::Render::TextMeshLayer & operator[](unsigned long long);
	Scaleform::Render::TextMeshLayer * GetDataPtr();
	const Scaleform::Render::TextMeshLayer * GetDataPtr();
	void PushBack(const Scaleform::Render::TextMeshLayer &);
	void PopBack(unsigned long long);
	Scaleform::Render::TextMeshLayer & PushDefault();
	Scaleform::Render::TextMeshLayer Pop();
	const Scaleform::Render::TextMeshLayer & Front();
	Scaleform::Render::TextMeshLayer & Front();
	const Scaleform::Render::TextMeshLayer & Back();
	Scaleform::Render::TextMeshLayer & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::TextMeshLayer &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::TextMeshLayer &);
	void Append(const Scaleform::Render::TextMeshLayer *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::TextMeshEntry &);
	void Append(const Scaleform::Render::TextMeshEntry *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::TextMeshEntry &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::TextMeshEntry &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::TextMeshEntry &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::TextMeshEntry &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::TextMeshEntry & At(unsigned long long);
	Scaleform::Render::TextMeshEntry & At(unsigned long long);
	Scaleform::Render::TextMeshEntry ValueAt(unsigned long long);
	const Scaleform::Render::TextMeshEntry & operator[](unsigned long long);
	Scaleform::Render::TextMeshEntry & operator[](unsigned long long);
	Scaleform::Render::TextMeshEntry * GetDataPtr();
	const Scaleform::Render::TextMeshEntry * GetDataPtr();
	void PushBack(const Scaleform::Render::TextMeshEntry &);
	void PopBack(unsigned long long);
	Scaleform::Render::TextMeshEntry & PushDefault();
	Scaleform::Render::TextMeshEntry Pop();
	const Scaleform::Render::TextMeshEntry & Front();
	Scaleform::Render::TextMeshEntry & Front();
	const Scaleform::Render::TextMeshEntry & Back();
	Scaleform::Render::TextMeshEntry & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::TextMeshEntry &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::TextMeshEntry &);
	void Append(const Scaleform::Render::TextMeshEntry *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextMeshEntry,Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::TextMeshLayer &);
	void Append(const Scaleform::Render::TextMeshLayer *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::Render::TextMeshLayer,Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::MovieDataDef::FrameLabelInfo>
{
};
struct Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::MovieDataDef::FrameLabelInfo &);
	void Append(const Scaleform::GFx::MovieDataDef::FrameLabelInfo *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::MovieDataDef::FrameLabelInfo &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::MovieDataDef::FrameLabelInfo &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::MovieDataDef::FrameLabelInfo &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::MovieDataDef::FrameLabelInfo &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::MovieDataDef::FrameLabelInfo & At(unsigned long long);
	Scaleform::GFx::MovieDataDef::FrameLabelInfo & At(unsigned long long);
	Scaleform::GFx::MovieDataDef::FrameLabelInfo ValueAt(unsigned long long);
	const Scaleform::GFx::MovieDataDef::FrameLabelInfo & operator[](unsigned long long);
	Scaleform::GFx::MovieDataDef::FrameLabelInfo & operator[](unsigned long long);
	Scaleform::GFx::MovieDataDef::FrameLabelInfo * GetDataPtr();
	const Scaleform::GFx::MovieDataDef::FrameLabelInfo * GetDataPtr();
	void PushBack(const Scaleform::GFx::MovieDataDef::FrameLabelInfo &);
	void PopBack(unsigned long long);
	Scaleform::GFx::MovieDataDef::FrameLabelInfo & PushDefault();
	Scaleform::GFx::MovieDataDef::FrameLabelInfo Pop();
	const Scaleform::GFx::MovieDataDef::FrameLabelInfo & Front();
	Scaleform::GFx::MovieDataDef::FrameLabelInfo & Front();
	const Scaleform::GFx::MovieDataDef::FrameLabelInfo & Back();
	Scaleform::GFx::MovieDataDef::FrameLabelInfo & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::MovieDataDef::FrameLabelInfo &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::MovieDataDef::FrameLabelInfo &);
	void Append(const Scaleform::GFx::MovieDataDef::FrameLabelInfo *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,Scaleform::AllocatorDH<Scaleform::GFx::MovieDataDef::FrameLabelInfo,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorDH<unsigned char,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<unsigned char>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & PushDefault();
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> Pop();
	const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & Front();
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & Front();
	const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & Back();
	Scaleform::Ptr<Scaleform::GFx::InteractiveObject> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::InteractiveObject> *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const unsigned char &);
	void Append(const unsigned char *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef unsigned char ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned char &, long);
	ArrayBase<Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned char &);
	ArrayBase<Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(const unsigned char &, long);
	ArrayBase<Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(const unsigned char &);
	ArrayBase<Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const unsigned char & At(unsigned long long);
	unsigned char & At(unsigned long long);
	unsigned char ValueAt(unsigned long long);
	const unsigned char & operator[](unsigned long long);
	unsigned char & operator[](unsigned long long);
	unsigned char * GetDataPtr();
	const unsigned char * GetDataPtr();
	void PushBack(const unsigned char &);
	void PopBack(unsigned long long);
	unsigned char & PushDefault();
	unsigned char Pop();
	const unsigned char & Front();
	unsigned char & Front();
	const unsigned char & Back();
	unsigned char & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const unsigned char &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const unsigned char &);
	void Append(const unsigned char *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<unsigned char,Scaleform::AllocatorDH<unsigned char,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::InteractiveObject>,327> :
	Scaleform::AllocatorBaseDH<327>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::GFx::InteractiveObject> >
{
};
struct Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::Text::StyledText::HTMLImageTagInfo &);
	void Append(const Scaleform::Render::Text::StyledText::HTMLImageTagInfo *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::Text::StyledText::HTMLImageTagInfo>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Text::StyledText::HTMLImageTagInfo &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Text::StyledText::HTMLImageTagInfo &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Text::StyledText::HTMLImageTagInfo &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Text::StyledText::HTMLImageTagInfo &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::Text::StyledText::HTMLImageTagInfo & At(unsigned long long);
	Scaleform::Render::Text::StyledText::HTMLImageTagInfo & At(unsigned long long);
	Scaleform::Render::Text::StyledText::HTMLImageTagInfo ValueAt(unsigned long long);
	const Scaleform::Render::Text::StyledText::HTMLImageTagInfo & operator[](unsigned long long);
	Scaleform::Render::Text::StyledText::HTMLImageTagInfo & operator[](unsigned long long);
	Scaleform::Render::Text::StyledText::HTMLImageTagInfo * GetDataPtr();
	const Scaleform::Render::Text::StyledText::HTMLImageTagInfo * GetDataPtr();
	void PushBack(const Scaleform::Render::Text::StyledText::HTMLImageTagInfo &);
	void PopBack(unsigned long long);
	Scaleform::Render::Text::StyledText::HTMLImageTagInfo & PushDefault();
	Scaleform::Render::Text::StyledText::HTMLImageTagInfo Pop();
	const Scaleform::Render::Text::StyledText::HTMLImageTagInfo & Front();
	Scaleform::Render::Text::StyledText::HTMLImageTagInfo & Front();
	const Scaleform::Render::Text::StyledText::HTMLImageTagInfo & Back();
	Scaleform::Render::Text::StyledText::HTMLImageTagInfo & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::Text::StyledText::HTMLImageTagInfo &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::Text::StyledText::HTMLImageTagInfo &);
	void Append(const Scaleform::Render::Text::StyledText::HTMLImageTagInfo *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,Scaleform::AllocatorDH<Scaleform::Render::Text::StyledText::HTMLImageTagInfo,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::DisplayObject ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(Scaleform::GFx::DisplayObject * &);
	void Append(Scaleform::GFx::DisplayObject * *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef Scaleform::GFx::DisplayObject ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::DisplayObject * &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::DisplayObject * &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::DisplayObject * &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::DisplayObject * &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	Scaleform::GFx::DisplayObject * & At(unsigned long long);
	Scaleform::GFx::DisplayObject * & At(unsigned long long);
	Scaleform::GFx::DisplayObject * ValueAt(unsigned long long);
	Scaleform::GFx::DisplayObject * & operator[](unsigned long long);
	Scaleform::GFx::DisplayObject * & operator[](unsigned long long);
	Scaleform::GFx::DisplayObject * * GetDataPtr();
	Scaleform::GFx::DisplayObject * * GetDataPtr();
	void PushBack(Scaleform::GFx::DisplayObject * &);
	void PopBack(unsigned long long);
	Scaleform::GFx::DisplayObject * & PushDefault();
	Scaleform::GFx::DisplayObject * Pop();
	Scaleform::GFx::DisplayObject * & Front();
	Scaleform::GFx::DisplayObject * & Front();
	Scaleform::GFx::DisplayObject * & Back();
	Scaleform::GFx::DisplayObject * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, Scaleform::GFx::DisplayObject * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, Scaleform::GFx::DisplayObject * &);
	void Append(Scaleform::GFx::DisplayObject * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::DisplayObject *,Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorDH<Scaleform::GFx::DisplayObject *,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::DisplayObject *>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> & At(unsigned long long);
	Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> & At(unsigned long long);
	Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> ValueAt(unsigned long long);
	const Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> & operator[](unsigned long long);
	Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> & operator[](unsigned long long);
	Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> * GetDataPtr();
	const Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> * GetDataPtr();
	void PushBack(const Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> &);
	void PopBack(unsigned long long);
	Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> & PushDefault();
	Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> Pop();
	const Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> & Front();
	Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> & Front();
	const Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> & Back();
	Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> &);
	void Append(const Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> &);
	void Append(const Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorDH<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t>,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::Text::SGMLStackElemDesc<wchar_t> >
{
};
struct Scaleform::AllocatorDH<Scaleform::Render::TextMeshEntry,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::TextMeshEntry>
{
};
struct Scaleform::AllocatorDH<Scaleform::Render::TextMeshLayer,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::Render::TextMeshLayer>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Value &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Value &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Value &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Value &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::Value & At(unsigned long long);
	Scaleform::GFx::AS3::Value & At(unsigned long long);
	Scaleform::GFx::AS3::Value ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::Value & operator[](unsigned long long);
	Scaleform::GFx::AS3::Value & operator[](unsigned long long);
	Scaleform::GFx::AS3::Value * GetDataPtr();
	const Scaleform::GFx::AS3::Value * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::Value &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::Value & PushDefault();
	Scaleform::GFx::AS3::Value Pop();
	const Scaleform::GFx::AS3::Value & Front();
	Scaleform::GFx::AS3::Value & Front();
	const Scaleform::GFx::AS3::Value & Back();
	Scaleform::GFx::AS3::Value & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::Value &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::Value &);
	void Append(const Scaleform::GFx::AS3::Value *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::GFx::Sprite> >
{
};
struct Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::Sprite> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::Sprite> *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::Sprite> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::Sprite> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::Sprite> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::Sprite> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::Sprite> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::Sprite> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::Sprite> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::Sprite> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::Sprite> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::Sprite> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::GFx::Sprite> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::Sprite> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::Sprite> & PushDefault();
	Scaleform::Ptr<Scaleform::GFx::Sprite> Pop();
	const Scaleform::Ptr<Scaleform::GFx::Sprite> & Front();
	Scaleform::Ptr<Scaleform::GFx::Sprite> & Front();
	const Scaleform::Ptr<Scaleform::GFx::Sprite> & Back();
	Scaleform::Ptr<Scaleform::GFx::Sprite> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::GFx::Sprite> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::GFx::Sprite> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::Sprite> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::Sprite>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::Value &);
	void Append(const Scaleform::GFx::AS3::Value *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::GFx::AS3::Value,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> * GetDataPtr();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> & PushDefault();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> Pop();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> & Front();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> & Front();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> & Back();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> * GetDataPtr();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> & PushDefault();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> Pop();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> & Front();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> & Front();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> & Back();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace>,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::Namespace> >
{
};
struct Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const long &);
	void Append(const long *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::ASStringNode> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::ASStringNode> *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef double ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const double &);
	void Append(const double *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> >
{
};
struct Scaleform::AllocatorDH<unsigned long,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<unsigned long>
{
};
struct Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const unsigned long &);
	void Append(const unsigned long *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::GFx::ASStringNode> >
{
};
struct Scaleform::AllocatorDH<double,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<double>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const long &, long);
	ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const long &);
	ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> >(const long &, long);
	ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> >(const long &);
	ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const long & At(unsigned long long);
	long & At(unsigned long long);
	long ValueAt(unsigned long long);
	const long & operator[](unsigned long long);
	long & operator[](unsigned long long);
	long * GetDataPtr();
	const long * GetDataPtr();
	void PushBack(const long &);
	void PopBack(unsigned long long);
	long & PushDefault();
	long Pop();
	const long & Front();
	long & Front();
	const long & Back();
	long & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const long &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const long &);
	void Append(const long *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH<long,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef unsigned long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned long &, long);
	ArrayBase<Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned long &);
	ArrayBase<Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >(const unsigned long &, long);
	ArrayBase<Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >(const unsigned long &);
	ArrayBase<Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const unsigned long & At(unsigned long long);
	unsigned long & At(unsigned long long);
	unsigned long ValueAt(unsigned long long);
	const unsigned long & operator[](unsigned long long);
	unsigned long & operator[](unsigned long long);
	unsigned long * GetDataPtr();
	const unsigned long * GetDataPtr();
	void PushBack(const unsigned long &);
	void PopBack(unsigned long long);
	unsigned long & PushDefault();
	unsigned long Pop();
	const unsigned long & Front();
	unsigned long & Front();
	const unsigned long & Back();
	unsigned long & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const unsigned long &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const unsigned long &);
	void Append(const unsigned long *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<unsigned long,Scaleform::AllocatorDH<unsigned long,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> & PushDefault();
	Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> Pop();
	const Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> & Front();
	Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> & Front();
	const Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> & Back();
	Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::DisplayObjectBase>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorDH<long,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<long>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef double ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const double &, long);
	ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const double &);
	ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> >(const double &, long);
	ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> >(const double &);
	ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const double & At(unsigned long long);
	double & At(unsigned long long);
	double ValueAt(unsigned long long);
	const double & operator[](unsigned long long);
	double & operator[](unsigned long long);
	double * GetDataPtr();
	const double * GetDataPtr();
	void PushBack(const double &);
	void PopBack(unsigned long long);
	double & PushDefault();
	double Pop();
	const double & Front();
	double & Front();
	const double & Back();
	double & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const double &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const double &);
	void Append(const double *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<double,Scaleform::AllocatorDH<double,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::ASStringNode> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::ASStringNode> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::ASStringNode> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::ASStringNode> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::ASStringNode> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ASStringNode> & At(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ASStringNode> ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::ASStringNode> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ASStringNode> & operator[](unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ASStringNode> * GetDataPtr();
	const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::ASStringNode> &);
	void PopBack(unsigned long long);
	Scaleform::Ptr<Scaleform::GFx::ASStringNode> & PushDefault();
	Scaleform::Ptr<Scaleform::GFx::ASStringNode> Pop();
	const Scaleform::Ptr<Scaleform::GFx::ASStringNode> & Front();
	Scaleform::Ptr<Scaleform::GFx::ASStringNode> & Front();
	const Scaleform::Ptr<Scaleform::GFx::ASStringNode> & Back();
	Scaleform::Ptr<Scaleform::GFx::ASStringNode> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::GFx::ASStringNode> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::GFx::ASStringNode> &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::ASStringNode> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::Value>
{
};
struct Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> * GetDataPtr();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> & PushDefault();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> Pop();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> & Front();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> & Front();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> & Back();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> >
{
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> * GetDataPtr();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> & PushDefault();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> Pop();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> & Front();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> & Front();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> & Back();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> >
{
};
struct Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorDH<long const *,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<long const *>
{
};
struct Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef const unsigned long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const unsigned long * &);
	void Append(const unsigned long * *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef const unsigned long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned long * &, long);
	ArrayBase<Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned long * &);
	ArrayBase<Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> >(const unsigned long * &, long);
	ArrayBase<Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> >(const unsigned long * &);
	ArrayBase<Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const unsigned long * & At(unsigned long long);
	const unsigned long * & At(unsigned long long);
	const unsigned long * ValueAt(unsigned long long);
	const unsigned long * & operator[](unsigned long long);
	const unsigned long * & operator[](unsigned long long);
	const unsigned long * * GetDataPtr();
	const unsigned long * * GetDataPtr();
	void PushBack(const unsigned long * &);
	void PopBack(unsigned long long);
	const unsigned long * & PushDefault();
	const unsigned long * Pop();
	const unsigned long * & Front();
	const unsigned long * & Front();
	const unsigned long * & Back();
	const unsigned long * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const unsigned long * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const unsigned long * &);
	void Append(const unsigned long * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<unsigned long const *,Scaleform::AllocatorDH<unsigned long const *,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> &);
	void Append(const Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *>
{
};
struct Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef const Scaleform::Ptr<Scaleform::GFx::ASStringNode> ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorDH<double const *,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<double const *>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Pair<double,unsigned long> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Pair<double,unsigned long> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Pair<double,unsigned long> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Pair<double,unsigned long> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Pair<double,unsigned long> & At(unsigned long long);
	Scaleform::Pair<double,unsigned long> & At(unsigned long long);
	Scaleform::Pair<double,unsigned long> ValueAt(unsigned long long);
	const Scaleform::Pair<double,unsigned long> & operator[](unsigned long long);
	Scaleform::Pair<double,unsigned long> & operator[](unsigned long long);
	Scaleform::Pair<double,unsigned long> * GetDataPtr();
	const Scaleform::Pair<double,unsigned long> * GetDataPtr();
	void PushBack(const Scaleform::Pair<double,unsigned long> &);
	void PopBack(unsigned long long);
	Scaleform::Pair<double,unsigned long> & PushDefault();
	Scaleform::Pair<double,unsigned long> Pop();
	const Scaleform::Pair<double,unsigned long> & Front();
	Scaleform::Pair<double,unsigned long> & Front();
	const Scaleform::Pair<double,unsigned long> & Back();
	Scaleform::Pair<double,unsigned long> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Pair<double,unsigned long> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Pair<double,unsigned long> &);
	void Append(const Scaleform::Pair<double,unsigned long> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef const Scaleform::GFx::AS3::Value ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Value * &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Value * &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Value * &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::Value * &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::Value * & At(unsigned long long);
	const Scaleform::GFx::AS3::Value * & At(unsigned long long);
	const Scaleform::GFx::AS3::Value * ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::Value * & operator[](unsigned long long);
	const Scaleform::GFx::AS3::Value * & operator[](unsigned long long);
	const Scaleform::GFx::AS3::Value * * GetDataPtr();
	const Scaleform::GFx::AS3::Value * * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::Value * &);
	void PopBack(unsigned long long);
	const Scaleform::GFx::AS3::Value * & PushDefault();
	const Scaleform::GFx::AS3::Value * Pop();
	const Scaleform::GFx::AS3::Value * & Front();
	const Scaleform::GFx::AS3::Value * & Front();
	const Scaleform::GFx::AS3::Value * & Back();
	const Scaleform::GFx::AS3::Value * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::Value * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::Value * &);
	void Append(const Scaleform::GFx::AS3::Value * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::Pair<double,unsigned long> >
{
};
struct Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> >
{
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> & At(unsigned long long);
	Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> & At(unsigned long long);
	Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> ValueAt(unsigned long long);
	const Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> & operator[](unsigned long long);
	Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> & operator[](unsigned long long);
	Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> * GetDataPtr();
	const Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> * GetDataPtr();
	void PushBack(const Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> &);
	void PopBack(unsigned long long);
	Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> & PushDefault();
	Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> Pop();
	const Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> & Front();
	Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> & Front();
	const Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> & Back();
	Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> &);
	void Append(const Scaleform::Pair<Scaleform::GFx::ASString,unsigned long> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::ASString,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef const long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const long * &);
	void Append(const long * *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef const double ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const double * &);
	void Append(const double * *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorDH<unsigned long const *,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<unsigned long const *>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef const Scaleform::Ptr<Scaleform::GFx::ASStringNode> ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * & At(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * & At(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * ValueAt(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * & operator[](unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * & operator[](unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * * GetDataPtr();
	const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * * GetDataPtr();
	void PushBack(const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * &);
	void PopBack(unsigned long long);
	const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * & PushDefault();
	const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * Pop();
	const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * & Front();
	const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * & Front();
	const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * & Back();
	const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * &);
	void Append(const Scaleform::Ptr<Scaleform::GFx::ASStringNode> * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,Scaleform::AllocatorDH<Scaleform::Ptr<Scaleform::GFx::ASStringNode> const *,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef const Scaleform::GFx::AS3::Value ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::Value * &);
	void Append(const Scaleform::GFx::AS3::Value * *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::GFx::AS3::Value const *,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Pair<double,unsigned long> &);
	void Append(const Scaleform::Pair<double,unsigned long> *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::Pair<double,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<double,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef const long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const long * &, long);
	ArrayBase<Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const long * &);
	ArrayBase<Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> >(const long * &, long);
	ArrayBase<Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> >(const long * &);
	ArrayBase<Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const long * & At(unsigned long long);
	const long * & At(unsigned long long);
	const long * ValueAt(unsigned long long);
	const long * & operator[](unsigned long long);
	const long * & operator[](unsigned long long);
	const long * * GetDataPtr();
	const long * * GetDataPtr();
	void PushBack(const long * &);
	void PopBack(unsigned long long);
	const long * & PushDefault();
	const long * Pop();
	const long * & Front();
	const long * & Front();
	const long * & Back();
	const long * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const long * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const long * &);
	void Append(const long * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<long const *,Scaleform::AllocatorDH<long const *,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef const double ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const double * &, long);
	ArrayBase<Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const double * &);
	ArrayBase<Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> >(const double * &, long);
	ArrayBase<Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> >(const double * &);
	ArrayBase<Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const double * & At(unsigned long long);
	const double * & At(unsigned long long);
	const double * ValueAt(unsigned long long);
	const double * & operator[](unsigned long long);
	const double * & operator[](unsigned long long);
	const double * * GetDataPtr();
	const double * * GetDataPtr();
	void PushBack(const double * &);
	void PopBack(unsigned long long);
	const double * & PushDefault();
	const double * Pop();
	const double * & Front();
	const double * & Front();
	const double * & Back();
	const double * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const double * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const double * &);
	void Append(const double * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<double const *,Scaleform::AllocatorDH<double const *,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorDH<Scaleform::GFx::AS3::Value const *,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::Value const *>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> & At(unsigned long long);
	Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> & At(unsigned long long);
	Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> ValueAt(unsigned long long);
	const Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> & operator[](unsigned long long);
	Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> & operator[](unsigned long long);
	Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> * GetDataPtr();
	const Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> * GetDataPtr();
	void PushBack(const Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> &);
	void PopBack(unsigned long long);
	Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> & PushDefault();
	Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> Pop();
	const Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> & Front();
	Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> & Front();
	const Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> & Back();
	Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> &);
	void Append(const Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> &);
	void Append(const Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const(const Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const(const Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> & At(unsigned long long);
	Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> & At(unsigned long long);
	Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> & operator[](unsigned long long);
	Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> & operator[](unsigned long long);
	Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> * GetDataPtr();
	const Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> & PushDefault();
	Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> Pop();
	const Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> & Front();
	Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> & Front();
	const Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> & Back();
	Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> &);
	void Append(const Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value cons();
};
struct Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> >
{
};
struct Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML>,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Instances::fl::XML> >
{
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::Arra(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::Arra(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::Arra(const Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::Arra(const Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::Arra(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::Arra(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::Arra(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::Arra(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::Arra();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> & At(unsigned long long);
	Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> & At(unsigned long long);
	Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> & operator[](unsigned long long);
	Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> & operator[](unsigned long long);
	Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> * GetDataPtr();
	const Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> & PushDefault();
	Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> Pop();
	const Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> & Front();
	Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> & Front();
	const Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> & Back();
	Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> &);
	void Append(const Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::Arr();
};
struct Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,(const Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> &);
	void Append(const Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long> *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<Scaleform::GFx::ASString,Scaleform::GFx::AS3::Value const *,unsigned long>,2>();
};
struct Scaleform::AllocatorDH<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long>,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::Pair<Scaleform::GFx::AS3::Value const *,unsigned long> >
{
};
struct Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> >
{
};
struct Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> &);
	void Append(const Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long> *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::Impl::Triple<double,Scaleform::GFx::AS3::Value const *,unsigned long>,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::ASString &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::ASString &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::ASString &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::ASString &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::ASString & At(unsigned long long);
	Scaleform::GFx::ASString & At(unsigned long long);
	Scaleform::GFx::ASString ValueAt(unsigned long long);
	const Scaleform::GFx::ASString & operator[](unsigned long long);
	Scaleform::GFx::ASString & operator[](unsigned long long);
	Scaleform::GFx::ASString * GetDataPtr();
	const Scaleform::GFx::ASString * GetDataPtr();
	void PushBack(const Scaleform::GFx::ASString &);
	void PopBack(unsigned long long);
	Scaleform::GFx::ASString & PushDefault();
	Scaleform::GFx::ASString Pop();
	const Scaleform::GFx::ASString & Front();
	Scaleform::GFx::ASString & Front();
	const Scaleform::GFx::ASString & Back();
	Scaleform::GFx::ASString & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::ASString &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::ASString &);
	void Append(const Scaleform::GFx::ASString *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::ReadArgs::AlignedStruct &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::ReadArgs::AlignedStruct &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::ReadArgs::AlignedStruct &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::ReadArgs::AlignedStruct &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::ReadArgs::AlignedStruct & At(unsigned long long);
	Scaleform::GFx::AS3::ReadArgs::AlignedStruct & At(unsigned long long);
	Scaleform::GFx::AS3::ReadArgs::AlignedStruct ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::ReadArgs::AlignedStruct & operator[](unsigned long long);
	Scaleform::GFx::AS3::ReadArgs::AlignedStruct & operator[](unsigned long long);
	Scaleform::GFx::AS3::ReadArgs::AlignedStruct * GetDataPtr();
	const Scaleform::GFx::AS3::ReadArgs::AlignedStruct * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::ReadArgs::AlignedStruct &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::ReadArgs::AlignedStruct & PushDefault();
	Scaleform::GFx::AS3::ReadArgs::AlignedStruct Pop();
	const Scaleform::GFx::AS3::ReadArgs::AlignedStruct & Front();
	Scaleform::GFx::AS3::ReadArgs::AlignedStruct & Front();
	const Scaleform::GFx::AS3::ReadArgs::AlignedStruct & Back();
	Scaleform::GFx::AS3::ReadArgs::AlignedStruct & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::ReadArgs::AlignedStruct &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::ReadArgs::AlignedStruct &);
	void Append(const Scaleform::GFx::AS3::ReadArgs::AlignedStruct *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::ReadArgs::AlignedStruct &);
	void Append(const Scaleform::GFx::AS3::ReadArgs::AlignedStruct *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorDH<Scaleform::GFx::AS3::ReadArgs::AlignedStruct,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::AS3::ReadArgs::AlignedStruct>
{
};
struct Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::ASString &);
	void Append(const Scaleform::GFx::ASString *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef Scaleform::Render::TextNotifier ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::Render::TextNotifier * &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::Render::TextNotifier * &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::Render::TextNotifier * &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::Render::TextNotifier * &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	Scaleform::Render::TextNotifier * & At(unsigned long long);
	Scaleform::Render::TextNotifier * & At(unsigned long long);
	Scaleform::Render::TextNotifier * ValueAt(unsigned long long);
	Scaleform::Render::TextNotifier * & operator[](unsigned long long);
	Scaleform::Render::TextNotifier * & operator[](unsigned long long);
	Scaleform::Render::TextNotifier * * GetDataPtr();
	Scaleform::Render::TextNotifier * * GetDataPtr();
	void PushBack(Scaleform::Render::TextNotifier * &);
	void PopBack(unsigned long long);
	Scaleform::Render::TextNotifier * & PushDefault();
	Scaleform::Render::TextNotifier * Pop();
	Scaleform::Render::TextNotifier * & Front();
	Scaleform::Render::TextNotifier * & Front();
	Scaleform::Render::TextNotifier * & Back();
	Scaleform::Render::TextNotifier * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, Scaleform::Render::TextNotifier * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, Scaleform::Render::TextNotifier * &);
	void Append(Scaleform::Render::TextNotifier * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::Render::TextNotifier ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(Scaleform::Render::TextNotifier * &);
	void Append(Scaleform::Render::TextNotifier * *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::Render::TextNotifier *,Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef Scaleform::GFx::TimelineSnapshot::SnapshotElement ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::TimelineSnapshot::SnapshotElement * &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::TimelineSnapshot::SnapshotElement * &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::TimelineSnapshot::SnapshotElement * &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::TimelineSnapshot::SnapshotElement * &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	Scaleform::GFx::TimelineSnapshot::SnapshotElement * & At(unsigned long long);
	Scaleform::GFx::TimelineSnapshot::SnapshotElement * & At(unsigned long long);
	Scaleform::GFx::TimelineSnapshot::SnapshotElement * ValueAt(unsigned long long);
	Scaleform::GFx::TimelineSnapshot::SnapshotElement * & operator[](unsigned long long);
	Scaleform::GFx::TimelineSnapshot::SnapshotElement * & operator[](unsigned long long);
	Scaleform::GFx::TimelineSnapshot::SnapshotElement * * GetDataPtr();
	Scaleform::GFx::TimelineSnapshot::SnapshotElement * * GetDataPtr();
	void PushBack(Scaleform::GFx::TimelineSnapshot::SnapshotElement * &);
	void PopBack(unsigned long long);
	Scaleform::GFx::TimelineSnapshot::SnapshotElement * & PushDefault();
	Scaleform::GFx::TimelineSnapshot::SnapshotElement * Pop();
	Scaleform::GFx::TimelineSnapshot::SnapshotElement * & Front();
	Scaleform::GFx::TimelineSnapshot::SnapshotElement * & Front();
	Scaleform::GFx::TimelineSnapshot::SnapshotElement * & Back();
	Scaleform::GFx::TimelineSnapshot::SnapshotElement * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, Scaleform::GFx::TimelineSnapshot::SnapshotElement * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, Scaleform::GFx::TimelineSnapshot::SnapshotElement * &);
	void Append(Scaleform::GFx::TimelineSnapshot::SnapshotElement * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorPOD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *>
{
};
struct Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::TimelineSnapshot::SnapshotElement ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(Scaleform::GFx::TimelineSnapshot::SnapshotElement * &);
	void Append(Scaleform::GFx::TimelineSnapshot::SnapshotElement * *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,Scaleform::AllocatorDH_POD<Scaleform::GFx::TimelineSnapshot::SnapshotElement *,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorDH_POD<Scaleform::Render::TextNotifier *,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorPOD<Scaleform::Render::TextNotifier *>
{
};
struct Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorPOD<enum Scaleform::GFx::AS3::XMLParser::Kind>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> >
{
	enum ValueType
	{
		kNone = 0,
		kElement = 1,
		kText = 2,
		kComment = 3,
		kDecl = 4,
		kCData = 5,
		kDocType = 6,
		kProcInstr = 7,
	};
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::XMLParser::Kind &, long);
	ArrayBase<Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::XMLParser::Kind &);
	ArrayBase<Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::XMLParser::Kind &, long);
	ArrayBase<Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::XMLParser::Kind &);
	ArrayBase<Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::XMLParser::Kind & At(unsigned long long);
	Scaleform::GFx::AS3::XMLParser::Kind & At(unsigned long long);
	Scaleform::GFx::AS3::XMLParser::Kind ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::XMLParser::Kind & operator[](unsigned long long);
	Scaleform::GFx::AS3::XMLParser::Kind & operator[](unsigned long long);
	Scaleform::GFx::AS3::XMLParser::Kind * GetDataPtr();
	const Scaleform::GFx::AS3::XMLParser::Kind * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::XMLParser::Kind &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::XMLParser::Kind & PushDefault();
	Scaleform::GFx::AS3::XMLParser::Kind Pop();
	const Scaleform::GFx::AS3::XMLParser::Kind & Front();
	Scaleform::GFx::AS3::XMLParser::Kind & Front();
	const Scaleform::GFx::AS3::XMLParser::Kind & Back();
	Scaleform::GFx::AS3::XMLParser::Kind & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::XMLParser::Kind &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::XMLParser::Kind &);
	void Append(const Scaleform::GFx::AS3::XMLParser::Kind *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy>
{
	enum ValueType
	{
		kNone = 0,
		kElement = 1,
		kText = 2,
		kComment = 3,
		kDecl = 4,
		kCData = 5,
		kDocType = 6,
		kProcInstr = 7,
	};
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::XMLParser::Kind &);
	void Append(const Scaleform::GFx::AS3::XMLParser::Kind *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<enum Scaleform::GFx::AS3::XMLParser::Kind,Scaleform::AllocatorDH_POD<enum Scaleform::GFx::AS3::XMLParser::Kind,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorPOD<Scaleform::Pair<unsigned __int64,unsigned char const *> >
{
};
struct Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy>
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::Pair<unsigned __int64,unsigned char const *> &);
	void Append(const Scaleform::Pair<unsigned __int64,unsigned char const *> *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> >
{
	struct ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Pair<unsigned __int64,unsigned char const *> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::Pair<unsigned __int64,unsigned char const *> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Pair<unsigned __int64,unsigned char const *> &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::Pair<unsigned __int64,unsigned char const *> &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::Pair<unsigned __int64,unsigned char const *> & At(unsigned long long);
	Scaleform::Pair<unsigned __int64,unsigned char const *> & At(unsigned long long);
	Scaleform::Pair<unsigned __int64,unsigned char const *> ValueAt(unsigned long long);
	const Scaleform::Pair<unsigned __int64,unsigned char const *> & operator[](unsigned long long);
	Scaleform::Pair<unsigned __int64,unsigned char const *> & operator[](unsigned long long);
	Scaleform::Pair<unsigned __int64,unsigned char const *> * GetDataPtr();
	const Scaleform::Pair<unsigned __int64,unsigned char const *> * GetDataPtr();
	void PushBack(const Scaleform::Pair<unsigned __int64,unsigned char const *> &);
	void PopBack(unsigned long long);
	Scaleform::Pair<unsigned __int64,unsigned char const *> & PushDefault();
	Scaleform::Pair<unsigned __int64,unsigned char const *> Pop();
	const Scaleform::Pair<unsigned __int64,unsigned char const *> & Front();
	Scaleform::Pair<unsigned __int64,unsigned char const *> & Front();
	const Scaleform::Pair<unsigned __int64,unsigned char const *> & Back();
	Scaleform::Pair<unsigned __int64,unsigned char const *> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::Pair<unsigned __int64,unsigned char const *> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::Pair<unsigned __int64,unsigned char const *> &);
	void Append(const Scaleform::Pair<unsigned __int64,unsigned char const *> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::Pair<unsigned __int64,unsigned char const *>,Scaleform::AllocatorDH_POD<Scaleform::Pair<unsigned __int64,unsigned char const *>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorPOD<Scaleform::GFx::AS3::TR::Def *>
{
};
struct Scaleform::AllocatorDH_POD<long,348> :
	Scaleform::AllocatorBaseDH<348>,
	Scaleform::ConstructorPOD<long>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> >
{
	typedef unsigned long long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned long long &, long);
	ArrayBase<Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const unsigned long long &);
	ArrayBase<Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> >(const unsigned long long &, long);
	ArrayBase<Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> >(const unsigned long long &);
	ArrayBase<Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const unsigned long long & At(unsigned long long);
	unsigned long long & At(unsigned long long);
	unsigned long long ValueAt(unsigned long long);
	const unsigned long long & operator[](unsigned long long);
	unsigned long long & operator[](unsigned long long);
	unsigned long long * GetDataPtr();
	const unsigned long long * GetDataPtr();
	void PushBack(const unsigned long long &);
	void PopBack(unsigned long long);
	unsigned long long & PushDefault();
	unsigned long long Pop();
	const unsigned long long & Front();
	unsigned long long & Front();
	const unsigned long long & Back();
	unsigned long long & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const unsigned long long &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const unsigned long long &);
	void Append(const unsigned long long *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::AbsoluteIndex &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::AbsoluteIndex &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::AbsoluteIndex &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::AbsoluteIndex &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::AbsoluteIndex & At(unsigned long long);
	Scaleform::GFx::AS3::AbsoluteIndex & At(unsigned long long);
	Scaleform::GFx::AS3::AbsoluteIndex ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::AbsoluteIndex & operator[](unsigned long long);
	Scaleform::GFx::AS3::AbsoluteIndex & operator[](unsigned long long);
	Scaleform::GFx::AS3::AbsoluteIndex * GetDataPtr();
	const Scaleform::GFx::AS3::AbsoluteIndex * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::AbsoluteIndex &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::AbsoluteIndex & PushDefault();
	Scaleform::GFx::AS3::AbsoluteIndex Pop();
	const Scaleform::GFx::AS3::AbsoluteIndex & Front();
	Scaleform::GFx::AS3::AbsoluteIndex & Front();
	const Scaleform::GFx::AS3::AbsoluteIndex & Back();
	Scaleform::GFx::AS3::AbsoluteIndex & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::AbsoluteIndex &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::AbsoluteIndex &);
	void Append(const Scaleform::GFx::AS3::AbsoluteIndex *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::AbsoluteIndex &);
	void Append(const Scaleform::GFx::AS3::AbsoluteIndex *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::GFx::AS3::AbsoluteIndex,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> >
{
	typedef Scaleform::GFx::AS3::TR::Def ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::AS3::TR::Def * &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, Scaleform::GFx::AS3::TR::Def * &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::AS3::TR::Def * &, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::GFx::AS3::TR::Def * &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	Scaleform::GFx::AS3::TR::Def * & At(unsigned long long);
	Scaleform::GFx::AS3::TR::Def * & At(unsigned long long);
	Scaleform::GFx::AS3::TR::Def * ValueAt(unsigned long long);
	Scaleform::GFx::AS3::TR::Def * & operator[](unsigned long long);
	Scaleform::GFx::AS3::TR::Def * & operator[](unsigned long long);
	Scaleform::GFx::AS3::TR::Def * * GetDataPtr();
	Scaleform::GFx::AS3::TR::Def * * GetDataPtr();
	void PushBack(Scaleform::GFx::AS3::TR::Def * &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::TR::Def * & PushDefault();
	Scaleform::GFx::AS3::TR::Def * Pop();
	Scaleform::GFx::AS3::TR::Def * & Front();
	Scaleform::GFx::AS3::TR::Def * & Front();
	Scaleform::GFx::AS3::TR::Def * & Back();
	Scaleform::GFx::AS3::TR::Def * & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, Scaleform::GFx::AS3::TR::Def * &);
	void InsertMultipleAt(unsigned long long, unsigned long long, Scaleform::GFx::AS3::TR::Def * &);
	void Append(Scaleform::GFx::AS3::TR::Def * *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorDH_POD<unsigned __int64,348> :
	Scaleform::AllocatorBaseDH<348>,
	Scaleform::ConstructorPOD<unsigned __int64>
{
};
struct Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy>
{
	typedef unsigned long long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const unsigned long long &);
	void Append(const unsigned long long *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<unsigned __int64,Scaleform::AllocatorDH_POD<unsigned __int64,348>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy>
{
	typedef Scaleform::GFx::AS3::TR::Def ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(Scaleform::GFx::AS3::TR::Def * &);
	void Append(Scaleform::GFx::AS3::TR::Def * *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<Scaleform::GFx::AS3::TR::Def *,Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::TR::Def *,2>,Scaleform::ArrayDefaultPolicy>();
};
struct Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy>
{
	typedef long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, long);
	ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const long &);
	void Append(const long *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	~ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy>();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> >
{
	typedef long ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const long &, long);
	ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const long &);
	ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> >(const long &, long);
	ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> >(const long &);
	ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const long & At(unsigned long long);
	long & At(unsigned long long);
	long ValueAt(unsigned long long);
	const long & operator[](unsigned long long);
	long & operator[](unsigned long long);
	long * GetDataPtr();
	const long * GetDataPtr();
	void PushBack(const long &);
	void PopBack(unsigned long long);
	long & PushDefault();
	long Pop();
	const long & Front();
	long & Front();
	const long & Back();
	long & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const long &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const long &);
	void Append(const long *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDH<long,Scaleform::AllocatorDH_POD<long,348>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::AllocatorDH_POD<Scaleform::GFx::AS3::AbsoluteIndex,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorPOD<Scaleform::GFx::AS3::AbsoluteIndex>
{
};
struct Scaleform::AllocatorLH<Scaleform::GFx::ASString,323> :
	Scaleform::AllocatorBaseLH<323>,
	Scaleform::ConstructorMov<Scaleform::GFx::ASString>
{
};
class Scaleform::ArrayBase<Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::ASString &, long);
	ArrayBase<Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::ASString &);
	ArrayBase<Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::ASString &, long);
	ArrayBase<Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::ASString &);
	ArrayBase<Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::ASString & At(unsigned long long);
	Scaleform::GFx::ASString & At(unsigned long long);
	Scaleform::GFx::ASString ValueAt(unsigned long long);
	const Scaleform::GFx::ASString & operator[](unsigned long long);
	Scaleform::GFx::ASString & operator[](unsigned long long);
	Scaleform::GFx::ASString * GetDataPtr();
	const Scaleform::GFx::ASString * GetDataPtr();
	void PushBack(const Scaleform::GFx::ASString &);
	void PopBack(unsigned long long);
	Scaleform::GFx::ASString & PushDefault();
	Scaleform::GFx::ASString Pop();
	const Scaleform::GFx::ASString & Front();
	Scaleform::GFx::ASString & Front();
	const Scaleform::GFx::ASString & Back();
	Scaleform::GFx::ASString & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::ASString &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::ASString &);
	void Append(const Scaleform::GFx::ASString *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy>(const Scaleform::GFx::ASString &, long);
	ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy>(const Scaleform::GFx::ASString &);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::ASString &);
	void Append(const Scaleform::GFx::ASString *, unsigned long long);
	Scaleform::GFx::ASString DefaultValue; // 0x18
	~ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy>();
	Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> & operator=(const Scaleform::ArrayDataLHCC<Scaleform::GFx::ASString,Scaleform::AllocatorLH<Scaleform::GFx::ASString,323>,Scaleform::ArrayDefaultPolicy> &);
};
struct Scaleform::AllocatorDH<Scaleform::GFx::ASString,2> :
	Scaleform::AllocatorBaseDH<2>,
	Scaleform::ConstructorMov<Scaleform::GFx::ASString>
{
};
struct Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, const Scaleform::GFx::ASString &, long);
	ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, const Scaleform::GFx::ASString &);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::ASString &);
	void Append(const Scaleform::GFx::ASString *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	Scaleform::GFx::ASString DefaultValue; // 0x20
	~ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy>();
	Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> & operator=(const Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> &);
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> &, long);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> &);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> &, long);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> &);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> * GetDataPtr();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> & PushDefault();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> Pop();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> & Front();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> & Front();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> & Back();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> >();
};
struct Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> &, long);
	ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> &);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> DefaultValue; // 0x20
	~ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy>();
	Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> & operator=(const Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> &);
};
struct Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> :
	Scaleform::ArrayDataBase<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	struct BaseType;
	struct SelfType;
	ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>(const Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> &);
	ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> &, long);
	ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> &);
	void Reserve(unsigned long long);
	void Resize(unsigned long long);
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> *, unsigned long long);
	const Scaleform::MemoryHeap * pHeap; // 0x18
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits> DefaultValue; // 0x20
	~ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy>();
	Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> & operator=(const Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::InstanceTraits::Traits>,2>,Scaleform::ArrayDefaultPolicy> &);
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> &, long);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> &);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> &, long);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> &);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> & At(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> ValueAt(unsigned long long);
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> & operator[](unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> * GetDataPtr();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> * GetDataPtr();
	void PushBack(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> &);
	void PopBack(unsigned long long);
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> & PushDefault();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> Pop();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> & Front();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> & Front();
	const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> & Back();
	Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> &);
	void Append(const Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object> *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,Scaleform::AllocatorDH<Scaleform::GFx::AS3::SPtr<Scaleform::GFx::AS3::Object>,2>,Scaleform::ArrayDefaultPolicy> >();
};
class Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >
{
	class ValueType;
	struct AllocatorType;
	struct SizePolicyType;
	class SelfType;
public:
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long, const char *, long);
	static void * operator new(unsigned long long, long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, const char *, long);
	static void * operator new(unsigned long long, const char *, long);
	static void * operator new(unsigned long long, Scaleform::MemAddressStub *);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *, long);
	static void * operator new(unsigned long long, Scaleform::MemoryHeap *);
	static void * operator new(unsigned long long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, const char *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *, long);
	static void operator delete(void *, Scaleform::MemAddressStub *);
	static void operator delete(void *, Scaleform::MemoryHeap *, long, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, const char *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *, long);
	static void operator delete(void *, Scaleform::MemoryHeap *);
	static void operator delete(void *, long, const char *, long);
	static void operator delete(void *, const char *, long);
	static void operator delete(void *);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::ASString &, long);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, const Scaleform::GFx::ASString &);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::ASString &, long);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::GFx::ASString &);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *, long);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >(Scaleform::MemoryHeap *);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >(const Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> > &);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >(long);
	ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >();
	Scaleform::ArrayDefaultPolicy * GetSizePolicy();
	void SetSizePolicy(const Scaleform::ArrayDefaultPolicy &);
	bool NeverShrinking();
	unsigned long long GetSize();
	bool IsEmpty();
	unsigned long long GetCapacity();
	unsigned long long GetNumBytes();
	void ClearAndRelease();
	void Clear();
	void Resize(unsigned long long);
	void Reserve(unsigned long long);
	const Scaleform::GFx::ASString & At(unsigned long long);
	Scaleform::GFx::ASString & At(unsigned long long);
	Scaleform::GFx::ASString ValueAt(unsigned long long);
	const Scaleform::GFx::ASString & operator[](unsigned long long);
	Scaleform::GFx::ASString & operator[](unsigned long long);
	Scaleform::GFx::ASString * GetDataPtr();
	const Scaleform::GFx::ASString * GetDataPtr();
	void PushBack(const Scaleform::GFx::ASString &);
	void PopBack(unsigned long long);
	Scaleform::GFx::ASString & PushDefault();
	Scaleform::GFx::ASString Pop();
	const Scaleform::GFx::ASString & Front();
	Scaleform::GFx::ASString & Front();
	const Scaleform::GFx::ASString & Back();
	Scaleform::GFx::ASString & Back();
	const Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> > & operator=(const Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> > &);
	void RemoveMultipleAt(unsigned long long, unsigned long long);
	void RemoveAt(unsigned long long);
	void InsertAt(unsigned long long, const Scaleform::GFx::ASString &);
	void InsertMultipleAt(unsigned long long, unsigned long long, const Scaleform::GFx::ASString &);
	void Append(const Scaleform::GFx::ASString *, unsigned long long);
	void Append(const Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> > &);
	class Iterator;
	Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Begin();
	Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >::Iterator End();
	Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >::ConstIterator Last();
	Scaleform::ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >::Iterator Last();
	class ConstIterator;
protected:
	Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> Data; // 0x0
public:
	~ArrayBase<Scaleform::ArrayDataDHCC<Scaleform::GFx::ASString,Scaleform::AllocatorDH<Scaleform::GFx::ASString,2>,Scaleform::ArrayDefaultPolicy> >();
};