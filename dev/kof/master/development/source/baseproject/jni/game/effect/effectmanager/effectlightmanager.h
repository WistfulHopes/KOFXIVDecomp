#pragma once

class std::vector<ParticleData,std::allocator<ParticleData> > :
	std::_Vector_alloc<std::_Vec_base_types<ParticleData,std::allocator<ParticleData> > >
{
	class _Myt;
	class _Mybase;
	class allocator_type;
	struct _Alty;
	struct value_type;
	typedef unsigned long long size_type;
	typedef long long difference_type;
	typedef ParticleData pointer;
	typedef const ParticleData const_pointer;
	typedef ParticleData reference;
	typedef const ParticleData const_reference;
	class iterator;
	class const_iterator;
	class reverse_iterator;
	class const_reverse_iterator;
public:
	vector<ParticleData,std::allocator<ParticleData> >(std::initializer_list<ParticleData>, const std::allocator<ParticleData> &);
	vector<ParticleData,std::allocator<ParticleData> >(std::vector<ParticleData,std::allocator<ParticleData> > &, const std::allocator<ParticleData> &);
	vector<ParticleData,std::allocator<ParticleData> >(std::vector<ParticleData,std::allocator<ParticleData> > &);
	vector<ParticleData,std::allocator<ParticleData> >(const std::vector<ParticleData,std::allocator<ParticleData> > &, const std::allocator<ParticleData> &);
	vector<ParticleData,std::allocator<ParticleData> >(const std::vector<ParticleData,std::allocator<ParticleData> > &);
	vector<ParticleData,std::allocator<ParticleData> >(unsigned long long, const ParticleData &, const std::allocator<ParticleData> &);
	vector<ParticleData,std::allocator<ParticleData> >(unsigned long long, const ParticleData &);
	vector<ParticleData,std::allocator<ParticleData> >(unsigned long long);
	vector<ParticleData,std::allocator<ParticleData> >(const std::allocator<ParticleData> &);
	vector<ParticleData,std::allocator<ParticleData> >();
	void _Construct_n(unsigned long long, const ParticleData *);
	std::vector<ParticleData,std::allocator<ParticleData> > & operator=(const std::vector<ParticleData,std::allocator<ParticleData> > &);
	std::vector<ParticleData,std::allocator<ParticleData> > & operator=(std::initializer_list<ParticleData>);
	std::vector<ParticleData,std::allocator<ParticleData> > & operator=(std::vector<ParticleData,std::allocator<ParticleData> > &);
	void _Assign_rv(std::vector<ParticleData,std::allocator<ParticleData> > &);
	void _Assign_rv(std::vector<ParticleData,std::allocator<ParticleData> > &, std::integral_constant<bool,0>);
	void _Assign_rv(std::vector<ParticleData,std::allocator<ParticleData> > &, std::integral_constant<bool,1>);
	void push_back(const ParticleData &);
	void push_back(ParticleData &);
	std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > > insert(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > >, unsigned long long, const ParticleData &);
	std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > > insert(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > >, const ParticleData &);
	std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > > insert(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > >, std::initializer_list<ParticleData>);
	std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > > insert(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > >, ParticleData &);
	void assign(unsigned long long, const ParticleData &);
	void assign(std::initializer_list<ParticleData>);
	~vector<ParticleData,std::allocator<ParticleData> >();
	void reserve(unsigned long long);
	unsigned long long capacity();
	unsigned long long _Unused_capacity();
	unsigned long long _Has_unused_capacity();
	std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > > begin();
	std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > > begin();
	std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > > end();
	std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > > end();
	std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > > _Make_iter(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > >);
	std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > > > rbegin();
	std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > > > rbegin();
	std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > > > rend();
	std::reverse_iterator<std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > > > rend();
	std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > > cbegin();
	std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > > cend();
	std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > > > crbegin();
	std::reverse_iterator<std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > > > crend();
	void shrink_to_fit();
	void resize(unsigned long long, const ParticleData &);
	void resize(unsigned long long);
	unsigned long long size();
	unsigned long long max_size();
	bool empty();
	std::allocator<ParticleData> get_allocator();
	ParticleData & at(unsigned long long);
	const ParticleData & at(unsigned long long);
	ParticleData & operator[](unsigned long long);
	const ParticleData & operator[](unsigned long long);
	const ParticleData * data();
	ParticleData * data();
	const ParticleData & front();
	ParticleData & front();
	const ParticleData & back();
	ParticleData & back();
	void pop_back();
	std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > > erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > >, std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > >);
	std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > > erase(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > >);
	void _Pop_back_n(unsigned long long);
	void clear();
	void swap(std::vector<ParticleData,std::allocator<ParticleData> > &);
protected:
	bool _Buy(unsigned long long);
	void _Destroy(ParticleData *, ParticleData *);
	unsigned long long _Grow_to(unsigned long long);
	bool _Inside(const ParticleData *);
	void _Reallocate(unsigned long long);
	void _Reserve(unsigned long long);
	void _Tidy();
	std::_Vector_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > > _Insert_n(std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<ParticleData> > >, unsigned long long, const ParticleData &);
	ParticleData * _Ufill(ParticleData *, unsigned long long, const ParticleData *);
	void _Xlen();
	void _Xran();
	void _Orphan_range(ParticleData *, ParticleData *);
};